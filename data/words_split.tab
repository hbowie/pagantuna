Tag	Title	Date	Status	Tags	Teaser	Body
CMMI	My Position on the CMMI	2008-03-15	9 - Closed	CMMI, Improvement, Software Development	"<p>As someone engaged in software development process improvement, I often get challenged, directly or indirectly, to state my position on the Capability Maturity Model&reg; Integration, otherwise known as the <a href=&quot;http://www.sei.cmu.edu/cmmi/&quot;>CMMI</a>&reg;. While this is a complex subject, and an emotional one for many, I think it is worth addressing. So here goes. </p>
"	"As someone engaged in software development process improvement, I often get challenged, directly or indirectly, to state my position on the Capability Maturity Model&reg; Integration, otherwise known as the [CMMI][]&reg;. While this is a complex subject, and an emotional one for many, I think it is worth addressing. So here goes. 

Advantages of the CMMI
----------------------

1. The CMMI offers a very comprehensive model for thinking about, planning, and pursuing software development process improvement activities. 

2. The CMMI is a body of knowledge that offers a proven approach for improvement of development processes. 

Reservations about the CMMI
---------------------------

1. Its bulk. The CMMI for Development, Version 1.2 weighs in at a total of 676 pages. The sheer size of the thing makes it relatively inaccessible. 

2. Its form of publication. The CMMI is a [book][cmmi-book] with a cover price of $69.99 US. And the book consists of mostly text, with very few pictures. Sure, you can download it from the [SEI Web site][cmmi-download] for free, but only as a massive [PDF file][cmmi-pdf] or [MS-Word document][cmmi-word]. Steve Jobs, Apple CEO (who is actually quoted in the latest edition), when recently asked about Apple developing an e-book reader, said it wasn't worth the company's effort, because ""[people don't read anymore][jobs-noread]."" Now, while this might be an overstatement, it does reflect an underlying reality that people today are used to getting information in smaller chunks, and in multiple media (audio/video, as well as straight text). Again, the form of the work makes the CMMI relatively inaccessible. 

3. Its ownership. At the front of the CMMI-DEV, V1.2 you will find the following text.

    > This work is sponsored by the U.S. Department of Defense. The Software Engineering Institute is a federally funded research and development center sponsored by the U. S. Department of Defense. 

    > Copyright 2006 by Carnegie Mellon University. 

    Because the CMMI is tightly held intellectual property tied to several large institutions, including the US Government, the ability to use the thing, including the ability to train people on it, and the ability to adapt it for use in varying situations, suffers from many legal restrictions and financial burdens.

4. Its rate of change. Partially due, no doubt, to the institutional ownership issues identified above, as well as to its form of publication, revisions to the CMMI take years and years to produce. 

5. Its level of abstraction. Most software developers spend a great deal of their time dealing with very technical details of languages, compilers, operating systems and databases, and/or with very specific details of the problem domain in which they are working. And yet the CMMI:

    * Avoids most of these topics that are of interest to software developers;
    * Does not even talk about software development specifically, but instead about product and service development in general;
    * Focuses only on processes; 
    * Offers no guidance as to specific processes;
    * Offers a model for improvement of development processes. 

    It is not much of a stretch to say that handing a working software developer a copy of the CMMI is like giving someone in need of car repair a copy of [Isaac Newton][newton]'s <cite>[Philosophi√¶ Naturalis Principia Mathematica][newton-1687]</cite>: in both cases the problem is not that the tome is irrelevant, but rather that the level of abstraction is so far away from the problem at hand as to render the document relatively useless. 

6. Its wealth of detail. Considering its level of abstraction, it seems somewhat perverse that the model is only available as a single volume of over 600 pages. If it were constructed as a graphic model, with the ability to see the whole high-level model at a glance, and drill down to lower levels of detail only as needed, then this detail would be much more valuable. As it is, it's like including Thomas Jefferson's grocery list and family tree in the middle of the Bill of Rights -- yes, there is a relationship and yes, the additional details are of interest, but mixing them together in this way can only have the effect of obscuring the very high-level structure you are most interested in communicating. 

7. Its relationship to the [SCAMPI][] appraisal method. In theory, and occasionally in practice, the Standard CMMI Appraisal Method for Process Improvement can actually be used in a constructive way to help facilitate continuing process improvement. All too often, though, such an appraisal seems to consume a large number of resources, and produces results that are more focused on the mechanics of passing an appraisal and pleasing an appraiser, rather than on lasting improvements. 

8. Its usage model. Given all of the above, the only practical way to make use of the CMMI in the field is to acquire a special [cadre of process improvement specialists][sepg] to study, explain, interpret and apply the CMMI within the context of a specific organization. The intrinsic problem with the introduction of such a helper class is that it seems to inevitably lead to some sort of reformation movement that sidesteps this group to appeal more directly to the actual practitioners (see the Agile discussion below).

9. Its common deployment practices. Many implementations seem to create the impression that the CMMI favors heavyweight development methodologies based on a traditional waterfall lifecycle, and the creation of lengthy documentation rather than actual working software. While these interpretations are not strictly true, they are very commonly encountered in the field.

10. Its image. One could try to sell the CMMI as a work that is really relevant to some hip young Internet startup firm, but then... see items 1 - 9. From a marketing perspective alone, these items present an almost insurmountable barrier to adoption. And it is important to note that these are much more than cosmetic issues: these are very fundamental, ""[the medium is the message][medium-msg]"" type issues. In our modern Web 2.0, egalitarian, empowered world, the CMMI is about as viral as the [hula hoop][hula-hoop]. 

11. Its relationship to [Agile][]. The Agile movement was started in many ways as a reaction to the perceived excesses of the CMMI. Since its inception in the late nineties, Agile has seen a great deal of success and a great deal of adoption. And while the Agile movement is certainly vulnerable to criticism, there are three aspects of the Agile movement that should be particularly troubling for the CMMI:

    * Agile, either by good fortune or good planning, has managed to avoid issues 1 - 10 on my list above. 
    * Whatever one thinks of the movement as a whole or particular Agile evangelists, it is hard to deny that many of the practices advocated by Agile are actually helpful to developers. 
    * ...and yet, there seems to be absolutely no correlation between the usage of the CMMI and the development of these specific practices found to be helpful.

    Many CMMI advocates seem to miss the significance of this last point. In the last year or two, some CMMI authors and consultants have begun to argue that [the CMMI and Agile can be reconciled][cmmi-agile]. This is certainly true, but it misses the point. If you have something like the CMMI that you are marketing as a framework to use for process improvement, and then you find that the most popular and useful new practices adopted by developers in recent years were mostly created by people trying to run away from your process improvement framework as quickly as possible, then resorting to lengthy proofs that such improvements could well have been developed by people working within your framework does not really alter the fact that they weren't.   

12. Its fundamental business model. The [Software Engineering Institute][sei] seems to find itself today in a position very similar to that of the [major record labels][record-labels]. The labels have traditionally justified their existence based on exclusive access to highly desirable content providers and to an efficient distribution system. In both cases, though, the variety of high-quality content providers, the appearance of alternate distribution systems, and the slowness to respond to changing circumstances have resulted in the gradual erosion of the fundamental value propositions offered by the more established business models.   

My Bottom Line
--------------

So where does this leave me?

As someone who is already familiar with the CMMI, I find it a valuable reference work, and one that offers much practical advice for anyone interested in ongoing efforts to improve the results of software development activities. 

On the other hand, due to the accumulated weight of the reservations listed above, I find it difficult to make use of the CMMI either as the centerpiece of a modern software development improvement effort or as the primary organizing model for such an effort. 

[CMMI]: http://cmmiinstitute.com/about-cmmi-institute
[cmmi-book]: http://www.amazon.com/gp/product/0321279670?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0321279670
[cmmi-pdf]: http://www.sei.cmu.edu/pub/documents/06.reports/pdf/06tr008.pdf
[cmmi-download]: http://www.sei.cmu.edu/publications/documents/06.reports/06tr008.html
[cmmi-word]: http://www.sei.cmu.edu/cmmi/models/model-v12-components-word.html
[jobs-noread]: http://bits.blogs.nytimes.com/2008/01/15/the-passion-of-steve-jobs/
[scampi]: http://www.sei.cmu.edu/cmmi/appraisals/
[agile]: http://en.wikipedia.org/wiki/Agile_software_development
[cmmi-agile]: http://www.sei.cmu.edu/publications/documents/08.reports/08tn003.html
[sei]: http://www.sei.cmu.edu/
[record-labels]: http://www.rollingstone.com/news/story/15137581/the_record_industrys_decline/
[newton]: http://en.wikipedia.org/wiki/Isaac_Newton
[newton-1687]: http://en.wikipedia.org/wiki/Philosophi√¶_Naturalis_Principia_Mathematica
[sepg]: http://en.wikipedia.org/wiki/SEPG
[medium-msg]: http://en.wikipedia.org/wiki/The_medium_is_the_message
[hula-hoop]: http://en.wikipedia.org/wiki/Hula_hoop
"
Improvement	My Position on the CMMI	2008-03-15	9 - Closed	CMMI, Improvement, Software Development	"<p>As someone engaged in software development process improvement, I often get challenged, directly or indirectly, to state my position on the Capability Maturity Model&reg; Integration, otherwise known as the <a href=&quot;http://www.sei.cmu.edu/cmmi/&quot;>CMMI</a>&reg;. While this is a complex subject, and an emotional one for many, I think it is worth addressing. So here goes. </p>
"	"As someone engaged in software development process improvement, I often get challenged, directly or indirectly, to state my position on the Capability Maturity Model&reg; Integration, otherwise known as the [CMMI][]&reg;. While this is a complex subject, and an emotional one for many, I think it is worth addressing. So here goes. 

Advantages of the CMMI
----------------------

1. The CMMI offers a very comprehensive model for thinking about, planning, and pursuing software development process improvement activities. 

2. The CMMI is a body of knowledge that offers a proven approach for improvement of development processes. 

Reservations about the CMMI
---------------------------

1. Its bulk. The CMMI for Development, Version 1.2 weighs in at a total of 676 pages. The sheer size of the thing makes it relatively inaccessible. 

2. Its form of publication. The CMMI is a [book][cmmi-book] with a cover price of $69.99 US. And the book consists of mostly text, with very few pictures. Sure, you can download it from the [SEI Web site][cmmi-download] for free, but only as a massive [PDF file][cmmi-pdf] or [MS-Word document][cmmi-word]. Steve Jobs, Apple CEO (who is actually quoted in the latest edition), when recently asked about Apple developing an e-book reader, said it wasn't worth the company's effort, because ""[people don't read anymore][jobs-noread]."" Now, while this might be an overstatement, it does reflect an underlying reality that people today are used to getting information in smaller chunks, and in multiple media (audio/video, as well as straight text). Again, the form of the work makes the CMMI relatively inaccessible. 

3. Its ownership. At the front of the CMMI-DEV, V1.2 you will find the following text.

    > This work is sponsored by the U.S. Department of Defense. The Software Engineering Institute is a federally funded research and development center sponsored by the U. S. Department of Defense. 

    > Copyright 2006 by Carnegie Mellon University. 

    Because the CMMI is tightly held intellectual property tied to several large institutions, including the US Government, the ability to use the thing, including the ability to train people on it, and the ability to adapt it for use in varying situations, suffers from many legal restrictions and financial burdens.

4. Its rate of change. Partially due, no doubt, to the institutional ownership issues identified above, as well as to its form of publication, revisions to the CMMI take years and years to produce. 

5. Its level of abstraction. Most software developers spend a great deal of their time dealing with very technical details of languages, compilers, operating systems and databases, and/or with very specific details of the problem domain in which they are working. And yet the CMMI:

    * Avoids most of these topics that are of interest to software developers;
    * Does not even talk about software development specifically, but instead about product and service development in general;
    * Focuses only on processes; 
    * Offers no guidance as to specific processes;
    * Offers a model for improvement of development processes. 

    It is not much of a stretch to say that handing a working software developer a copy of the CMMI is like giving someone in need of car repair a copy of [Isaac Newton][newton]'s <cite>[Philosophi√¶ Naturalis Principia Mathematica][newton-1687]</cite>: in both cases the problem is not that the tome is irrelevant, but rather that the level of abstraction is so far away from the problem at hand as to render the document relatively useless. 

6. Its wealth of detail. Considering its level of abstraction, it seems somewhat perverse that the model is only available as a single volume of over 600 pages. If it were constructed as a graphic model, with the ability to see the whole high-level model at a glance, and drill down to lower levels of detail only as needed, then this detail would be much more valuable. As it is, it's like including Thomas Jefferson's grocery list and family tree in the middle of the Bill of Rights -- yes, there is a relationship and yes, the additional details are of interest, but mixing them together in this way can only have the effect of obscuring the very high-level structure you are most interested in communicating. 

7. Its relationship to the [SCAMPI][] appraisal method. In theory, and occasionally in practice, the Standard CMMI Appraisal Method for Process Improvement can actually be used in a constructive way to help facilitate continuing process improvement. All too often, though, such an appraisal seems to consume a large number of resources, and produces results that are more focused on the mechanics of passing an appraisal and pleasing an appraiser, rather than on lasting improvements. 

8. Its usage model. Given all of the above, the only practical way to make use of the CMMI in the field is to acquire a special [cadre of process improvement specialists][sepg] to study, explain, interpret and apply the CMMI within the context of a specific organization. The intrinsic problem with the introduction of such a helper class is that it seems to inevitably lead to some sort of reformation movement that sidesteps this group to appeal more directly to the actual practitioners (see the Agile discussion below).

9. Its common deployment practices. Many implementations seem to create the impression that the CMMI favors heavyweight development methodologies based on a traditional waterfall lifecycle, and the creation of lengthy documentation rather than actual working software. While these interpretations are not strictly true, they are very commonly encountered in the field.

10. Its image. One could try to sell the CMMI as a work that is really relevant to some hip young Internet startup firm, but then... see items 1 - 9. From a marketing perspective alone, these items present an almost insurmountable barrier to adoption. And it is important to note that these are much more than cosmetic issues: these are very fundamental, ""[the medium is the message][medium-msg]"" type issues. In our modern Web 2.0, egalitarian, empowered world, the CMMI is about as viral as the [hula hoop][hula-hoop]. 

11. Its relationship to [Agile][]. The Agile movement was started in many ways as a reaction to the perceived excesses of the CMMI. Since its inception in the late nineties, Agile has seen a great deal of success and a great deal of adoption. And while the Agile movement is certainly vulnerable to criticism, there are three aspects of the Agile movement that should be particularly troubling for the CMMI:

    * Agile, either by good fortune or good planning, has managed to avoid issues 1 - 10 on my list above. 
    * Whatever one thinks of the movement as a whole or particular Agile evangelists, it is hard to deny that many of the practices advocated by Agile are actually helpful to developers. 
    * ...and yet, there seems to be absolutely no correlation between the usage of the CMMI and the development of these specific practices found to be helpful.

    Many CMMI advocates seem to miss the significance of this last point. In the last year or two, some CMMI authors and consultants have begun to argue that [the CMMI and Agile can be reconciled][cmmi-agile]. This is certainly true, but it misses the point. If you have something like the CMMI that you are marketing as a framework to use for process improvement, and then you find that the most popular and useful new practices adopted by developers in recent years were mostly created by people trying to run away from your process improvement framework as quickly as possible, then resorting to lengthy proofs that such improvements could well have been developed by people working within your framework does not really alter the fact that they weren't.   

12. Its fundamental business model. The [Software Engineering Institute][sei] seems to find itself today in a position very similar to that of the [major record labels][record-labels]. The labels have traditionally justified their existence based on exclusive access to highly desirable content providers and to an efficient distribution system. In both cases, though, the variety of high-quality content providers, the appearance of alternate distribution systems, and the slowness to respond to changing circumstances have resulted in the gradual erosion of the fundamental value propositions offered by the more established business models.   

My Bottom Line
--------------

So where does this leave me?

As someone who is already familiar with the CMMI, I find it a valuable reference work, and one that offers much practical advice for anyone interested in ongoing efforts to improve the results of software development activities. 

On the other hand, due to the accumulated weight of the reservations listed above, I find it difficult to make use of the CMMI either as the centerpiece of a modern software development improvement effort or as the primary organizing model for such an effort. 

[CMMI]: http://cmmiinstitute.com/about-cmmi-institute
[cmmi-book]: http://www.amazon.com/gp/product/0321279670?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0321279670
[cmmi-pdf]: http://www.sei.cmu.edu/pub/documents/06.reports/pdf/06tr008.pdf
[cmmi-download]: http://www.sei.cmu.edu/publications/documents/06.reports/06tr008.html
[cmmi-word]: http://www.sei.cmu.edu/cmmi/models/model-v12-components-word.html
[jobs-noread]: http://bits.blogs.nytimes.com/2008/01/15/the-passion-of-steve-jobs/
[scampi]: http://www.sei.cmu.edu/cmmi/appraisals/
[agile]: http://en.wikipedia.org/wiki/Agile_software_development
[cmmi-agile]: http://www.sei.cmu.edu/publications/documents/08.reports/08tn003.html
[sei]: http://www.sei.cmu.edu/
[record-labels]: http://www.rollingstone.com/news/story/15137581/the_record_industrys_decline/
[newton]: http://en.wikipedia.org/wiki/Isaac_Newton
[newton-1687]: http://en.wikipedia.org/wiki/Philosophi√¶_Naturalis_Principia_Mathematica
[sepg]: http://en.wikipedia.org/wiki/SEPG
[medium-msg]: http://en.wikipedia.org/wiki/The_medium_is_the_message
[hula-hoop]: http://en.wikipedia.org/wiki/Hula_hoop
"
Software Development	My Position on the CMMI	2008-03-15	9 - Closed	CMMI, Improvement, Software Development	"<p>As someone engaged in software development process improvement, I often get challenged, directly or indirectly, to state my position on the Capability Maturity Model&reg; Integration, otherwise known as the <a href=&quot;http://www.sei.cmu.edu/cmmi/&quot;>CMMI</a>&reg;. While this is a complex subject, and an emotional one for many, I think it is worth addressing. So here goes. </p>
"	"As someone engaged in software development process improvement, I often get challenged, directly or indirectly, to state my position on the Capability Maturity Model&reg; Integration, otherwise known as the [CMMI][]&reg;. While this is a complex subject, and an emotional one for many, I think it is worth addressing. So here goes. 

Advantages of the CMMI
----------------------

1. The CMMI offers a very comprehensive model for thinking about, planning, and pursuing software development process improvement activities. 

2. The CMMI is a body of knowledge that offers a proven approach for improvement of development processes. 

Reservations about the CMMI
---------------------------

1. Its bulk. The CMMI for Development, Version 1.2 weighs in at a total of 676 pages. The sheer size of the thing makes it relatively inaccessible. 

2. Its form of publication. The CMMI is a [book][cmmi-book] with a cover price of $69.99 US. And the book consists of mostly text, with very few pictures. Sure, you can download it from the [SEI Web site][cmmi-download] for free, but only as a massive [PDF file][cmmi-pdf] or [MS-Word document][cmmi-word]. Steve Jobs, Apple CEO (who is actually quoted in the latest edition), when recently asked about Apple developing an e-book reader, said it wasn't worth the company's effort, because ""[people don't read anymore][jobs-noread]."" Now, while this might be an overstatement, it does reflect an underlying reality that people today are used to getting information in smaller chunks, and in multiple media (audio/video, as well as straight text). Again, the form of the work makes the CMMI relatively inaccessible. 

3. Its ownership. At the front of the CMMI-DEV, V1.2 you will find the following text.

    > This work is sponsored by the U.S. Department of Defense. The Software Engineering Institute is a federally funded research and development center sponsored by the U. S. Department of Defense. 

    > Copyright 2006 by Carnegie Mellon University. 

    Because the CMMI is tightly held intellectual property tied to several large institutions, including the US Government, the ability to use the thing, including the ability to train people on it, and the ability to adapt it for use in varying situations, suffers from many legal restrictions and financial burdens.

4. Its rate of change. Partially due, no doubt, to the institutional ownership issues identified above, as well as to its form of publication, revisions to the CMMI take years and years to produce. 

5. Its level of abstraction. Most software developers spend a great deal of their time dealing with very technical details of languages, compilers, operating systems and databases, and/or with very specific details of the problem domain in which they are working. And yet the CMMI:

    * Avoids most of these topics that are of interest to software developers;
    * Does not even talk about software development specifically, but instead about product and service development in general;
    * Focuses only on processes; 
    * Offers no guidance as to specific processes;
    * Offers a model for improvement of development processes. 

    It is not much of a stretch to say that handing a working software developer a copy of the CMMI is like giving someone in need of car repair a copy of [Isaac Newton][newton]'s <cite>[Philosophi√¶ Naturalis Principia Mathematica][newton-1687]</cite>: in both cases the problem is not that the tome is irrelevant, but rather that the level of abstraction is so far away from the problem at hand as to render the document relatively useless. 

6. Its wealth of detail. Considering its level of abstraction, it seems somewhat perverse that the model is only available as a single volume of over 600 pages. If it were constructed as a graphic model, with the ability to see the whole high-level model at a glance, and drill down to lower levels of detail only as needed, then this detail would be much more valuable. As it is, it's like including Thomas Jefferson's grocery list and family tree in the middle of the Bill of Rights -- yes, there is a relationship and yes, the additional details are of interest, but mixing them together in this way can only have the effect of obscuring the very high-level structure you are most interested in communicating. 

7. Its relationship to the [SCAMPI][] appraisal method. In theory, and occasionally in practice, the Standard CMMI Appraisal Method for Process Improvement can actually be used in a constructive way to help facilitate continuing process improvement. All too often, though, such an appraisal seems to consume a large number of resources, and produces results that are more focused on the mechanics of passing an appraisal and pleasing an appraiser, rather than on lasting improvements. 

8. Its usage model. Given all of the above, the only practical way to make use of the CMMI in the field is to acquire a special [cadre of process improvement specialists][sepg] to study, explain, interpret and apply the CMMI within the context of a specific organization. The intrinsic problem with the introduction of such a helper class is that it seems to inevitably lead to some sort of reformation movement that sidesteps this group to appeal more directly to the actual practitioners (see the Agile discussion below).

9. Its common deployment practices. Many implementations seem to create the impression that the CMMI favors heavyweight development methodologies based on a traditional waterfall lifecycle, and the creation of lengthy documentation rather than actual working software. While these interpretations are not strictly true, they are very commonly encountered in the field.

10. Its image. One could try to sell the CMMI as a work that is really relevant to some hip young Internet startup firm, but then... see items 1 - 9. From a marketing perspective alone, these items present an almost insurmountable barrier to adoption. And it is important to note that these are much more than cosmetic issues: these are very fundamental, ""[the medium is the message][medium-msg]"" type issues. In our modern Web 2.0, egalitarian, empowered world, the CMMI is about as viral as the [hula hoop][hula-hoop]. 

11. Its relationship to [Agile][]. The Agile movement was started in many ways as a reaction to the perceived excesses of the CMMI. Since its inception in the late nineties, Agile has seen a great deal of success and a great deal of adoption. And while the Agile movement is certainly vulnerable to criticism, there are three aspects of the Agile movement that should be particularly troubling for the CMMI:

    * Agile, either by good fortune or good planning, has managed to avoid issues 1 - 10 on my list above. 
    * Whatever one thinks of the movement as a whole or particular Agile evangelists, it is hard to deny that many of the practices advocated by Agile are actually helpful to developers. 
    * ...and yet, there seems to be absolutely no correlation between the usage of the CMMI and the development of these specific practices found to be helpful.

    Many CMMI advocates seem to miss the significance of this last point. In the last year or two, some CMMI authors and consultants have begun to argue that [the CMMI and Agile can be reconciled][cmmi-agile]. This is certainly true, but it misses the point. If you have something like the CMMI that you are marketing as a framework to use for process improvement, and then you find that the most popular and useful new practices adopted by developers in recent years were mostly created by people trying to run away from your process improvement framework as quickly as possible, then resorting to lengthy proofs that such improvements could well have been developed by people working within your framework does not really alter the fact that they weren't.   

12. Its fundamental business model. The [Software Engineering Institute][sei] seems to find itself today in a position very similar to that of the [major record labels][record-labels]. The labels have traditionally justified their existence based on exclusive access to highly desirable content providers and to an efficient distribution system. In both cases, though, the variety of high-quality content providers, the appearance of alternate distribution systems, and the slowness to respond to changing circumstances have resulted in the gradual erosion of the fundamental value propositions offered by the more established business models.   

My Bottom Line
--------------

So where does this leave me?

As someone who is already familiar with the CMMI, I find it a valuable reference work, and one that offers much practical advice for anyone interested in ongoing efforts to improve the results of software development activities. 

On the other hand, due to the accumulated weight of the reservations listed above, I find it difficult to make use of the CMMI either as the centerpiece of a modern software development improvement effort or as the primary organizing model for such an effort. 

[CMMI]: http://cmmiinstitute.com/about-cmmi-institute
[cmmi-book]: http://www.amazon.com/gp/product/0321279670?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0321279670
[cmmi-pdf]: http://www.sei.cmu.edu/pub/documents/06.reports/pdf/06tr008.pdf
[cmmi-download]: http://www.sei.cmu.edu/publications/documents/06.reports/06tr008.html
[cmmi-word]: http://www.sei.cmu.edu/cmmi/models/model-v12-components-word.html
[jobs-noread]: http://bits.blogs.nytimes.com/2008/01/15/the-passion-of-steve-jobs/
[scampi]: http://www.sei.cmu.edu/cmmi/appraisals/
[agile]: http://en.wikipedia.org/wiki/Agile_software_development
[cmmi-agile]: http://www.sei.cmu.edu/publications/documents/08.reports/08tn003.html
[sei]: http://www.sei.cmu.edu/
[record-labels]: http://www.rollingstone.com/news/story/15137581/the_record_industrys_decline/
[newton]: http://en.wikipedia.org/wiki/Isaac_Newton
[newton-1687]: http://en.wikipedia.org/wiki/Philosophi√¶_Naturalis_Principia_Mathematica
[sepg]: http://en.wikipedia.org/wiki/SEPG
[medium-msg]: http://en.wikipedia.org/wiki/The_medium_is_the_message
[hula-hoop]: http://en.wikipedia.org/wiki/Hula_hoop
"
CMMI	CMMI Take 2	2008-04-15	9 - Closed	CMMI, Improvement, Software Development	"<p>I received a fair amount of feedback on my last post about the CMMI&reg; &#8212; all of which I very much appreciated &#8212; and I thought I would take another run at this subject in order to clarify some of my thoughts in this area.</p><br><br><p>Let me break this down a little differently than I did last time, and talk about five different areas.</p>
"	"I received a fair amount of feedback on my [last post][lastpost] about the [CMMI][]&reg; -- all of which I very much appreciated -- and I thought I would take another run at this subject in order to clarify some of my thoughts in this area.

Let me break this down a little differently than I did last time, and talk about five different areas.

1. The Content of the CMMI
--------------------------

As I said in my last post, I find the content of the CMMI to be very valuable. It is a very useful work on process improvement, especially for development environments. 

2. The Times in which We Live
-----------------------------

A lot has changed in the last 20 years or so since the original [CMM][] was conceived. The Internet and the Web were born. We have grown less comfortable with hierarchical control structures and have moved towards a more egalitarian society. [Web 2.0][web2] has come along. Search engines, wikis, blogs, and social networking sites are changing the ways in which people create, locate and access information and connect with other people. 

3. The Form of the CMMI
-----------------------

Most of the reservations I expressed last time were about the form in which the CMMI is made available. I did not mean these to be taken as general objections -- I was an English major, I *like* long books, and I resented [Steve Jobs' comment that people don't read anymore][jobs-noread] -- but rather as observations that the form of the work limits its accessibility. 

In particular, I find that the form of the CMMI is not a good fit for the times in which we live. Again, this is not a personal issue for me -- I've got a copy on my bookshelf at home, another one on the bookshelf in my office, and I actually open it and read pieces of it on a pretty regular basis -- but I find it hard to convince other people that they should make similar use of it.

The implication here -- which I left implicit in my last post, but which I will now make explicit -- is that I believe the CMMI would be much more useful if it were actually published in a different form. In my more fanciful moments, I picture something like cmmiwiki.org, that would allow users to update and comment on the text, with a companion social networking site where people could exchange stories about how they have found the model to be useful. 

4. The Ways in which the CMMI is Used
-------------------------------------

I believe there are roughly three ways to make use of the CMMI as part of a process improvement effort. 

### a. The Developer Direct Access Approach 

One could give every developer a copy of the CMMI, tell them to read it, send them to training, and ask if they have any questions before putting it to use. 

Most people agree that the CMMI is not intended to be used in this way, and I even took some heat over my last post because I seemed to imply that the CMMI should be something directly accessible to the average developer. So I think we can pretty quickly dispense with this option.

### b. The Back Room Approach 

The organizational process improvement experts could keep a copy of the CMMI hidden in a back room somewhere, and consult it whenever they feel the need of its inspiration and guidance. 

I don't have any problem with this sort of usage, and this is actually a close approximation of how I am attempting to use the CMMI in my current assignment. 

### c. The Centerpiece Approach

Here is the way the third option usually goes, at least based on my experience. 

* Someone convinces the highest-ranking executive they can find to make a public pronouncement that organization *xxx* is beginning its journey to CMMI level *y*, to be completed in *zz* months. 

* Anyone who questions the wisdom of this approach or the feasibility of achieving the goal in the announced timeframe is cheerily asked to report to the cafeteria at 9:00 AM on Friday to find out more about their new career options. 

* Maturity progress indicators are embedded in leadership's balanced scorecards as part of their annual goal-setting exercises, because what gets measured gets done, right?

* A [cadre of process improvement focals][sepg] is recruited and sent out to the developers to help them increase their maturity. 

* When developers show any lack of fortitude or conviction about becoming more mature, they are promptly told that the CMMI requires that they perform practice *xyz*, and they are reminded that the CMMI's authority is backed by executive decree and reinforced by annual goals that they are already behind on. 

* Even though much of the CMMI is suggestive rather than prescriptive, developers are strongly guided to conform as closely as possible to the language and examples used in the CMMI so as to minimize the risk that the appraiser will get confused about their maturity level during the upcoming, very expensive,  highly visible and eagerly anticipated [SCAMPI][] appraisal. 

This option is the one I was expressing reservations about in my last post, when I said that I would hesitate to make the CMMI the ""centerpiece"" (i.e., the highly visible focal point) of a modern process improvement effort. 

There are a couple of important points to be made about this approach.

First, the very form of the CMMI encourages this approach: the daunting book form, the high-risk, high-cost nature of the appraisal, etc. 

Second, this approach is an extremely hierarchical one, and so is not a particularly good fit for the times in which we live. 

5. Comparisons with Agile
-------------------------

I also took some heat from some respondents to my last post for making what they viewed as an apples-and-oranges comparison between CMMI and the [Agile][] movement. 

From a purely conceptual point-of-view, I agree that the CMMI and Agile are not in competition and, as the [SEI has suggested][cmmi-agile], we can indeed embrace both, especially if one chooses my option b above (the back room approach) in terms of a CMMI deployment strategy. 

From a marketing perspective, however, it seems inescapable that Agile and CMMI are in competition for mindshare within the software development community. Embracing both is difficult, not only because so many people view them as antithetical, but for the very practical reason that, as hard as it is to become a credible expert on either one of these approaches, it is that much more difficult to become an expert on both.   

And, in contrast to the CMMI, the Agile movement is an extremely good fit for the times in which we live. Take a look at the table below. 

<table>	
  <caption align=""top"">
    CMMI vs. Agile
	</caption>
  <tr>
    <th width=""50%"">CMMI</th>
    <th width=""50%"">Agile</th>
  </tr>
  <tr>
    <td>Officially published and tightly controlled by a US government agency</td>
    <td>Defined by the mutual consent of a group of working developers</td>
  </tr>
  <tr>
    <td>Published as a lengthy book that most people will never read</td>
    <td>Published as a Web page that anyone can read during their lunch break</td>
  </tr>
  <tr>
    <td>Supported by trainers and appraisers who are officially licensed to do so</td>
    <td>Supported by anyone who can gain credibility with the development community </td>
  </tr>
  <tr>
    <td>Official information only available from the SEI</td>
    <td>Information available from books, web sites, blogs, videos, podcasts, etc. </td>
  </tr>
  <tr>
    <td>Imposed upon practitioners through organizational authority</td>
    <td>Adopted by practitioners based on information obtained from peers</td>
  </tr>
  <tr>
    <td>Strict definitions of process areas and maturity levels</td>
    <td>Loose collection of common practices that can be adapted to circumstances</td>
  </tr>
  <tr>
    <td>Dependent upon a group of organizational process improvement professionals to provide suitable interpretation in an organizational context</td>
    <td>Directly accessible to developers without need of a group of official interpreters </td>
  </tr>
</table>

If you look at the table above, it should be readily apparent that the CMMI column represents an almost classic definition of a hierarchical approach in which authority flows down from the top of the hierarchy (SEI -> Appraisers and Trainers -> Organizational sponsors -> organizational process group -> practitioners),  while the Agile column represents an equally representative definition of an egalitarian approach in which peers freely connect and learn from each other. And, although I wouldn't argue that either approach is right or wrong, I would argue that the more egalitarian approach is a much better fit for the times in which we live. 

Which is probably why, when I observe developers talking about the CMMI, the most common comment I hear is that ""I had to create this document because someone told me I needed it to pass my CMMI appraisal... but no one ever uses it."" When I observe developers talking about agile, though, I most commonly hear them eagerly sharing the latest blogs, white papers, videos or podcasts they have come across on the Web. 

Summary
-------

Again, I do not argue that any of the above renders the contents of the CMMI obsolete. I do contend, though, that these issues make it very difficult to use the CMMI as the centerpiece of a modern software development improvement effort. 

[lastpost]: my-position-on-the-cmmi.html
[CMMI]: http://www.sei.cmu.edu/cmmi/
[web2]: http://en.wikipedia.org/wiki/Web_2.0
[cmm]: http://en.wikipedia.org/wiki/Capability_Maturity_Model
[cmmi-book]: http://www.amazon.com/gp/product/0321279670?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0321279670
[cmmi-pdf]: http://www.sei.cmu.edu/pub/documents/06.reports/pdf/06tr008.pdf
[cmmi-download]: http://www.sei.cmu.edu/publications/documents/06.reports/06tr008.html
[cmmi-word]: http://www.sei.cmu.edu/cmmi/models/model-v12-components-word.html
[jobs-noread]: http://bits.blogs.nytimes.com/2008/01/15/the-passion-of-steve-jobs/
[scampi]: http://www.sei.cmu.edu/cmmi/appraisals/
[agile]: http://en.wikipedia.org/wiki/Agile_software_development
[cmmi-agile]: http://www.sei.cmu.edu/publications/documents/08.reports/08tn003.html
[sei]: http://www.sei.cmu.edu/
[record-labels]: http://www.rollingstone.com/news/story/15137581/the_record_industrys_decline/
[sepg]: http://en.wikipedia.org/wiki/SEPG
"
Improvement	CMMI Take 2	2008-04-15	9 - Closed	CMMI, Improvement, Software Development	"<p>I received a fair amount of feedback on my last post about the CMMI&reg; &#8212; all of which I very much appreciated &#8212; and I thought I would take another run at this subject in order to clarify some of my thoughts in this area.</p><br><br><p>Let me break this down a little differently than I did last time, and talk about five different areas.</p>
"	"I received a fair amount of feedback on my [last post][lastpost] about the [CMMI][]&reg; -- all of which I very much appreciated -- and I thought I would take another run at this subject in order to clarify some of my thoughts in this area.

Let me break this down a little differently than I did last time, and talk about five different areas.

1. The Content of the CMMI
--------------------------

As I said in my last post, I find the content of the CMMI to be very valuable. It is a very useful work on process improvement, especially for development environments. 

2. The Times in which We Live
-----------------------------

A lot has changed in the last 20 years or so since the original [CMM][] was conceived. The Internet and the Web were born. We have grown less comfortable with hierarchical control structures and have moved towards a more egalitarian society. [Web 2.0][web2] has come along. Search engines, wikis, blogs, and social networking sites are changing the ways in which people create, locate and access information and connect with other people. 

3. The Form of the CMMI
-----------------------

Most of the reservations I expressed last time were about the form in which the CMMI is made available. I did not mean these to be taken as general objections -- I was an English major, I *like* long books, and I resented [Steve Jobs' comment that people don't read anymore][jobs-noread] -- but rather as observations that the form of the work limits its accessibility. 

In particular, I find that the form of the CMMI is not a good fit for the times in which we live. Again, this is not a personal issue for me -- I've got a copy on my bookshelf at home, another one on the bookshelf in my office, and I actually open it and read pieces of it on a pretty regular basis -- but I find it hard to convince other people that they should make similar use of it.

The implication here -- which I left implicit in my last post, but which I will now make explicit -- is that I believe the CMMI would be much more useful if it were actually published in a different form. In my more fanciful moments, I picture something like cmmiwiki.org, that would allow users to update and comment on the text, with a companion social networking site where people could exchange stories about how they have found the model to be useful. 

4. The Ways in which the CMMI is Used
-------------------------------------

I believe there are roughly three ways to make use of the CMMI as part of a process improvement effort. 

### a. The Developer Direct Access Approach 

One could give every developer a copy of the CMMI, tell them to read it, send them to training, and ask if they have any questions before putting it to use. 

Most people agree that the CMMI is not intended to be used in this way, and I even took some heat over my last post because I seemed to imply that the CMMI should be something directly accessible to the average developer. So I think we can pretty quickly dispense with this option.

### b. The Back Room Approach 

The organizational process improvement experts could keep a copy of the CMMI hidden in a back room somewhere, and consult it whenever they feel the need of its inspiration and guidance. 

I don't have any problem with this sort of usage, and this is actually a close approximation of how I am attempting to use the CMMI in my current assignment. 

### c. The Centerpiece Approach

Here is the way the third option usually goes, at least based on my experience. 

* Someone convinces the highest-ranking executive they can find to make a public pronouncement that organization *xxx* is beginning its journey to CMMI level *y*, to be completed in *zz* months. 

* Anyone who questions the wisdom of this approach or the feasibility of achieving the goal in the announced timeframe is cheerily asked to report to the cafeteria at 9:00 AM on Friday to find out more about their new career options. 

* Maturity progress indicators are embedded in leadership's balanced scorecards as part of their annual goal-setting exercises, because what gets measured gets done, right?

* A [cadre of process improvement focals][sepg] is recruited and sent out to the developers to help them increase their maturity. 

* When developers show any lack of fortitude or conviction about becoming more mature, they are promptly told that the CMMI requires that they perform practice *xyz*, and they are reminded that the CMMI's authority is backed by executive decree and reinforced by annual goals that they are already behind on. 

* Even though much of the CMMI is suggestive rather than prescriptive, developers are strongly guided to conform as closely as possible to the language and examples used in the CMMI so as to minimize the risk that the appraiser will get confused about their maturity level during the upcoming, very expensive,  highly visible and eagerly anticipated [SCAMPI][] appraisal. 

This option is the one I was expressing reservations about in my last post, when I said that I would hesitate to make the CMMI the ""centerpiece"" (i.e., the highly visible focal point) of a modern process improvement effort. 

There are a couple of important points to be made about this approach.

First, the very form of the CMMI encourages this approach: the daunting book form, the high-risk, high-cost nature of the appraisal, etc. 

Second, this approach is an extremely hierarchical one, and so is not a particularly good fit for the times in which we live. 

5. Comparisons with Agile
-------------------------

I also took some heat from some respondents to my last post for making what they viewed as an apples-and-oranges comparison between CMMI and the [Agile][] movement. 

From a purely conceptual point-of-view, I agree that the CMMI and Agile are not in competition and, as the [SEI has suggested][cmmi-agile], we can indeed embrace both, especially if one chooses my option b above (the back room approach) in terms of a CMMI deployment strategy. 

From a marketing perspective, however, it seems inescapable that Agile and CMMI are in competition for mindshare within the software development community. Embracing both is difficult, not only because so many people view them as antithetical, but for the very practical reason that, as hard as it is to become a credible expert on either one of these approaches, it is that much more difficult to become an expert on both.   

And, in contrast to the CMMI, the Agile movement is an extremely good fit for the times in which we live. Take a look at the table below. 

<table>	
  <caption align=""top"">
    CMMI vs. Agile
	</caption>
  <tr>
    <th width=""50%"">CMMI</th>
    <th width=""50%"">Agile</th>
  </tr>
  <tr>
    <td>Officially published and tightly controlled by a US government agency</td>
    <td>Defined by the mutual consent of a group of working developers</td>
  </tr>
  <tr>
    <td>Published as a lengthy book that most people will never read</td>
    <td>Published as a Web page that anyone can read during their lunch break</td>
  </tr>
  <tr>
    <td>Supported by trainers and appraisers who are officially licensed to do so</td>
    <td>Supported by anyone who can gain credibility with the development community </td>
  </tr>
  <tr>
    <td>Official information only available from the SEI</td>
    <td>Information available from books, web sites, blogs, videos, podcasts, etc. </td>
  </tr>
  <tr>
    <td>Imposed upon practitioners through organizational authority</td>
    <td>Adopted by practitioners based on information obtained from peers</td>
  </tr>
  <tr>
    <td>Strict definitions of process areas and maturity levels</td>
    <td>Loose collection of common practices that can be adapted to circumstances</td>
  </tr>
  <tr>
    <td>Dependent upon a group of organizational process improvement professionals to provide suitable interpretation in an organizational context</td>
    <td>Directly accessible to developers without need of a group of official interpreters </td>
  </tr>
</table>

If you look at the table above, it should be readily apparent that the CMMI column represents an almost classic definition of a hierarchical approach in which authority flows down from the top of the hierarchy (SEI -> Appraisers and Trainers -> Organizational sponsors -> organizational process group -> practitioners),  while the Agile column represents an equally representative definition of an egalitarian approach in which peers freely connect and learn from each other. And, although I wouldn't argue that either approach is right or wrong, I would argue that the more egalitarian approach is a much better fit for the times in which we live. 

Which is probably why, when I observe developers talking about the CMMI, the most common comment I hear is that ""I had to create this document because someone told me I needed it to pass my CMMI appraisal... but no one ever uses it."" When I observe developers talking about agile, though, I most commonly hear them eagerly sharing the latest blogs, white papers, videos or podcasts they have come across on the Web. 

Summary
-------

Again, I do not argue that any of the above renders the contents of the CMMI obsolete. I do contend, though, that these issues make it very difficult to use the CMMI as the centerpiece of a modern software development improvement effort. 

[lastpost]: my-position-on-the-cmmi.html
[CMMI]: http://www.sei.cmu.edu/cmmi/
[web2]: http://en.wikipedia.org/wiki/Web_2.0
[cmm]: http://en.wikipedia.org/wiki/Capability_Maturity_Model
[cmmi-book]: http://www.amazon.com/gp/product/0321279670?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0321279670
[cmmi-pdf]: http://www.sei.cmu.edu/pub/documents/06.reports/pdf/06tr008.pdf
[cmmi-download]: http://www.sei.cmu.edu/publications/documents/06.reports/06tr008.html
[cmmi-word]: http://www.sei.cmu.edu/cmmi/models/model-v12-components-word.html
[jobs-noread]: http://bits.blogs.nytimes.com/2008/01/15/the-passion-of-steve-jobs/
[scampi]: http://www.sei.cmu.edu/cmmi/appraisals/
[agile]: http://en.wikipedia.org/wiki/Agile_software_development
[cmmi-agile]: http://www.sei.cmu.edu/publications/documents/08.reports/08tn003.html
[sei]: http://www.sei.cmu.edu/
[record-labels]: http://www.rollingstone.com/news/story/15137581/the_record_industrys_decline/
[sepg]: http://en.wikipedia.org/wiki/SEPG
"
Software Development	CMMI Take 2	2008-04-15	9 - Closed	CMMI, Improvement, Software Development	"<p>I received a fair amount of feedback on my last post about the CMMI&reg; &#8212; all of which I very much appreciated &#8212; and I thought I would take another run at this subject in order to clarify some of my thoughts in this area.</p><br><br><p>Let me break this down a little differently than I did last time, and talk about five different areas.</p>
"	"I received a fair amount of feedback on my [last post][lastpost] about the [CMMI][]&reg; -- all of which I very much appreciated -- and I thought I would take another run at this subject in order to clarify some of my thoughts in this area.

Let me break this down a little differently than I did last time, and talk about five different areas.

1. The Content of the CMMI
--------------------------

As I said in my last post, I find the content of the CMMI to be very valuable. It is a very useful work on process improvement, especially for development environments. 

2. The Times in which We Live
-----------------------------

A lot has changed in the last 20 years or so since the original [CMM][] was conceived. The Internet and the Web were born. We have grown less comfortable with hierarchical control structures and have moved towards a more egalitarian society. [Web 2.0][web2] has come along. Search engines, wikis, blogs, and social networking sites are changing the ways in which people create, locate and access information and connect with other people. 

3. The Form of the CMMI
-----------------------

Most of the reservations I expressed last time were about the form in which the CMMI is made available. I did not mean these to be taken as general objections -- I was an English major, I *like* long books, and I resented [Steve Jobs' comment that people don't read anymore][jobs-noread] -- but rather as observations that the form of the work limits its accessibility. 

In particular, I find that the form of the CMMI is not a good fit for the times in which we live. Again, this is not a personal issue for me -- I've got a copy on my bookshelf at home, another one on the bookshelf in my office, and I actually open it and read pieces of it on a pretty regular basis -- but I find it hard to convince other people that they should make similar use of it.

The implication here -- which I left implicit in my last post, but which I will now make explicit -- is that I believe the CMMI would be much more useful if it were actually published in a different form. In my more fanciful moments, I picture something like cmmiwiki.org, that would allow users to update and comment on the text, with a companion social networking site where people could exchange stories about how they have found the model to be useful. 

4. The Ways in which the CMMI is Used
-------------------------------------

I believe there are roughly three ways to make use of the CMMI as part of a process improvement effort. 

### a. The Developer Direct Access Approach 

One could give every developer a copy of the CMMI, tell them to read it, send them to training, and ask if they have any questions before putting it to use. 

Most people agree that the CMMI is not intended to be used in this way, and I even took some heat over my last post because I seemed to imply that the CMMI should be something directly accessible to the average developer. So I think we can pretty quickly dispense with this option.

### b. The Back Room Approach 

The organizational process improvement experts could keep a copy of the CMMI hidden in a back room somewhere, and consult it whenever they feel the need of its inspiration and guidance. 

I don't have any problem with this sort of usage, and this is actually a close approximation of how I am attempting to use the CMMI in my current assignment. 

### c. The Centerpiece Approach

Here is the way the third option usually goes, at least based on my experience. 

* Someone convinces the highest-ranking executive they can find to make a public pronouncement that organization *xxx* is beginning its journey to CMMI level *y*, to be completed in *zz* months. 

* Anyone who questions the wisdom of this approach or the feasibility of achieving the goal in the announced timeframe is cheerily asked to report to the cafeteria at 9:00 AM on Friday to find out more about their new career options. 

* Maturity progress indicators are embedded in leadership's balanced scorecards as part of their annual goal-setting exercises, because what gets measured gets done, right?

* A [cadre of process improvement focals][sepg] is recruited and sent out to the developers to help them increase their maturity. 

* When developers show any lack of fortitude or conviction about becoming more mature, they are promptly told that the CMMI requires that they perform practice *xyz*, and they are reminded that the CMMI's authority is backed by executive decree and reinforced by annual goals that they are already behind on. 

* Even though much of the CMMI is suggestive rather than prescriptive, developers are strongly guided to conform as closely as possible to the language and examples used in the CMMI so as to minimize the risk that the appraiser will get confused about their maturity level during the upcoming, very expensive,  highly visible and eagerly anticipated [SCAMPI][] appraisal. 

This option is the one I was expressing reservations about in my last post, when I said that I would hesitate to make the CMMI the ""centerpiece"" (i.e., the highly visible focal point) of a modern process improvement effort. 

There are a couple of important points to be made about this approach.

First, the very form of the CMMI encourages this approach: the daunting book form, the high-risk, high-cost nature of the appraisal, etc. 

Second, this approach is an extremely hierarchical one, and so is not a particularly good fit for the times in which we live. 

5. Comparisons with Agile
-------------------------

I also took some heat from some respondents to my last post for making what they viewed as an apples-and-oranges comparison between CMMI and the [Agile][] movement. 

From a purely conceptual point-of-view, I agree that the CMMI and Agile are not in competition and, as the [SEI has suggested][cmmi-agile], we can indeed embrace both, especially if one chooses my option b above (the back room approach) in terms of a CMMI deployment strategy. 

From a marketing perspective, however, it seems inescapable that Agile and CMMI are in competition for mindshare within the software development community. Embracing both is difficult, not only because so many people view them as antithetical, but for the very practical reason that, as hard as it is to become a credible expert on either one of these approaches, it is that much more difficult to become an expert on both.   

And, in contrast to the CMMI, the Agile movement is an extremely good fit for the times in which we live. Take a look at the table below. 

<table>	
  <caption align=""top"">
    CMMI vs. Agile
	</caption>
  <tr>
    <th width=""50%"">CMMI</th>
    <th width=""50%"">Agile</th>
  </tr>
  <tr>
    <td>Officially published and tightly controlled by a US government agency</td>
    <td>Defined by the mutual consent of a group of working developers</td>
  </tr>
  <tr>
    <td>Published as a lengthy book that most people will never read</td>
    <td>Published as a Web page that anyone can read during their lunch break</td>
  </tr>
  <tr>
    <td>Supported by trainers and appraisers who are officially licensed to do so</td>
    <td>Supported by anyone who can gain credibility with the development community </td>
  </tr>
  <tr>
    <td>Official information only available from the SEI</td>
    <td>Information available from books, web sites, blogs, videos, podcasts, etc. </td>
  </tr>
  <tr>
    <td>Imposed upon practitioners through organizational authority</td>
    <td>Adopted by practitioners based on information obtained from peers</td>
  </tr>
  <tr>
    <td>Strict definitions of process areas and maturity levels</td>
    <td>Loose collection of common practices that can be adapted to circumstances</td>
  </tr>
  <tr>
    <td>Dependent upon a group of organizational process improvement professionals to provide suitable interpretation in an organizational context</td>
    <td>Directly accessible to developers without need of a group of official interpreters </td>
  </tr>
</table>

If you look at the table above, it should be readily apparent that the CMMI column represents an almost classic definition of a hierarchical approach in which authority flows down from the top of the hierarchy (SEI -> Appraisers and Trainers -> Organizational sponsors -> organizational process group -> practitioners),  while the Agile column represents an equally representative definition of an egalitarian approach in which peers freely connect and learn from each other. And, although I wouldn't argue that either approach is right or wrong, I would argue that the more egalitarian approach is a much better fit for the times in which we live. 

Which is probably why, when I observe developers talking about the CMMI, the most common comment I hear is that ""I had to create this document because someone told me I needed it to pass my CMMI appraisal... but no one ever uses it."" When I observe developers talking about agile, though, I most commonly hear them eagerly sharing the latest blogs, white papers, videos or podcasts they have come across on the Web. 

Summary
-------

Again, I do not argue that any of the above renders the contents of the CMMI obsolete. I do contend, though, that these issues make it very difficult to use the CMMI as the centerpiece of a modern software development improvement effort. 

[lastpost]: my-position-on-the-cmmi.html
[CMMI]: http://www.sei.cmu.edu/cmmi/
[web2]: http://en.wikipedia.org/wiki/Web_2.0
[cmm]: http://en.wikipedia.org/wiki/Capability_Maturity_Model
[cmmi-book]: http://www.amazon.com/gp/product/0321279670?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0321279670
[cmmi-pdf]: http://www.sei.cmu.edu/pub/documents/06.reports/pdf/06tr008.pdf
[cmmi-download]: http://www.sei.cmu.edu/publications/documents/06.reports/06tr008.html
[cmmi-word]: http://www.sei.cmu.edu/cmmi/models/model-v12-components-word.html
[jobs-noread]: http://bits.blogs.nytimes.com/2008/01/15/the-passion-of-steve-jobs/
[scampi]: http://www.sei.cmu.edu/cmmi/appraisals/
[agile]: http://en.wikipedia.org/wiki/Agile_software_development
[cmmi-agile]: http://www.sei.cmu.edu/publications/documents/08.reports/08tn003.html
[sei]: http://www.sei.cmu.edu/
[record-labels]: http://www.rollingstone.com/news/story/15137581/the_record_industrys_decline/
[sepg]: http://en.wikipedia.org/wiki/SEPG
"
Documentation	The Documentation Dilemma	2009-04-04	9 - Closed	Documentation	"<p>I remember being hired a few years back to develop a new system for my employer.</p><br><br><p>On my very first day, I was handed a couple of thick manuals that spelled out, in great detail, the development methodology that the company was using. As with any such approach, it described the various phases of our systems development lifecycle, and the primary documents to be delivered by each phase, with each successive set gradually moving closer to the level of the actual code to be produced. </p><br><br><p>Being the new guy on the block, I did what I was told, and followed the set of manuals pretty closely. By the time I was done with the project, I had my own set of binders, full of all the requisite documentation for the new system. </p>
"	"I remember being hired a few years back to develop a new system for my employer.

On my very first day, I was handed a couple of thick manuals that spelled out, in great detail, the development methodology that the company was using. As with any such approach, it described the various phases of our systems development lifecycle, and the primary documents to be delivered by each phase, with each successive set gradually moving closer to the level of the actual code to be produced. 

Being the new guy on the block, I did what I was told, and followed the set of manuals pretty closely. By the time I was done with the project, I had my own set of binders, full of all the requisite documentation for the new system. 

We had a physical documentation library at the time, and I will never forget the look on the librarian's face when I submitted my set of documents to her, to be filed away on her shelves. It was a hard look to read, but I saw some element of excitement in it, so I asked her if anything was wrong. 

""No,"" she said, with some note of astonishment in her voice, ""there's nothing wrong. It's just that no one has ever done these before!""

Since this experience, the tools used for this project (COBOL, CICS, IDMS, 3270 terminals, TSO, Script) have mostly been relegated to historical archives, but the underlying attitudes of software developers towards documentation seem to have changed little. To put it in a nutshell, these would seem to be: ""In theory, documentation is a good thing. In practice... we have better things to do.""

And so it comes as no surprise that, today, in my role as the manager of the group responsible for a company's application development process, the concerns I hear most frequently have to do with the degree of documentation required. 

Below is a brief but representative sampling: 

* ""I thought Agile was about producing software, not documentation. How come our Agile process requires so many different documents?""

* ""I produced a two-page document that clearly spelled out the main points to be communicated, but my manager rejected it, saying it couldn't be any good, because it wasn't long enough.""

* ""The people who work in my organization brought me a requirements document that was over 100 pages long. I had to sign off on it, but I didn't have time to actually read it.""

* ""Our process is missing some key document types. We have to add these, otherwise developers won't possibly be able to develop software correctly!"" 

Clearly, we have a problem here. 
"
Software	Software is Different	2009-04-04	9 - Closed	Software, Software Development, Technology		"When we talk about software development, we often use terms like ""engineering"" or ""architecture,"" and draw on lessons learned from other environments, implying that developing software is like building a house, or designing a new consumer product. 

However, there are some very fundamental differences between software and these other sorts of products, and we need to keep these in mind in order to talk sensibly about software development.

1. Triviality of Repetitive Manufacturing

    Within other forms of product development, significant attention is paid to manufacturing the product from a set of design documents. In most cases, many different units will be built of an identical design, so there is a repetitive element to the manufacturing process, resulting in a focus on driving out variation in manufacturing. Also, there is typically a human element in the manufacturing process, and so product quality and the risk of errors introduced in manufacturing receive much attention. 

    For software, however, the design documents are the program source code, and ""manufacturing"" consists of building actual executables from the source. This is a process that is completely automated by compilers, linkers and other build tools, and so is relatively trivial.

2. Product Malleability

    Software is easy to change. And once you have changed it, it is easy to regenerate the executables (manufacture it). So while we often talk about the high cost of change, most of the costs are in coordination and communication, and are not fixed costs based on material or manufacturing costs.

3. Diversity of Purpose

    While aeronautical engineering, for example, is about making things fly, the purposes to which software can be applied are amazingly diverse, and becoming more so all the time. So the things that work well for someone developing image processing software may be different from what works well for someone developing software to process banking transactions. 

4. Rapidly Changing Environment

    When one considers other engineering fields, there is generally some physical context for the discipline that changes infrequently, or not at all. A chemical engineer operates within the field of chemistry, for example, and the number of elements, and the basic chemical laws rarely if ever change. Other engineering fields are based on physics, or thermodynamics, or some other relatively unchanging body of knowledge about the physical world. 

    On the other hand, software ""engineers"" are operating within the constraints of the hardware available to them, and within the specified software environment -- both of which are changing rapidly, and often in unpredictable ways. 

    So if a student studies chemical engineering, then he or she can be relatively confident that what they learn will be of use to them over their entire careers as chemical engineers. 

    On the other hand, software engineers often study languages, operating systems and hardware environments that may be entirely different five years after they have completed their studies. 

5. Layers of Software Abstraction

    Related issues are the complexity and mutability of the layers of software abstraction surrounding the problem domain in which the software developer is working. 

    Many developers today, for example, develop software that sits on top of an operating system, a database management system, application integration middleware, a web server, an application server and a set of language subroutine/class libraries, all of which are in more or less constant flux. 

6. Scale

    Watts Humphrey has made the point that a civil engineer, when considering the height of a structure, only has to worry about roughly two orders of magnitude difference between the smallest and the largest product he is likely to be called upon to design: that is, the tallest structure he is likely to work on is no more than roughly 100 times the size of the shortest structure. 

    On the other hand, software developers in college start out learning to write individual programs of roughly 1000 lines -- but then, in the real world, are expected to work on projects developing more than a million lines of code: in other words, a difference of roughly three orders of magnitude. 

    Humphrey has gone on to suggest strongly that practices that work well at the lower end of this range are not likely to scale well to the upper end. 

Considering the factors above, one should be skeptical of the value of any list that claims to offer the ""basic principles of software engineering"": the factors that cause success or failure will often vary widely based on one or more of these other variables.  
"
Software Development	Software is Different	2009-04-04	9 - Closed	Software, Software Development, Technology		"When we talk about software development, we often use terms like ""engineering"" or ""architecture,"" and draw on lessons learned from other environments, implying that developing software is like building a house, or designing a new consumer product. 

However, there are some very fundamental differences between software and these other sorts of products, and we need to keep these in mind in order to talk sensibly about software development.

1. Triviality of Repetitive Manufacturing

    Within other forms of product development, significant attention is paid to manufacturing the product from a set of design documents. In most cases, many different units will be built of an identical design, so there is a repetitive element to the manufacturing process, resulting in a focus on driving out variation in manufacturing. Also, there is typically a human element in the manufacturing process, and so product quality and the risk of errors introduced in manufacturing receive much attention. 

    For software, however, the design documents are the program source code, and ""manufacturing"" consists of building actual executables from the source. This is a process that is completely automated by compilers, linkers and other build tools, and so is relatively trivial.

2. Product Malleability

    Software is easy to change. And once you have changed it, it is easy to regenerate the executables (manufacture it). So while we often talk about the high cost of change, most of the costs are in coordination and communication, and are not fixed costs based on material or manufacturing costs.

3. Diversity of Purpose

    While aeronautical engineering, for example, is about making things fly, the purposes to which software can be applied are amazingly diverse, and becoming more so all the time. So the things that work well for someone developing image processing software may be different from what works well for someone developing software to process banking transactions. 

4. Rapidly Changing Environment

    When one considers other engineering fields, there is generally some physical context for the discipline that changes infrequently, or not at all. A chemical engineer operates within the field of chemistry, for example, and the number of elements, and the basic chemical laws rarely if ever change. Other engineering fields are based on physics, or thermodynamics, or some other relatively unchanging body of knowledge about the physical world. 

    On the other hand, software ""engineers"" are operating within the constraints of the hardware available to them, and within the specified software environment -- both of which are changing rapidly, and often in unpredictable ways. 

    So if a student studies chemical engineering, then he or she can be relatively confident that what they learn will be of use to them over their entire careers as chemical engineers. 

    On the other hand, software engineers often study languages, operating systems and hardware environments that may be entirely different five years after they have completed their studies. 

5. Layers of Software Abstraction

    Related issues are the complexity and mutability of the layers of software abstraction surrounding the problem domain in which the software developer is working. 

    Many developers today, for example, develop software that sits on top of an operating system, a database management system, application integration middleware, a web server, an application server and a set of language subroutine/class libraries, all of which are in more or less constant flux. 

6. Scale

    Watts Humphrey has made the point that a civil engineer, when considering the height of a structure, only has to worry about roughly two orders of magnitude difference between the smallest and the largest product he is likely to be called upon to design: that is, the tallest structure he is likely to work on is no more than roughly 100 times the size of the shortest structure. 

    On the other hand, software developers in college start out learning to write individual programs of roughly 1000 lines -- but then, in the real world, are expected to work on projects developing more than a million lines of code: in other words, a difference of roughly three orders of magnitude. 

    Humphrey has gone on to suggest strongly that practices that work well at the lower end of this range are not likely to scale well to the upper end. 

Considering the factors above, one should be skeptical of the value of any list that claims to offer the ""basic principles of software engineering"": the factors that cause success or failure will often vary widely based on one or more of these other variables.  
"
Technology	Software is Different	2009-04-04	9 - Closed	Software, Software Development, Technology		"When we talk about software development, we often use terms like ""engineering"" or ""architecture,"" and draw on lessons learned from other environments, implying that developing software is like building a house, or designing a new consumer product. 

However, there are some very fundamental differences between software and these other sorts of products, and we need to keep these in mind in order to talk sensibly about software development.

1. Triviality of Repetitive Manufacturing

    Within other forms of product development, significant attention is paid to manufacturing the product from a set of design documents. In most cases, many different units will be built of an identical design, so there is a repetitive element to the manufacturing process, resulting in a focus on driving out variation in manufacturing. Also, there is typically a human element in the manufacturing process, and so product quality and the risk of errors introduced in manufacturing receive much attention. 

    For software, however, the design documents are the program source code, and ""manufacturing"" consists of building actual executables from the source. This is a process that is completely automated by compilers, linkers and other build tools, and so is relatively trivial.

2. Product Malleability

    Software is easy to change. And once you have changed it, it is easy to regenerate the executables (manufacture it). So while we often talk about the high cost of change, most of the costs are in coordination and communication, and are not fixed costs based on material or manufacturing costs.

3. Diversity of Purpose

    While aeronautical engineering, for example, is about making things fly, the purposes to which software can be applied are amazingly diverse, and becoming more so all the time. So the things that work well for someone developing image processing software may be different from what works well for someone developing software to process banking transactions. 

4. Rapidly Changing Environment

    When one considers other engineering fields, there is generally some physical context for the discipline that changes infrequently, or not at all. A chemical engineer operates within the field of chemistry, for example, and the number of elements, and the basic chemical laws rarely if ever change. Other engineering fields are based on physics, or thermodynamics, or some other relatively unchanging body of knowledge about the physical world. 

    On the other hand, software ""engineers"" are operating within the constraints of the hardware available to them, and within the specified software environment -- both of which are changing rapidly, and often in unpredictable ways. 

    So if a student studies chemical engineering, then he or she can be relatively confident that what they learn will be of use to them over their entire careers as chemical engineers. 

    On the other hand, software engineers often study languages, operating systems and hardware environments that may be entirely different five years after they have completed their studies. 

5. Layers of Software Abstraction

    Related issues are the complexity and mutability of the layers of software abstraction surrounding the problem domain in which the software developer is working. 

    Many developers today, for example, develop software that sits on top of an operating system, a database management system, application integration middleware, a web server, an application server and a set of language subroutine/class libraries, all of which are in more or less constant flux. 

6. Scale

    Watts Humphrey has made the point that a civil engineer, when considering the height of a structure, only has to worry about roughly two orders of magnitude difference between the smallest and the largest product he is likely to be called upon to design: that is, the tallest structure he is likely to work on is no more than roughly 100 times the size of the shortest structure. 

    On the other hand, software developers in college start out learning to write individual programs of roughly 1000 lines -- but then, in the real world, are expected to work on projects developing more than a million lines of code: in other words, a difference of roughly three orders of magnitude. 

    Humphrey has gone on to suggest strongly that practices that work well at the lower end of this range are not likely to scale well to the upper end. 

Considering the factors above, one should be skeptical of the value of any list that claims to offer the ""basic principles of software engineering"": the factors that cause success or failure will often vary widely based on one or more of these other variables.  
"
Apple	Art as Apple Strategy	2009-04-30	9 - Closed	Apple, Art, Business	"<p>Much has been written about Apple&#8217;s recent resurgence but, in many ways, the key to Apple&#8217;s success can be expressed in a single word: <em>art</em>. </p><br><br><p>Art is something we often think of as being sequestered away in a museum, separated from our daily lives, and certainly kept at a great distance from anything to do with business. Conventional wisdom has it that art cares nothing about money, and business cares all the world about it, so trying to mix them together will only ruin both. </p><br><br><p>Apple, however, has proven that nothing could be further from the truth. Let&#8217;s look at how art has shaped Apple&#8217;s business strategy and ultimately led to the success it currently enjoys in the marketplace. </p>
"	"Much has been written about Apple's recent resurgence but, in many ways, the key to Apple's success can be expressed in a single word: *art*. 

Art is something we often think of as being sequestered away in a museum, separated from our daily lives, and certainly kept at a great distance from anything to do with business. Conventional wisdom has it that art cares nothing about money, and business cares all the world about it, so trying to mix them together will only ruin both. 

Apple, however, has proven that nothing could be further from the truth. Let's look at how art has shaped Apple's business strategy and ultimately led to the success it currently enjoys in the marketplace. 

**1. Artists as Customers.** From the beginning, the Mac has appealed to artists and creative professionals, and Apple has always kept this key market segment squarely in its sights. I was reminded of the strength of this appeal when, due to a corporate reshuffling, I recently found myself situated in the midst of a new group at work. Now the corporation I work for long ago banished all things Apple from its realm: even the CEO couldn't get hold of a Mac, should he be seized by this desire. But the new group I found myself next to was a Creative Services group, and guess what they all had? Macs, of course. They simply couldn't imagine working without them. 

And, of course, as the Mac and iLife and professional products have evolved to support digital photography, digital music creation and digital video production, Apple has systematically extended its appeal into these new areas as well. 

**2. Products as Works of Art.** While many computer and electronics makers have reduced their products to mere commodities, competing primarily on price, Apple has steadfastly positioned their products as unique objects, even when priced competitively with similar products from their more cutthroat competitors. 

This is a hard thing for business analysts to understand. Over the course of the iPod's astonishing five-year run of market domination, observers have repeatedly stated that Apple's success would be short-lived, greeting each new model with unfavorable reviews, based purely on their price-to-performance ratios. But they have consistently been wrong, precisely because Apple products are quite intentionally more than the sums of their parts. What they have, that their competitors lack, is not only an aesthetic appeal, but a design approach that places a sense of unity and cohesion above all else. Listen to [Steve Jobs on the subject][Jobs]: 

> Design is not just what it looks like and feels like. Design is how it works. Design is the *fundamental soul of a human-made creation* that ends up expressing itself in successive outer layers of the product or service. 

""The fundamental soul of a human-made creation..."" -- these words would sound familiar coming from someone talking about a breathtaking work of art, but they are unparalleled coming from a CEO talking about his company's products. 

**3. Products for Art Delivery.** Other companies have conceived of their hardware and software in technical terms: digital processors for transmission of audio streams and video streams, custodians only of bits and bytes. With iTunes, the iTunes Store, the iPod and now the Apple TV, Apple has instead aligned its vision accurately with the values of its customers and its content providers: its mission is to deliver art, from artist to audience. So while other companies offered subscription services for music, thinking that art could be bought and sold by the pound, Apple alone realized that each album, each track, each video was a unique work of art, whose value was entirely in the eyes and ears of individual beholders. 

**4. Apple as Artist's Friend.** Ask any painter why they picked a certain gallery to present their work, and one of the first things out of their mouth will be the appreciation the gallery owner had for the value of their work. 

Essentially the same principle explains why Apple was able to strike a deal with record companies to launch the iTunes Store, where other companies had tried and failed. 

The extent of Apple's influence in this sphere is hard to overstate. Apple has recently been the target of many complaints about the proprietary and closed nature of its digital rights management scheme (meaning that only Apple products can play material purchased from the iTunes store). Steve Jobs responded to his company's critics with a suggestion of his own, posted on the Apple Web site, characteristically titled ""[Thoughts on Music][]"". His idea? To remove all digital rights management and allow all content to be copied without technical restraints. 

After Jobs' thoughts were posted on the Web, one could almost hear the collective intake of breath from around the world: was he *mad?* The major recording companies agreeing to release their collective stranglehold on copy protection for their catalogs? This would be akin to the British navy turning over their entire fleet to Blackbeard. What could he be thinking?

Steve Jobs posted his thoughts on February 6, 2007. On April 2, Apple announced a [breakthrough deal][] with EMI records that would make their entire catalog DRM-free, at a higher audio quality, and at a slightly higher price. There is probably no other CEO in the world who could have brokered such a deal. 

So, if Bill Gates, Michael Dell and other competing CEOs wish some advice on how to counter Apple's increasing success, they might consider these words from author and painter [Henry Miller][], writing in 1957:

> Men are not suffering from the lack of good literature, good art, good theatre, good music, but from that which has made it impossible for these to become manifest. In short, they are suffering from the silent, shameful conspiracy (the more shameful since it is unacknowledged) which has bound them together as enemies of art and artist. They are suffering from the fact that art is not the primary moving force in their lives. They are suffering from the act, repeated daily, of keeping up the pretense that they can go their way, lead their lives, without art. 

[Jobs]: http://en.wikipedia.org/wiki/Steve_Jobs

[Thoughts on Music]: http://www.apple.com/fr/hotnews/thoughtsonmusic/

[breakthrough deal]: http://www.apple.com/pr/library/2007/04/02Apple-Unveils-Higher-Quality-DRM-Free-Music-on-the-iTunes-Store.html

[Henry Miller]: http://en.wikipedia.org/wiki/Henry_Miller
"
Art	Art as Apple Strategy	2009-04-30	9 - Closed	Apple, Art, Business	"<p>Much has been written about Apple&#8217;s recent resurgence but, in many ways, the key to Apple&#8217;s success can be expressed in a single word: <em>art</em>. </p><br><br><p>Art is something we often think of as being sequestered away in a museum, separated from our daily lives, and certainly kept at a great distance from anything to do with business. Conventional wisdom has it that art cares nothing about money, and business cares all the world about it, so trying to mix them together will only ruin both. </p><br><br><p>Apple, however, has proven that nothing could be further from the truth. Let&#8217;s look at how art has shaped Apple&#8217;s business strategy and ultimately led to the success it currently enjoys in the marketplace. </p>
"	"Much has been written about Apple's recent resurgence but, in many ways, the key to Apple's success can be expressed in a single word: *art*. 

Art is something we often think of as being sequestered away in a museum, separated from our daily lives, and certainly kept at a great distance from anything to do with business. Conventional wisdom has it that art cares nothing about money, and business cares all the world about it, so trying to mix them together will only ruin both. 

Apple, however, has proven that nothing could be further from the truth. Let's look at how art has shaped Apple's business strategy and ultimately led to the success it currently enjoys in the marketplace. 

**1. Artists as Customers.** From the beginning, the Mac has appealed to artists and creative professionals, and Apple has always kept this key market segment squarely in its sights. I was reminded of the strength of this appeal when, due to a corporate reshuffling, I recently found myself situated in the midst of a new group at work. Now the corporation I work for long ago banished all things Apple from its realm: even the CEO couldn't get hold of a Mac, should he be seized by this desire. But the new group I found myself next to was a Creative Services group, and guess what they all had? Macs, of course. They simply couldn't imagine working without them. 

And, of course, as the Mac and iLife and professional products have evolved to support digital photography, digital music creation and digital video production, Apple has systematically extended its appeal into these new areas as well. 

**2. Products as Works of Art.** While many computer and electronics makers have reduced their products to mere commodities, competing primarily on price, Apple has steadfastly positioned their products as unique objects, even when priced competitively with similar products from their more cutthroat competitors. 

This is a hard thing for business analysts to understand. Over the course of the iPod's astonishing five-year run of market domination, observers have repeatedly stated that Apple's success would be short-lived, greeting each new model with unfavorable reviews, based purely on their price-to-performance ratios. But they have consistently been wrong, precisely because Apple products are quite intentionally more than the sums of their parts. What they have, that their competitors lack, is not only an aesthetic appeal, but a design approach that places a sense of unity and cohesion above all else. Listen to [Steve Jobs on the subject][Jobs]: 

> Design is not just what it looks like and feels like. Design is how it works. Design is the *fundamental soul of a human-made creation* that ends up expressing itself in successive outer layers of the product or service. 

""The fundamental soul of a human-made creation..."" -- these words would sound familiar coming from someone talking about a breathtaking work of art, but they are unparalleled coming from a CEO talking about his company's products. 

**3. Products for Art Delivery.** Other companies have conceived of their hardware and software in technical terms: digital processors for transmission of audio streams and video streams, custodians only of bits and bytes. With iTunes, the iTunes Store, the iPod and now the Apple TV, Apple has instead aligned its vision accurately with the values of its customers and its content providers: its mission is to deliver art, from artist to audience. So while other companies offered subscription services for music, thinking that art could be bought and sold by the pound, Apple alone realized that each album, each track, each video was a unique work of art, whose value was entirely in the eyes and ears of individual beholders. 

**4. Apple as Artist's Friend.** Ask any painter why they picked a certain gallery to present their work, and one of the first things out of their mouth will be the appreciation the gallery owner had for the value of their work. 

Essentially the same principle explains why Apple was able to strike a deal with record companies to launch the iTunes Store, where other companies had tried and failed. 

The extent of Apple's influence in this sphere is hard to overstate. Apple has recently been the target of many complaints about the proprietary and closed nature of its digital rights management scheme (meaning that only Apple products can play material purchased from the iTunes store). Steve Jobs responded to his company's critics with a suggestion of his own, posted on the Apple Web site, characteristically titled ""[Thoughts on Music][]"". His idea? To remove all digital rights management and allow all content to be copied without technical restraints. 

After Jobs' thoughts were posted on the Web, one could almost hear the collective intake of breath from around the world: was he *mad?* The major recording companies agreeing to release their collective stranglehold on copy protection for their catalogs? This would be akin to the British navy turning over their entire fleet to Blackbeard. What could he be thinking?

Steve Jobs posted his thoughts on February 6, 2007. On April 2, Apple announced a [breakthrough deal][] with EMI records that would make their entire catalog DRM-free, at a higher audio quality, and at a slightly higher price. There is probably no other CEO in the world who could have brokered such a deal. 

So, if Bill Gates, Michael Dell and other competing CEOs wish some advice on how to counter Apple's increasing success, they might consider these words from author and painter [Henry Miller][], writing in 1957:

> Men are not suffering from the lack of good literature, good art, good theatre, good music, but from that which has made it impossible for these to become manifest. In short, they are suffering from the silent, shameful conspiracy (the more shameful since it is unacknowledged) which has bound them together as enemies of art and artist. They are suffering from the fact that art is not the primary moving force in their lives. They are suffering from the act, repeated daily, of keeping up the pretense that they can go their way, lead their lives, without art. 

[Jobs]: http://en.wikipedia.org/wiki/Steve_Jobs

[Thoughts on Music]: http://www.apple.com/fr/hotnews/thoughtsonmusic/

[breakthrough deal]: http://www.apple.com/pr/library/2007/04/02Apple-Unveils-Higher-Quality-DRM-Free-Music-on-the-iTunes-Store.html

[Henry Miller]: http://en.wikipedia.org/wiki/Henry_Miller
"
Business	Art as Apple Strategy	2009-04-30	9 - Closed	Apple, Art, Business	"<p>Much has been written about Apple&#8217;s recent resurgence but, in many ways, the key to Apple&#8217;s success can be expressed in a single word: <em>art</em>. </p><br><br><p>Art is something we often think of as being sequestered away in a museum, separated from our daily lives, and certainly kept at a great distance from anything to do with business. Conventional wisdom has it that art cares nothing about money, and business cares all the world about it, so trying to mix them together will only ruin both. </p><br><br><p>Apple, however, has proven that nothing could be further from the truth. Let&#8217;s look at how art has shaped Apple&#8217;s business strategy and ultimately led to the success it currently enjoys in the marketplace. </p>
"	"Much has been written about Apple's recent resurgence but, in many ways, the key to Apple's success can be expressed in a single word: *art*. 

Art is something we often think of as being sequestered away in a museum, separated from our daily lives, and certainly kept at a great distance from anything to do with business. Conventional wisdom has it that art cares nothing about money, and business cares all the world about it, so trying to mix them together will only ruin both. 

Apple, however, has proven that nothing could be further from the truth. Let's look at how art has shaped Apple's business strategy and ultimately led to the success it currently enjoys in the marketplace. 

**1. Artists as Customers.** From the beginning, the Mac has appealed to artists and creative professionals, and Apple has always kept this key market segment squarely in its sights. I was reminded of the strength of this appeal when, due to a corporate reshuffling, I recently found myself situated in the midst of a new group at work. Now the corporation I work for long ago banished all things Apple from its realm: even the CEO couldn't get hold of a Mac, should he be seized by this desire. But the new group I found myself next to was a Creative Services group, and guess what they all had? Macs, of course. They simply couldn't imagine working without them. 

And, of course, as the Mac and iLife and professional products have evolved to support digital photography, digital music creation and digital video production, Apple has systematically extended its appeal into these new areas as well. 

**2. Products as Works of Art.** While many computer and electronics makers have reduced their products to mere commodities, competing primarily on price, Apple has steadfastly positioned their products as unique objects, even when priced competitively with similar products from their more cutthroat competitors. 

This is a hard thing for business analysts to understand. Over the course of the iPod's astonishing five-year run of market domination, observers have repeatedly stated that Apple's success would be short-lived, greeting each new model with unfavorable reviews, based purely on their price-to-performance ratios. But they have consistently been wrong, precisely because Apple products are quite intentionally more than the sums of their parts. What they have, that their competitors lack, is not only an aesthetic appeal, but a design approach that places a sense of unity and cohesion above all else. Listen to [Steve Jobs on the subject][Jobs]: 

> Design is not just what it looks like and feels like. Design is how it works. Design is the *fundamental soul of a human-made creation* that ends up expressing itself in successive outer layers of the product or service. 

""The fundamental soul of a human-made creation..."" -- these words would sound familiar coming from someone talking about a breathtaking work of art, but they are unparalleled coming from a CEO talking about his company's products. 

**3. Products for Art Delivery.** Other companies have conceived of their hardware and software in technical terms: digital processors for transmission of audio streams and video streams, custodians only of bits and bytes. With iTunes, the iTunes Store, the iPod and now the Apple TV, Apple has instead aligned its vision accurately with the values of its customers and its content providers: its mission is to deliver art, from artist to audience. So while other companies offered subscription services for music, thinking that art could be bought and sold by the pound, Apple alone realized that each album, each track, each video was a unique work of art, whose value was entirely in the eyes and ears of individual beholders. 

**4. Apple as Artist's Friend.** Ask any painter why they picked a certain gallery to present their work, and one of the first things out of their mouth will be the appreciation the gallery owner had for the value of their work. 

Essentially the same principle explains why Apple was able to strike a deal with record companies to launch the iTunes Store, where other companies had tried and failed. 

The extent of Apple's influence in this sphere is hard to overstate. Apple has recently been the target of many complaints about the proprietary and closed nature of its digital rights management scheme (meaning that only Apple products can play material purchased from the iTunes store). Steve Jobs responded to his company's critics with a suggestion of his own, posted on the Apple Web site, characteristically titled ""[Thoughts on Music][]"". His idea? To remove all digital rights management and allow all content to be copied without technical restraints. 

After Jobs' thoughts were posted on the Web, one could almost hear the collective intake of breath from around the world: was he *mad?* The major recording companies agreeing to release their collective stranglehold on copy protection for their catalogs? This would be akin to the British navy turning over their entire fleet to Blackbeard. What could he be thinking?

Steve Jobs posted his thoughts on February 6, 2007. On April 2, Apple announced a [breakthrough deal][] with EMI records that would make their entire catalog DRM-free, at a higher audio quality, and at a slightly higher price. There is probably no other CEO in the world who could have brokered such a deal. 

So, if Bill Gates, Michael Dell and other competing CEOs wish some advice on how to counter Apple's increasing success, they might consider these words from author and painter [Henry Miller][], writing in 1957:

> Men are not suffering from the lack of good literature, good art, good theatre, good music, but from that which has made it impossible for these to become manifest. In short, they are suffering from the silent, shameful conspiracy (the more shameful since it is unacknowledged) which has bound them together as enemies of art and artist. They are suffering from the fact that art is not the primary moving force in their lives. They are suffering from the act, repeated daily, of keeping up the pretense that they can go their way, lead their lives, without art. 

[Jobs]: http://en.wikipedia.org/wiki/Steve_Jobs

[Thoughts on Music]: http://www.apple.com/fr/hotnews/thoughtsonmusic/

[breakthrough deal]: http://www.apple.com/pr/library/2007/04/02Apple-Unveils-Higher-Quality-DRM-Free-Music-on-the-iTunes-Store.html

[Henry Miller]: http://en.wikipedia.org/wiki/Henry_Miller
"
Documentation	Purpose-Driven Documentation	2009-05-10	9 - Closed	Documentation	"<p>So how do software developers know whether they are doing too little or too much documentation?</p><br><br><p>The first step on the road to documentation sanity is to ask ourselves whether we have a good reason for creating a document.</p><br><br><p>I will assert that there are three, and only three, reasons to create software documentation. These three broad purposes really correspond to three distinct audiences. All software documentation should be aligned with one (or, ideally, more) of these three purposes. </p>
"	"So how do software developers know whether they are doing too little or too much documentation?

The first step on the road to documentation sanity is to ask ourselves whether we have a good reason for creating a document.

## Reasons for Documentation 

I will assert that there are three, and only three, reasons to create software documentation. These three broad purposes really correspond to three distinct audiences. All software documentation should be aligned with one (or, ideally, more) of these three purposes. 

These three purposes are:

A. To clarify expectations among those involved in the project.

B. To define and explain aspects of the system useful to future users and developers, and not readily apparent from examination of the software itself.

C. To provide transparency of agency and intention to potentially interested parties outside of the project.

## Clarification

Now that you've seen the list in its entirety, let me elaborate with some additional comments and corollaries. 

### A. To clarify expectations among those involved in the project.

1. By ""those involved in the project,"" I mean to include people and organizations involved in the project to any degree, including customers, sponsors, architects, etc.

2. By ""clarify expectations,"" I mean to imply that written documentation will not necessarily be the only, or even the primary, communications vehicle used to establish those expectations. 

3. An important corollary is that, if expectations are already clear, or can be more readily clarified through some other, more effective or cost-efficient form of communication, then the software documentation is not needed. 

4. Another important corollary is that, if the documentation does not actually provide any clarity, then it's not fulfilling its purpose. 

5. Note that expectations can become muddied over time, due to memory lapses, or competition with other information, so part of this clarification of expectations may actually be as a reminder of what had been clear at one time in the past. 

### B. To define and explain aspects of the system useful to future users and developers, and not readily apparent from examination of the software itself.

1. Some level of system documentation typically needs to be done to help clarify aspects of the system over what is often a fairly long useful life for the software we write. 

2. Both users and developers tend to develop their knowledge of a system through examination of the software itself: users, through the user interface and actual behavior of the software, and developers, additionally, through the examination of the source code. This is often the case because the actual software is typically more credible and as easy or easier to understand than the documentation.

### C. To provide transparency of agency and intention to potentially interested parties outside of the project. 

1. This is often the purpose that is hardest for developers to understand and accept. 

2. In cases where software produces inaccurate or even dangerous results, outside parties often need access to documentation that will indicate who authorized the offending code, and with what intent. 

3. Even if such problems seem unlikely (as they often do, to people closest to the software), such transparency can be argued to help deter malicious or careless software changes. 

4. A critical aspect of this sort of documentation is that it be part of an unbroken chain starting with a real request from a real person, and ending with the actual lines of software that were changed. 

## Guidance

OK, now that we're clear on the purpose of our documentation, how does this help?

I believe there is some very practical guidance we can provide, based on the purpose of the documentation. 

### If the purpose of your documentation is to clarify expectations among those involved in the project, then:

1. Be aware that the need for such documentation (although not its effectiveness) seems to increase exponentially with the size of the project, both in terms of team size and duration. The smaller the project, the less of this sort of documentation you will need.

2. If you are stuck with a large project, then chunking it up into smaller sub-projects that can be done in parallel and/or serially can help to reduce the amount of documentation needed. 

3. On large projects, plan for the necessary resources to do a good job of the documentation, with enough time and the right resources to produce documentation that team members will actually find useful. Remember that, all other things being equal, more documentation is worse, and concise, easily understood documentation that focuses on the most likely issues of confusion/contention is better. 

### If the purpose of your documentation is to define and explain aspects of the system useful to future users and developers, and not readily apparent from examination of the software itself, then:

1. Detailed developer documentation is best maintained within the source code itself. Since developers will look at the code anyway, your documentation is much more likely to be read and maintained if it is included as comments within the program code. 

2. High level documentation should be sparse enough that it has a reasonable chance of being read and maintained over the life of the system. Focus on high-level information, like design intent, that is often hard to abstract from the code itself. 

3. If your users are having a hard time understanding your system, then your time may be better spent on improving the user interface than on additional documentation (that many will likely not read anyway). 

### If the purpose of your documentation is to provide transparency of agency and intention to potentially interested parties outside of the project, then:

1. The larger the project, the more tangled these issues become so, again, shorter and smaller projects tend to require less documentation. 

2. The best way to accomplish the needed traceability is through automated change management and version control systems that are joined at the hip, with both the source code itself and the system documentation being under version control. 
"
Documentation	Why Is Software Documentation So Hard	2009-05-10	9 - Closed	Documentation	"<p>It is perhaps a truism that software developers tend to be binary thinkers. The bit is either on or it&#8217;s off. My software compiles successfully or it doesn&#8217;t. My program ran successfully or it crashed. The user/customer is happy with my changes or they&#8217;re not. </p>
"	"It is perhaps a truism that software developers tend to be binary thinkers. The bit is either on or it's off. My software compiles successfully or it doesn't. My program ran successfully or it crashed. The user/customer is happy with my changes or they're not. 

(This simple truth is key to many of the developer practices recommended by the agile community, by the way. Many of these practices reduce more complex activities to simpler, pass/fail propositions: the change I just checked in broke the build or it didn't; the new code successfully passes all the automated regression tests or it doesn't; the other member of my programming pair approves of the code I just wrote, or doesn't; and so on.) 

When we produce documentation rather than software, however, none of these same binary indicators of success are present. Instead, measures of success tend to be more subjective, and involve matters of judgment and degree, rather than simpler pass/fail indicators. Did I produce enough deliverables? Did those documents contain sufficient information? Was the content easy to understand? Will the information prove helpful? All of these are hard questions that require judgment calls. 

The result is that production of documentation on software projects often swings from one extreme to another. For a developer to produce no documentation is easy. For a developer to fill out a Word template for every single deliverable called out by a process is also easy, in the sense that it doesn't require much judgment. 

To produce just *enough* documentation, though... that is hard! 

This is one reason why CMMI-based process improvement efforts so often go astray. Organizations at [CMMI][] Level 1 often produce little or no documentation. As they work their way towards Levels 2 and 3, the many subtleties of the CMMI often get misinterpreted as a few simple messages, such as ""more documentation,"" and ""show me evidence that you are following the process."" 

In many ways, the [Agile][] movement was born as a backlash against exactly this sort of excess. This is one reason why Agilistas seem to develop such a fixation about the use of index cards. It is not that such cards are conducive to better writing, or easier to use and reference, but rather that both their size and lack of permanence provide very obvious barriers to this sort of misuse. Give a developer a word processor, turn your back for a few weeks, and he or she may well produce the sort of Victorian novel style of requirements document that looks impressive, but that few if any will ever actually read.  Give that same developer a stack of index cards and a [Sharpie][], though, and this sort of thing is much less likely to occur. (Even [Charles Dickens][dickens] couldn't have written a Victorian novel on index cards.) 

Like Goldilocks, then, what we want is a collection of documentation that is not too big or too small, but just right. 

But how do we know when we have too little, and when we have too much? 

Tune in again [next week][nextpost] for some clues to address this difficult topic. 

[Agile]: http://www.agilemanifesto.org
[CMMI]: http://www.sei.cmu.edu/cmmi
[Sharpie]: http://www.sharpie.com
[Dickens]: http://en.wikipedia.org/wiki/Charles_Dickens
[nextpost]: purpose-driven-documentation.html
"
Improvement	The Progress Polarity	2009-05-11	9 - Closed	Improvement	"<p>Every once in a while, an idea crosses my path at the right time and gets fixed in my brain as part of my general Thinking Toolkit.</p><br><br><p>I experienced one of these events a few years back during a leadership class I was attending. The course contained a module on Polarity Management(R), and this struck me as such an eminently useful concept that it has stayed with me ever since. The basic concepts came from the book <cite>Polarity Management</cite>  by Barry Johnson.</p>
"	"Every once in a while, an idea crosses my path at the right time and gets fixed in my brain as part of my general Thinking Toolkit.

I experienced one of these events a few years back during a leadership class I was attending. The course contained a module on [Polarity Management](http://www.polaritypartnerships.com)(R), and this struck me as such an eminently useful concept that it has stayed with me ever since. The basic concepts came from the book <cite>[Polarity Management](http://www.amazon.com/gp/product/0874251761?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0874251761)</cite>  by Barry Johnson.

In the context of this discussion, a polarity is most simply defined as a complex problem that has no solution. It might also be stated as an either/or question that has no single right answer. A more complete definition might be ""A set of two opposing or contradictory extremes permitting wide variation along a spectrum of choices, with both opposing poles offering advantages and disadvantages.""

Let me give you an example.

## Should society favor individual freedom or adherence to social norms?

Hmmm.... While some talk-show hosts might give you the impression that the right answer is ""individual freedom,"" most of us can agree that we need to strike some sort of balance between the two, and that either extreme would be suboptimal. We are tempted to say that the right answer is ""both"" but, since they are opposing extremes, you can't really have both: the more you have of one, the less you have of the other.

With this sort of situation, it is important to realize that there is no single right answer. Instead, the best approach is to strike some sort of balance between the two poles, with the optimal balance point depending on the details of the particular situation you are in. With the polarity above, for example, both a prison and a university would require you to find an optimal balance point, but the exact location of that point would probably be different for each type of institution.

I find this concept helpful because it seems that many of the challenges we face when doing software engineering process improvement are these sorts of polarity issues.

One such polarity might be stated as follows:

## Should our organizational processes remain stable or should they change?

We can see that both extremes have their advantages and disadvantages.

### Advantages of Stability

1. Increased likelihood of practitioner knowledge and understanding
2. Less work required to stay current with latest version of process
3. Emphasizes importance of fundamental process elements

### Disadvantages of Stability

1. Can lead to stagnation 
2. Inability to make any improvements 
3. Process more likely to be treated as a figurehead that is paid lip service but not actually followed

### Advantages of Change

1. Ability to make process easier to use 
2. Ability to increase effectiveness of process 
3. Ability to respond to evolving business priorities 
4. Ability to leverage industry knowledge and best practices as they become available

### Disadvantages of Change

1. Can lead to sense of chaos, disorientation 
2. Can generate confusion, lack of understanding of latest process 
3. Practitioners may feel overwhelmed trying to keep up with the changes

[Alfred North Whitehead](http://en.wikiquote.org/wiki/Alfred_North_Whitehead) expressed this polarity neatly with the following observation:

> ""The art of progress is to preserve order amid change, and to preserve change amid order.""

[Sydney Harris](http://en.wikiquote.org/wiki/Sydney_J._Harris) put it this way:

> ""Our dilemma is that we hate change and love it at the same time; what we really want is for things to remain the same but get better.""

As purveyors of an organizational process, we frequently hear arguments from both sides. ""Stop,"" we hear, ""there is too much change!"" But then, from others, we hear ""You mean you haven't fixed that yet? What do you mean, we have to wait for the next release?""

For many years now, we have stuck with the following pace:

* Significant changes gathered together into major releases, published at the end of each calendar quarter. 

* Minor defect correction and cosmetic/clarifying changes done whenever they are ready.

We recognize that this is not a perfect solution -- not the ""right"" answer to this complex problem. On balance, though, it seems to be the pace that strikes the best balance for our community, that gets us closest to that ideal of preserving order amid change, and change amid order.
"
Documentation	The 4-D Lifecycle	2009-05-12	9 - Closed	Documentation, Software Development	"<p>As I look back over my development career, it occurs to me that &#8212; no matter what methodology was in use at the time &#8212; all projects seemed to go through three essential phases. Being in an alliterative frame of mind, I will call these Discover, Drive to Decisions, and Deliver. </p>
"	"As I look back over my development career, it occurs to me that -- no matter what methodology was in use at the time -- all projects seemed to go through three essential phases. Being in an alliterative frame of mind, I will call these Discover, Drive to Decisions, and Deliver. 

In the first phase, a project team is discovering all they can about the problem space, and about potential elements of a solution. Questions are mostly open-ended, and you are working to get the general lay of the land. 

At some point, though, the team gets a pretty good sense of what is expected of them, and their interests narrow to focus on some pretty specific concerns. Typically, these involve ambiguities in the problem space, competing perspectives held by different stakeholders, or difficult design trade-offs. Resolving these generally requires some tough decisions to be made. 

Finally, when they get those open issues nailed down, the team knows with some precision what they need to do, and they marshal their troops to go off and deliver on the promises made to their customers. 

There are a few interesting points to be made about this three-phase perspective. 

First, the key mindsets necessary to succeed are very different in these three phases. The Discover phase primarily requires boundless curiosity -- much the same thing my Golden Retriever exhibits when he is let off his leash in a new space. You need to run around in all directions at once, discovering and testing boundaries, sniffing anything that might be interesting. 

In the Drive to Decisions phase, though, you need to be more focused and persistent, doing whatever it takes to resolve your significant remaining issues. In this phase you are more like a bloodhound, relentlessly following the scent of its quarry. 

In the Deliver phase, you need to be efficient and steady in making progress towards the finish line. You have lots of stuff to do, you know what it is, and you need to go about doing it. At this point, what you need is a sheepdog, rounding up the flock and bringing them home at day's end, making sure that no straggler gets lost. 

These three phases are also interesting in that I would contend that most project failures can be traced back to not recognizing the importance of one or more of these. I've seen projects fail because they were stuck in perpetual discovery mode. I've seen projects fail because they skipped the Drive phase, and tried to go straight from Discover to Deliver. And I've seen projects that failed because they tried to go straight to Deliver in a misguided effort to complete faster. 

In general, though, the Drive phase is the easiest to miss: you can easily complete all of the deliverables in any methodology and still ignore all the tough decisions that will come back to bite you before you're done. As [Spolsky][0] says, in [Joel On Sofware][1]:

> In too many programming organizations, every time there's a design debate, nobody ever manages to make a *decision*, usually for political reasons. So the programmers only work on uncontroversial stuff. As time goes on, all the hard decisions are pushed to the end. *These projects are the most likely to fail.* 

Finally (to bring us back to the documentation theme I've been pursuing with recent posts), the other interesting aspect of this 4-D approach is that it explains why I've always used a key document that has helped me more than anything else I've ever done, but that I've never seen described anywhere. I don't even have a name for it. Basically, it's a simple text document, with two numbered lists. The first list consists of open issues/questions; the second list consists of answers/decisions. I generally start populating the first list towards the end of what I'm calling the Discover phase. During the Drive to Decision phase, I'm getting answers and gradually replacing the questions on the first list with answers on the second. When the first list is empty, I'm ready for Deliver to begin. 

Of course, this document doesn't replace any of the other traditional project deliverables: it's ultimately a throw-away, since all of the answers obtained should find more permanent homes in one of the other documents produced by the project. 

And no, I have no plans to publish the 4-D Manifesto, write the 4-D Developer's Bible, start a 4-D consulting business, begin holding annual conferences, or give away t-shirts and thumb drives emblazoned with the 4-D logo. I'm not even suggesting that this cycle replace your current development lifecycle -- just that you think of this as going on in parallel. 

And if you think of a good name for my single 4-D deliverable, let me know! 

[0]: http://www.joelonsoftware.com/
[1]: http://www.amazon.com/gp/product/1590593898?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=1590593898
"
Software Development	The 4-D Lifecycle	2009-05-12	9 - Closed	Documentation, Software Development	"<p>As I look back over my development career, it occurs to me that &#8212; no matter what methodology was in use at the time &#8212; all projects seemed to go through three essential phases. Being in an alliterative frame of mind, I will call these Discover, Drive to Decisions, and Deliver. </p>
"	"As I look back over my development career, it occurs to me that -- no matter what methodology was in use at the time -- all projects seemed to go through three essential phases. Being in an alliterative frame of mind, I will call these Discover, Drive to Decisions, and Deliver. 

In the first phase, a project team is discovering all they can about the problem space, and about potential elements of a solution. Questions are mostly open-ended, and you are working to get the general lay of the land. 

At some point, though, the team gets a pretty good sense of what is expected of them, and their interests narrow to focus on some pretty specific concerns. Typically, these involve ambiguities in the problem space, competing perspectives held by different stakeholders, or difficult design trade-offs. Resolving these generally requires some tough decisions to be made. 

Finally, when they get those open issues nailed down, the team knows with some precision what they need to do, and they marshal their troops to go off and deliver on the promises made to their customers. 

There are a few interesting points to be made about this three-phase perspective. 

First, the key mindsets necessary to succeed are very different in these three phases. The Discover phase primarily requires boundless curiosity -- much the same thing my Golden Retriever exhibits when he is let off his leash in a new space. You need to run around in all directions at once, discovering and testing boundaries, sniffing anything that might be interesting. 

In the Drive to Decisions phase, though, you need to be more focused and persistent, doing whatever it takes to resolve your significant remaining issues. In this phase you are more like a bloodhound, relentlessly following the scent of its quarry. 

In the Deliver phase, you need to be efficient and steady in making progress towards the finish line. You have lots of stuff to do, you know what it is, and you need to go about doing it. At this point, what you need is a sheepdog, rounding up the flock and bringing them home at day's end, making sure that no straggler gets lost. 

These three phases are also interesting in that I would contend that most project failures can be traced back to not recognizing the importance of one or more of these. I've seen projects fail because they were stuck in perpetual discovery mode. I've seen projects fail because they skipped the Drive phase, and tried to go straight from Discover to Deliver. And I've seen projects that failed because they tried to go straight to Deliver in a misguided effort to complete faster. 

In general, though, the Drive phase is the easiest to miss: you can easily complete all of the deliverables in any methodology and still ignore all the tough decisions that will come back to bite you before you're done. As [Spolsky][0] says, in [Joel On Sofware][1]:

> In too many programming organizations, every time there's a design debate, nobody ever manages to make a *decision*, usually for political reasons. So the programmers only work on uncontroversial stuff. As time goes on, all the hard decisions are pushed to the end. *These projects are the most likely to fail.* 

Finally (to bring us back to the documentation theme I've been pursuing with recent posts), the other interesting aspect of this 4-D approach is that it explains why I've always used a key document that has helped me more than anything else I've ever done, but that I've never seen described anywhere. I don't even have a name for it. Basically, it's a simple text document, with two numbered lists. The first list consists of open issues/questions; the second list consists of answers/decisions. I generally start populating the first list towards the end of what I'm calling the Discover phase. During the Drive to Decision phase, I'm getting answers and gradually replacing the questions on the first list with answers on the second. When the first list is empty, I'm ready for Deliver to begin. 

Of course, this document doesn't replace any of the other traditional project deliverables: it's ultimately a throw-away, since all of the answers obtained should find more permanent homes in one of the other documents produced by the project. 

And no, I have no plans to publish the 4-D Manifesto, write the 4-D Developer's Bible, start a 4-D consulting business, begin holding annual conferences, or give away t-shirts and thumb drives emblazoned with the 4-D logo. I'm not even suggesting that this cycle replace your current development lifecycle -- just that you think of this as going on in parallel. 

And if you think of a good name for my single 4-D deliverable, let me know! 

[0]: http://www.joelonsoftware.com/
[1]: http://www.amazon.com/gp/product/1590593898?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=1590593898
"
Communication	Customer Communication	2009-05-13	9 - Closed	Communication, Customers, Improvement, Project Management	"<p>One of the most important project practices is Communication. </p><br><br><p>At first, this might seem like a case of belaboring the obvious &#8212; sort of like stating that breathing is a best practice for living a long and healthy life. I mean, between meetings, e-mail, web sites, wikis, PowerPoint presentations and Word documents, it sometimes seems like we are constantly swimming in a veritable sea of communication, and the last thing we need is to be reminded to communicate. </p><br><br><p>Ah, not so fast, little grasshopper! For there is communication and then there is Communication. In particular, there is the practice of regular and proactive Communication with your Customer. And, if you are to achieve this, there is the need for a Communication Plan. </p><br><br><p>I learned the risks of not doing such communication many years ago, when I was developing a new Installment Loan system for my employer, a Savings and Loan in California. We already had a large and robust Mortgage Loan system, but the company had decided it would be advantageous to offer installment loans to its customers as well, and so they had requested a new system for this very purpose. </p>
"	"One of the most important project practices is Communication. 

At first, this might seem like a case of belaboring the obvious -- sort of like stating that breathing is a best practice for living a long and healthy life. I mean, between meetings, e-mail, web sites, wikis, PowerPoint presentations and Word documents, it sometimes seems like we are constantly swimming in a veritable sea of communication, and the last thing we need is to be reminded to communicate. 

Ah, not so fast, little grasshopper! For there is communication and then there is Communication. In particular, there is the practice of regular and proactive Communication with your Customer. And, if you are to achieve this, there is the need for a Communication Plan. 

I learned the risks of not doing such communication many years ago, when I was developing a new Installment Loan system for my employer, a Savings and Loan in California. We already had a large and robust Mortgage Loan system, but the company had decided it would be advantageous to offer installment loans to its customers as well, and so they had requested a new system for this very purpose. 

We were following a waterfall development model at the time, and so I dutifully collected the requirements, designed the user interface and database, collected the requisite approvals on all of the above, then started out on the actual programming. This kept me busy for several months, and I had done such an outstanding job of documenting the requirements and design that I had no need to bother my customers with any pesky questions. I was learning to use a new development language for the project, and all of this kept me quite busy and contented, doing programming and unit testing on one program after another, all according to the schedule we had established. 

Finally, the day came when every last program had been written, every unit test had been performed, and all was as it should be. I called my customer to let them know they could begin acceptance testing the following week, just as we had scheduled those many months ago. 

""Oh,"" they said. ""The new Installment Loan system?"" Pregnant pause. ""I guess we forgot to tell you."" Hesitation. ""Market conditions changed a month or two ago."" *And you are telling me this because...?* ""We're not interested in installment loans anymore.  Sorry."" Click. 

And so I learned the hard way that it is important to keep in touch with your customer... even when you don't have any questions... even when you don't know of any issues... even when you're not quite sure what to tell them... and even when you feel like you are drowning in other work. 

And then there was this other time.... 

Oh, wait a minute. 

That's all for now. Gotta run. 

It's time for my weekly meeting with my customer. 
"
Customers	Customer Communication	2009-05-13	9 - Closed	Communication, Customers, Improvement, Project Management	"<p>One of the most important project practices is Communication. </p><br><br><p>At first, this might seem like a case of belaboring the obvious &#8212; sort of like stating that breathing is a best practice for living a long and healthy life. I mean, between meetings, e-mail, web sites, wikis, PowerPoint presentations and Word documents, it sometimes seems like we are constantly swimming in a veritable sea of communication, and the last thing we need is to be reminded to communicate. </p><br><br><p>Ah, not so fast, little grasshopper! For there is communication and then there is Communication. In particular, there is the practice of regular and proactive Communication with your Customer. And, if you are to achieve this, there is the need for a Communication Plan. </p><br><br><p>I learned the risks of not doing such communication many years ago, when I was developing a new Installment Loan system for my employer, a Savings and Loan in California. We already had a large and robust Mortgage Loan system, but the company had decided it would be advantageous to offer installment loans to its customers as well, and so they had requested a new system for this very purpose. </p>
"	"One of the most important project practices is Communication. 

At first, this might seem like a case of belaboring the obvious -- sort of like stating that breathing is a best practice for living a long and healthy life. I mean, between meetings, e-mail, web sites, wikis, PowerPoint presentations and Word documents, it sometimes seems like we are constantly swimming in a veritable sea of communication, and the last thing we need is to be reminded to communicate. 

Ah, not so fast, little grasshopper! For there is communication and then there is Communication. In particular, there is the practice of regular and proactive Communication with your Customer. And, if you are to achieve this, there is the need for a Communication Plan. 

I learned the risks of not doing such communication many years ago, when I was developing a new Installment Loan system for my employer, a Savings and Loan in California. We already had a large and robust Mortgage Loan system, but the company had decided it would be advantageous to offer installment loans to its customers as well, and so they had requested a new system for this very purpose. 

We were following a waterfall development model at the time, and so I dutifully collected the requirements, designed the user interface and database, collected the requisite approvals on all of the above, then started out on the actual programming. This kept me busy for several months, and I had done such an outstanding job of documenting the requirements and design that I had no need to bother my customers with any pesky questions. I was learning to use a new development language for the project, and all of this kept me quite busy and contented, doing programming and unit testing on one program after another, all according to the schedule we had established. 

Finally, the day came when every last program had been written, every unit test had been performed, and all was as it should be. I called my customer to let them know they could begin acceptance testing the following week, just as we had scheduled those many months ago. 

""Oh,"" they said. ""The new Installment Loan system?"" Pregnant pause. ""I guess we forgot to tell you."" Hesitation. ""Market conditions changed a month or two ago."" *And you are telling me this because...?* ""We're not interested in installment loans anymore.  Sorry."" Click. 

And so I learned the hard way that it is important to keep in touch with your customer... even when you don't have any questions... even when you don't know of any issues... even when you're not quite sure what to tell them... and even when you feel like you are drowning in other work. 

And then there was this other time.... 

Oh, wait a minute. 

That's all for now. Gotta run. 

It's time for my weekly meeting with my customer. 
"
Improvement	Customer Communication	2009-05-13	9 - Closed	Communication, Customers, Improvement, Project Management	"<p>One of the most important project practices is Communication. </p><br><br><p>At first, this might seem like a case of belaboring the obvious &#8212; sort of like stating that breathing is a best practice for living a long and healthy life. I mean, between meetings, e-mail, web sites, wikis, PowerPoint presentations and Word documents, it sometimes seems like we are constantly swimming in a veritable sea of communication, and the last thing we need is to be reminded to communicate. </p><br><br><p>Ah, not so fast, little grasshopper! For there is communication and then there is Communication. In particular, there is the practice of regular and proactive Communication with your Customer. And, if you are to achieve this, there is the need for a Communication Plan. </p><br><br><p>I learned the risks of not doing such communication many years ago, when I was developing a new Installment Loan system for my employer, a Savings and Loan in California. We already had a large and robust Mortgage Loan system, but the company had decided it would be advantageous to offer installment loans to its customers as well, and so they had requested a new system for this very purpose. </p>
"	"One of the most important project practices is Communication. 

At first, this might seem like a case of belaboring the obvious -- sort of like stating that breathing is a best practice for living a long and healthy life. I mean, between meetings, e-mail, web sites, wikis, PowerPoint presentations and Word documents, it sometimes seems like we are constantly swimming in a veritable sea of communication, and the last thing we need is to be reminded to communicate. 

Ah, not so fast, little grasshopper! For there is communication and then there is Communication. In particular, there is the practice of regular and proactive Communication with your Customer. And, if you are to achieve this, there is the need for a Communication Plan. 

I learned the risks of not doing such communication many years ago, when I was developing a new Installment Loan system for my employer, a Savings and Loan in California. We already had a large and robust Mortgage Loan system, but the company had decided it would be advantageous to offer installment loans to its customers as well, and so they had requested a new system for this very purpose. 

We were following a waterfall development model at the time, and so I dutifully collected the requirements, designed the user interface and database, collected the requisite approvals on all of the above, then started out on the actual programming. This kept me busy for several months, and I had done such an outstanding job of documenting the requirements and design that I had no need to bother my customers with any pesky questions. I was learning to use a new development language for the project, and all of this kept me quite busy and contented, doing programming and unit testing on one program after another, all according to the schedule we had established. 

Finally, the day came when every last program had been written, every unit test had been performed, and all was as it should be. I called my customer to let them know they could begin acceptance testing the following week, just as we had scheduled those many months ago. 

""Oh,"" they said. ""The new Installment Loan system?"" Pregnant pause. ""I guess we forgot to tell you."" Hesitation. ""Market conditions changed a month or two ago."" *And you are telling me this because...?* ""We're not interested in installment loans anymore.  Sorry."" Click. 

And so I learned the hard way that it is important to keep in touch with your customer... even when you don't have any questions... even when you don't know of any issues... even when you're not quite sure what to tell them... and even when you feel like you are drowning in other work. 

And then there was this other time.... 

Oh, wait a minute. 

That's all for now. Gotta run. 

It's time for my weekly meeting with my customer. 
"
Project Management	Customer Communication	2009-05-13	9 - Closed	Communication, Customers, Improvement, Project Management	"<p>One of the most important project practices is Communication. </p><br><br><p>At first, this might seem like a case of belaboring the obvious &#8212; sort of like stating that breathing is a best practice for living a long and healthy life. I mean, between meetings, e-mail, web sites, wikis, PowerPoint presentations and Word documents, it sometimes seems like we are constantly swimming in a veritable sea of communication, and the last thing we need is to be reminded to communicate. </p><br><br><p>Ah, not so fast, little grasshopper! For there is communication and then there is Communication. In particular, there is the practice of regular and proactive Communication with your Customer. And, if you are to achieve this, there is the need for a Communication Plan. </p><br><br><p>I learned the risks of not doing such communication many years ago, when I was developing a new Installment Loan system for my employer, a Savings and Loan in California. We already had a large and robust Mortgage Loan system, but the company had decided it would be advantageous to offer installment loans to its customers as well, and so they had requested a new system for this very purpose. </p>
"	"One of the most important project practices is Communication. 

At first, this might seem like a case of belaboring the obvious -- sort of like stating that breathing is a best practice for living a long and healthy life. I mean, between meetings, e-mail, web sites, wikis, PowerPoint presentations and Word documents, it sometimes seems like we are constantly swimming in a veritable sea of communication, and the last thing we need is to be reminded to communicate. 

Ah, not so fast, little grasshopper! For there is communication and then there is Communication. In particular, there is the practice of regular and proactive Communication with your Customer. And, if you are to achieve this, there is the need for a Communication Plan. 

I learned the risks of not doing such communication many years ago, when I was developing a new Installment Loan system for my employer, a Savings and Loan in California. We already had a large and robust Mortgage Loan system, but the company had decided it would be advantageous to offer installment loans to its customers as well, and so they had requested a new system for this very purpose. 

We were following a waterfall development model at the time, and so I dutifully collected the requirements, designed the user interface and database, collected the requisite approvals on all of the above, then started out on the actual programming. This kept me busy for several months, and I had done such an outstanding job of documenting the requirements and design that I had no need to bother my customers with any pesky questions. I was learning to use a new development language for the project, and all of this kept me quite busy and contented, doing programming and unit testing on one program after another, all according to the schedule we had established. 

Finally, the day came when every last program had been written, every unit test had been performed, and all was as it should be. I called my customer to let them know they could begin acceptance testing the following week, just as we had scheduled those many months ago. 

""Oh,"" they said. ""The new Installment Loan system?"" Pregnant pause. ""I guess we forgot to tell you."" Hesitation. ""Market conditions changed a month or two ago."" *And you are telling me this because...?* ""We're not interested in installment loans anymore.  Sorry."" Click. 

And so I learned the hard way that it is important to keep in touch with your customer... even when you don't have any questions... even when you don't know of any issues... even when you're not quite sure what to tell them... and even when you feel like you are drowning in other work. 

And then there was this other time.... 

Oh, wait a minute. 

That's all for now. Gotta run. 

It's time for my weekly meeting with my customer. 
"
Software	To COTS or Not That is the Question	2009-05-13	9 - Closed	Software, Software Development, Technology	"<p>When I talk to IT software developers, one of the areas of controversy that comes up frequently is the use of purchased applications packages. </p><br><br><p>Too often we in IT seem to be lured by the promise of off-the-shelf functionality whose development costs will be spread over a large customer base, yet end up with purchased software that we then have to modify or extend to fit our special requirements, ensuring that we end up with the worst of both worlds.</p>
"	"When I talk to IT software developers, one of the areas of controversy that comes up frequently is the use of purchased applications packages. 

Too often we in IT seem to be lured by the promise of off-the-shelf functionality whose development costs will be spread over a large customer base, yet end up with purchased software that we then have to modify or extend to fit our special requirements, ensuring that we end up with the worst of both worlds.

Having been involved in this debate for a decade or two, I've noticed certain recurring issues that seem to frequently get little or no attention, so I thought it might be worth discussing them here. 

Here are some of the key questions that I think need to be considered.

**1. Can system requirements be based on some set of rules that are generally accepted by industry?**

As an example, a computer-aided design (CAD) system is based on certain rules of geometry -- pretty hard for a user to insist that these need to be customized! Similarly, an application like [TurboTax][0] is based on a particular country's tax code -- which would make it hard to justify the internal development of a custom system to perform a similar function. Another example would be a [Materials Requirements Planning][1] (MRP) system, which can rely on standard practices defined by the [APICS][2] organization.

In my experience, COTS packages that are largely based on standard sets of rules such as these are frequently well accepted by users and developers, while others with more variable or controversial requirements are not. 

**2. How hard would it be to develop the system internally?**

If the system that is needed is relatively simple, without any significant technical challenges, then a COTS solution is often expensive overkill. 

Notice that the answer to this question may well change over time, as new technical capabilities become more generally available through various layers of infrastructure software. 

**3. Can the business benefit from a rapid response to requests for functional enhancements?**

Cycle times for changes to COTS software -- measured from concept to cash, from original idea to working software in the hands of users -- can often be an order of magnitude longer than for internally developed systems. 

**4. Will the internal integration requirements be so complex that upgrades to future releases of the application will be virtually impossible?**

Customers often optimistically expect to be able to benefit from future releases of an application, but in practice, the web of connections to other applications becomes so complex over time that the costs of implementing a new release often outweigh the benefits. And even when these connections start out being well managed by IT, interfaces with user-developed software and data stores often overwhelm the best laid IT architecture. 

**5. Is there a viable business model for an [independent software vendor][3] (ISV) to produce the desired system over the long haul?**

Companies routinely assess the financial stability of potential suppliers, but often fail to question the long-term viability of a vendor's business model. What matters is not how many customers and how much cash in the bank they have today, but how they will maintain those numbers over time. As a notorious example, suppliers that market software specifically designed for government contractors tend to go belly-up with disturbing regularity. 

**6. Will a unique, internally developed system provide us with some lasting advantage over our competitors?**

The alternative would be that we only need a system that is as good as similar systems used by our competitors. If our goal is only parity, then an internally developed system might actually be wasteful, since we may spend time dreaming up unique requirements that add cost but no useful business differentiation. 

Well, there you have it. Answer these six questions honestly and thoughtfully and, I would argue, 90% of the time you can make the right make-or-buy decision without ever evaluating a single package. 

[0]: http://www.turbotax.com
[1]: http://en.wikipedia.org/wiki/Material_requirements_planning
[2]: http://www.apics.org
[3]: http://en.wikipedia.org/wiki/Independent_software_vendor
"
Software Development	To COTS or Not That is the Question	2009-05-13	9 - Closed	Software, Software Development, Technology	"<p>When I talk to IT software developers, one of the areas of controversy that comes up frequently is the use of purchased applications packages. </p><br><br><p>Too often we in IT seem to be lured by the promise of off-the-shelf functionality whose development costs will be spread over a large customer base, yet end up with purchased software that we then have to modify or extend to fit our special requirements, ensuring that we end up with the worst of both worlds.</p>
"	"When I talk to IT software developers, one of the areas of controversy that comes up frequently is the use of purchased applications packages. 

Too often we in IT seem to be lured by the promise of off-the-shelf functionality whose development costs will be spread over a large customer base, yet end up with purchased software that we then have to modify or extend to fit our special requirements, ensuring that we end up with the worst of both worlds.

Having been involved in this debate for a decade or two, I've noticed certain recurring issues that seem to frequently get little or no attention, so I thought it might be worth discussing them here. 

Here are some of the key questions that I think need to be considered.

**1. Can system requirements be based on some set of rules that are generally accepted by industry?**

As an example, a computer-aided design (CAD) system is based on certain rules of geometry -- pretty hard for a user to insist that these need to be customized! Similarly, an application like [TurboTax][0] is based on a particular country's tax code -- which would make it hard to justify the internal development of a custom system to perform a similar function. Another example would be a [Materials Requirements Planning][1] (MRP) system, which can rely on standard practices defined by the [APICS][2] organization.

In my experience, COTS packages that are largely based on standard sets of rules such as these are frequently well accepted by users and developers, while others with more variable or controversial requirements are not. 

**2. How hard would it be to develop the system internally?**

If the system that is needed is relatively simple, without any significant technical challenges, then a COTS solution is often expensive overkill. 

Notice that the answer to this question may well change over time, as new technical capabilities become more generally available through various layers of infrastructure software. 

**3. Can the business benefit from a rapid response to requests for functional enhancements?**

Cycle times for changes to COTS software -- measured from concept to cash, from original idea to working software in the hands of users -- can often be an order of magnitude longer than for internally developed systems. 

**4. Will the internal integration requirements be so complex that upgrades to future releases of the application will be virtually impossible?**

Customers often optimistically expect to be able to benefit from future releases of an application, but in practice, the web of connections to other applications becomes so complex over time that the costs of implementing a new release often outweigh the benefits. And even when these connections start out being well managed by IT, interfaces with user-developed software and data stores often overwhelm the best laid IT architecture. 

**5. Is there a viable business model for an [independent software vendor][3] (ISV) to produce the desired system over the long haul?**

Companies routinely assess the financial stability of potential suppliers, but often fail to question the long-term viability of a vendor's business model. What matters is not how many customers and how much cash in the bank they have today, but how they will maintain those numbers over time. As a notorious example, suppliers that market software specifically designed for government contractors tend to go belly-up with disturbing regularity. 

**6. Will a unique, internally developed system provide us with some lasting advantage over our competitors?**

The alternative would be that we only need a system that is as good as similar systems used by our competitors. If our goal is only parity, then an internally developed system might actually be wasteful, since we may spend time dreaming up unique requirements that add cost but no useful business differentiation. 

Well, there you have it. Answer these six questions honestly and thoughtfully and, I would argue, 90% of the time you can make the right make-or-buy decision without ever evaluating a single package. 

[0]: http://www.turbotax.com
[1]: http://en.wikipedia.org/wiki/Material_requirements_planning
[2]: http://www.apics.org
[3]: http://en.wikipedia.org/wiki/Independent_software_vendor
"
Technology	To COTS or Not That is the Question	2009-05-13	9 - Closed	Software, Software Development, Technology	"<p>When I talk to IT software developers, one of the areas of controversy that comes up frequently is the use of purchased applications packages. </p><br><br><p>Too often we in IT seem to be lured by the promise of off-the-shelf functionality whose development costs will be spread over a large customer base, yet end up with purchased software that we then have to modify or extend to fit our special requirements, ensuring that we end up with the worst of both worlds.</p>
"	"When I talk to IT software developers, one of the areas of controversy that comes up frequently is the use of purchased applications packages. 

Too often we in IT seem to be lured by the promise of off-the-shelf functionality whose development costs will be spread over a large customer base, yet end up with purchased software that we then have to modify or extend to fit our special requirements, ensuring that we end up with the worst of both worlds.

Having been involved in this debate for a decade or two, I've noticed certain recurring issues that seem to frequently get little or no attention, so I thought it might be worth discussing them here. 

Here are some of the key questions that I think need to be considered.

**1. Can system requirements be based on some set of rules that are generally accepted by industry?**

As an example, a computer-aided design (CAD) system is based on certain rules of geometry -- pretty hard for a user to insist that these need to be customized! Similarly, an application like [TurboTax][0] is based on a particular country's tax code -- which would make it hard to justify the internal development of a custom system to perform a similar function. Another example would be a [Materials Requirements Planning][1] (MRP) system, which can rely on standard practices defined by the [APICS][2] organization.

In my experience, COTS packages that are largely based on standard sets of rules such as these are frequently well accepted by users and developers, while others with more variable or controversial requirements are not. 

**2. How hard would it be to develop the system internally?**

If the system that is needed is relatively simple, without any significant technical challenges, then a COTS solution is often expensive overkill. 

Notice that the answer to this question may well change over time, as new technical capabilities become more generally available through various layers of infrastructure software. 

**3. Can the business benefit from a rapid response to requests for functional enhancements?**

Cycle times for changes to COTS software -- measured from concept to cash, from original idea to working software in the hands of users -- can often be an order of magnitude longer than for internally developed systems. 

**4. Will the internal integration requirements be so complex that upgrades to future releases of the application will be virtually impossible?**

Customers often optimistically expect to be able to benefit from future releases of an application, but in practice, the web of connections to other applications becomes so complex over time that the costs of implementing a new release often outweigh the benefits. And even when these connections start out being well managed by IT, interfaces with user-developed software and data stores often overwhelm the best laid IT architecture. 

**5. Is there a viable business model for an [independent software vendor][3] (ISV) to produce the desired system over the long haul?**

Companies routinely assess the financial stability of potential suppliers, but often fail to question the long-term viability of a vendor's business model. What matters is not how many customers and how much cash in the bank they have today, but how they will maintain those numbers over time. As a notorious example, suppliers that market software specifically designed for government contractors tend to go belly-up with disturbing regularity. 

**6. Will a unique, internally developed system provide us with some lasting advantage over our competitors?**

The alternative would be that we only need a system that is as good as similar systems used by our competitors. If our goal is only parity, then an internally developed system might actually be wasteful, since we may spend time dreaming up unique requirements that add cost but no useful business differentiation. 

Well, there you have it. Answer these six questions honestly and thoughtfully and, I would argue, 90% of the time you can make the right make-or-buy decision without ever evaluating a single package. 

[0]: http://www.turbotax.com
[1]: http://en.wikipedia.org/wiki/Material_requirements_planning
[2]: http://www.apics.org
[3]: http://en.wikipedia.org/wiki/Independent_software_vendor
"
Improvement	The Process Prescription Polarity	2009-05-15	9 - Closed	Improvement	"<p>I talked in a recent post about the concepts of Polarity Management and what I called the Progress Polarity<br>. </p><br><br><p>Another polarity often encountered in Software Process Improvement is what might be called that of Process Prescription. In other words: </p><br><br><h3>Should our organizational processes tell projects exactly what to do, or should these processes allow projects considerable latitude and discretion?</h3>
"	"I talked in a recent post about the concepts of [Polarity Management][polarity-mgmt] and what I called the [Progress Polarity][progress-polarity]. 

Another polarity often encountered in Software Process Improvement is what might be called that of Process Prescription. In other words: 

**Should our organizational processes tell projects exactly what to do, or should these processes allow projects considerable latitude and discretion?**

The more prescriptive approach is often associated with the [CMMI][] and its adherents, while the *laissez-faire* attitude is more typical of [Agile][] proponents. In fact, this polarity was described in a recent paper from the [SEI][], entitled ""[CMMI&reg; or Agile: Why Not Embrace Both!][cmmi-agile-embrace]""

> There is a balance to achieve across organizational, project, and
> individual prerogatives and responsibilities.... 
> 
> If the balance is weighted too heavily in favor of the organization,
> projects and practitioners may lack the flexibility they need to be
> successful and motivation fails. 
> 
> On the other hand, too much flexibility can expose the organization to
> excessive risk... and missed opportunities for organizational learning
> that over the longer term might lead to improved product quality and
> productivity. 
> 
> It is difficult to achieve the right balance.

A [Forrester][] research paper from November 17, 2006 said much the same thing, labeling the two extremes as ""Process Dictatorship"" vs. ""Process Anarchy."" 

As with all polarities, we can see that both extremes have their advantages and disadvantages.

### Advantages of Process Prescription

1. Ability to pass on organizational learning
2. Ability for team members to easily move from one project to another
3. Assurance that important steps and deliverables will not be skipped
4. Consistent, reliable execution
5. Consistent interfaces at process boundaries
6. Provides ""training wheels"" for junior staff members

### Disadvantages of Process Prescription

1. Feelings of disempowerment among team members 
2. Burdening all projects with steps and deliverables that may only be needed by some 
3. Inability for project teams and team members to learn from their own experiences
4. Provides ""straight jacket"" for senior staff members

### Advantages of the Laissez-Faire Approach

1. Feelings of empowerment and ownership among team members
2. Ability of team to rapidly improve its processes (especially for projects working with short delivery cycles)
3. Ability to fully leverage the knowledge of the project team
4. Reduction of waste through ""right-sizing"" of process to fit the project

### Disadvantages of the Laissez-Faire Approach

1. Propensity of developers to avoid analysis, documentation and testing
2. Junior developers may not know how to proceed, or may make common mistakes 
3. Practitioners may feel overwhelmed trying to keep up with the changes
4. Large learning curves when developers switch from one team to another
5. Inconsistend hand-offs to other organizations and processes

Again, as will all polarities, the challenge is find the best balance point between the two extremes. 

Some of the typical ways to achieve compromise are:

* Providing multiple softare development lifecycles to choose from. 
* Allowing some flexibility, or tailoring of a selected lifecycle to ""right-size"" it for the task at hand. 
* Providing some consistent tailoring guidance, to indicate in what conditions certain steps and deliverables are recommended or required. 

[agile]:              http://agilemanifesto.org/
[cmmi]:               http://www.sei.cmu.edu/cmmi/
[cmmi-agile-embrace]: http://www.sei.cmu.edu/pub/documents/08.reports/08tn003.pdf
[forrester]:          http://www.forrester.com/
[polarity-mgmt]:      http://www.polaritypartnerships.com/
[progress-polarity]:  the-progress-polarity.html
[sei]:                http://www.sei.cmu.edu/
"
Leadership	12 Secrets to Application Development Nirvana	2009-05-23	9 - Closed	Leadership, Software, Software Development, Technology		"ÔªøAs I wing my way back to Seattle, returning from an IT conference in Las Vegas, I find myself reflecting, not on all the latest and greatest IT trends that were discussed over the past week, but on some of the basics I've learned during several decades in applications development. Although these practices manifest themselves differently at different times, as technologies and methodology movements come and go, they seem to me to have remained fundamentally constant over all these many years. 

So here it is: my 12-Step Program to App Dev Nirvana.

**1. Start with the right sort of people.** You need people who are [smart, who get things done](http://www.amazon.com/gp/product/1590598385?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=1590598385), who enjoy learning, and who interact constructively with customers, management and teammates. I don't mean to imply that these sorts of people are hard to find. Most of the people I've worked with in my career fit this description on a good day, and almost everyone I've known (myself included) fails to meet one or more of these standards on a bad day. And certainly all of us have room for development in these areas, and do indeed develop in positive ways over time.

On the other hand, there are situations where not everyone lives up to these standards consistently, where people are progressing slowly if at all, and where you can't afford to wait for a long-term turnaround plan. These situations are unfortunate for all involved, but ignoring them doesn't make them go away. 

**2. Pick the right sorts of problems.** Many IT development projects are doomed from the start, either because they are too large, because stakeholder expectations are unrealistic, because the chosen technology is too immature, because organizational politics present insurmountable problems, because you are automating a fundamentally poor process, or for a whole host of other reasons. These projects generally proceed, not because these problems are unknown, or their impact is underestimated, but because people are afraid to speak up, or are not listened to when they do.  

**3. Form developers into mid-sized teams of 8 - 12 people who work closely together and who are dependent on each other for success.** These sorts of teams have wonderful qualities. People learn from each other. People challenge each other. Communication tends to happen quickly and effectively. Performance standards tend to be embraced and enforced by the teams themselves, in a much more effective way than would ever be possible through the intervention of management or a central process group. 

**4. Give the teams the resources they need to succeed.** These resources may be tools, skills, training, outside consulting, or elements of hardware and software infrastructure. 

**5. Give everyone line-of-sight access to their key customers.** Key customers will always include the users and primary beneficiaries of a software development effort, but may also include internal customers (in the way that programmers are customers of functional analysts writing requirements specifications). By line-of-sight access, I mean to imply clear channels of communication, rapid, unambiguous feedback, and availability. 

**6. Give someone the job of reminding everyone of everything else.** By everything else, I mean all the things that could go wrong -- late deliveries of software or hardware, dramatic changes in business conditions, inability of the solution to scale to potential volumes of users or transactions, and on and on. By everything else, I also mean the requirements of secondary stakeholders, such as Enterprise Architecture, Information Security, senior management, audit groups responsible for maintaining compliance with Sarbanes-Oxley, etc. (These other requirements should not impede the satisfaction of key customers, and should not over-burden the project team, but they do exist, and cannot be ignored without imperiling the success of a project.) 

This is traditionally the role of the project manager, by the way, although it is not often stated as such.

**7. Create an environment of continuous learning.** Encourage developers to take time to learn new technologies and practices. Provide [books](http://www.amazon.com/gp/redirect.html?ie=UTF8&location=http%3A%2F%2Fwww.amazon.com%2FComputers-Internet-Books%2Fb%3Fie%3DUTF8%26node%3D5%26ref%255F%3Dbhp%255Fbb0309A%255Fcomint2&tag=pagantuna-20&linkCode=ur2&camp=1789&creative=390957), seminars, conferences, training classes and time for experimentation. Hold retrospectives at the end of software delivery cycles. Challenge people to improve and to develop, rather than just continuing to do what they are already good at. Have team members cross-train each other. Make it OK for people not to know all the answers, and to try things that don't work. Challenge complacency. Don't settle for the status quo. 

If you want a more concrete guideline, everyone should be encouraged to spend 5 - 20% of their time -- day after day, week after week -- in some form of learning not directly required by their immediate job assignments. 

**8. Create diverse teams.** People don't learn a lot from other people who are just like themselves. Consider as many dimensions of diversity as possible, including years of experience at software development. (Disparities in this dimension should lead to some healthy mentoring relationships.) 

By the way, since teammates will tend to become more like each other over time, new team members will need to be added periodically in order to maintain healthy levels of diversity. 

**9. Identify clear and unambiguous success indicators.** These may be meaningful, numeric metrics, or may be other indicators such as customer feedback at software prototyping sessions, or results of usability testing. 

**10. Shorten feedback loops.** (These should also be thought of as learning loops.) Practices such as continuous build integration, automated testing, software prototyping, daily stand-up meetings, and short software delivery cycles are all variations on this theme. Don't underestimate the power of this suggestion. When a development team is performing one-month sprints, they suddenly learn and change things about their process that they would never have noticed or bothered with if they were taking a year or two to complete one iteration of their development lifecycle.

**11. Foster a healthy attitude towards documentation.** Hey, sometimes it helps to write things down. Sometimes pictures help. Don't make it more complicated than that. Watch out for those who tend to polarize this discussion into document everything vs. document nothing, since both of those extremes are generally disastrous. Also watch out for ceremonial approvals of documents. When 10 people have to approve everything that's been written down, that's a sure sign that no one understands any of it and no one trusts anyone else. 

An egalitarian authoring tool that includes lightweight content management -- such as a wiki -- can help here.

**12. Avoid extremes and religious movements.** In other words, [If you meet the Software Development Guru on the Road, Take Him off His Pedestal](http://www.amazon.com/gp/product/0553278320?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0553278320). Notice that I haven't used the phrase ""employee empowerment"" here anywhere -- not because it isn't implicit in much of what I've said, but because it's lately become fashionable jargon used to mean radical abdication of responsibility by management -- but there is no faster way to disempower a software development team than to have them put absolute faith in a particular author, book, manifesto, movement or institution. Learn from all of them, but place absolute faith in none of them. 

There. That's it. These things won't guarantee success -- nothing will do that -- but if followed faithfully, I sincerely believe they will result in pretty spectacular success rates, much better than industry averages. Why? Because I've seen projects and teams succeed when these elements are present, and seen them fail when they are not. And when I boil down all the collective wisdom I've heard from colleagues, authors and various distinguished bodies of knowledge over the years, these same elements show up over and over again. 

Now, there are a few interesting attributes of this list that I want to call your attention to.  

First, these items includes elements of [Lean](http://www.amazon.com/gp/product/0071392319?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0071392319), [Agile](http://www.amazon.com/gp/product/0321482751?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0321482751), the [CMMI](http://www.amazon.com/gp/product/0321279670?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0321279670) and the [PMBOK](http://www.amazon.com/gp/product/1933890517?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=1933890517).  

Second, the list is short, easy to comprehend and actionable. Long, complicated bodies of knowledge have their value, but they should fundamentally supplement this list, not replace it. And while doing all of this stuff consistently will never be easy -- what fun would that be? -- neither is it impossible or something that will take years to accomplish. 

Third -- and I think this is a big one -- none of these twelve items are exclusively or even primarily actions for developers, or process improvement professionals. Rather, all of these items require at least as much of management as they do of software developers. 

Let me say that again: *all of the items above are primarily the responsibility of management.*

In fact, based on the contents of this list, I might go so far as to assert that management tends to be the missing link in software development improvement efforts. After all, most approaches, including CMMI and Agile, tend to treat managers as at most passive sponsors of improvement efforts being worked by vendors, developers and methodologists. Implementing this list, however, will require more of management than to sit behind their desk and occasionally sign documents supporting the labors of others. In fact, implementation of this list requires management to play a very active and ongoing role in such improvement efforts.
"
Software	12 Secrets to Application Development Nirvana	2009-05-23	9 - Closed	Leadership, Software, Software Development, Technology		"ÔªøAs I wing my way back to Seattle, returning from an IT conference in Las Vegas, I find myself reflecting, not on all the latest and greatest IT trends that were discussed over the past week, but on some of the basics I've learned during several decades in applications development. Although these practices manifest themselves differently at different times, as technologies and methodology movements come and go, they seem to me to have remained fundamentally constant over all these many years. 

So here it is: my 12-Step Program to App Dev Nirvana.

**1. Start with the right sort of people.** You need people who are [smart, who get things done](http://www.amazon.com/gp/product/1590598385?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=1590598385), who enjoy learning, and who interact constructively with customers, management and teammates. I don't mean to imply that these sorts of people are hard to find. Most of the people I've worked with in my career fit this description on a good day, and almost everyone I've known (myself included) fails to meet one or more of these standards on a bad day. And certainly all of us have room for development in these areas, and do indeed develop in positive ways over time.

On the other hand, there are situations where not everyone lives up to these standards consistently, where people are progressing slowly if at all, and where you can't afford to wait for a long-term turnaround plan. These situations are unfortunate for all involved, but ignoring them doesn't make them go away. 

**2. Pick the right sorts of problems.** Many IT development projects are doomed from the start, either because they are too large, because stakeholder expectations are unrealistic, because the chosen technology is too immature, because organizational politics present insurmountable problems, because you are automating a fundamentally poor process, or for a whole host of other reasons. These projects generally proceed, not because these problems are unknown, or their impact is underestimated, but because people are afraid to speak up, or are not listened to when they do.  

**3. Form developers into mid-sized teams of 8 - 12 people who work closely together and who are dependent on each other for success.** These sorts of teams have wonderful qualities. People learn from each other. People challenge each other. Communication tends to happen quickly and effectively. Performance standards tend to be embraced and enforced by the teams themselves, in a much more effective way than would ever be possible through the intervention of management or a central process group. 

**4. Give the teams the resources they need to succeed.** These resources may be tools, skills, training, outside consulting, or elements of hardware and software infrastructure. 

**5. Give everyone line-of-sight access to their key customers.** Key customers will always include the users and primary beneficiaries of a software development effort, but may also include internal customers (in the way that programmers are customers of functional analysts writing requirements specifications). By line-of-sight access, I mean to imply clear channels of communication, rapid, unambiguous feedback, and availability. 

**6. Give someone the job of reminding everyone of everything else.** By everything else, I mean all the things that could go wrong -- late deliveries of software or hardware, dramatic changes in business conditions, inability of the solution to scale to potential volumes of users or transactions, and on and on. By everything else, I also mean the requirements of secondary stakeholders, such as Enterprise Architecture, Information Security, senior management, audit groups responsible for maintaining compliance with Sarbanes-Oxley, etc. (These other requirements should not impede the satisfaction of key customers, and should not over-burden the project team, but they do exist, and cannot be ignored without imperiling the success of a project.) 

This is traditionally the role of the project manager, by the way, although it is not often stated as such.

**7. Create an environment of continuous learning.** Encourage developers to take time to learn new technologies and practices. Provide [books](http://www.amazon.com/gp/redirect.html?ie=UTF8&location=http%3A%2F%2Fwww.amazon.com%2FComputers-Internet-Books%2Fb%3Fie%3DUTF8%26node%3D5%26ref%255F%3Dbhp%255Fbb0309A%255Fcomint2&tag=pagantuna-20&linkCode=ur2&camp=1789&creative=390957), seminars, conferences, training classes and time for experimentation. Hold retrospectives at the end of software delivery cycles. Challenge people to improve and to develop, rather than just continuing to do what they are already good at. Have team members cross-train each other. Make it OK for people not to know all the answers, and to try things that don't work. Challenge complacency. Don't settle for the status quo. 

If you want a more concrete guideline, everyone should be encouraged to spend 5 - 20% of their time -- day after day, week after week -- in some form of learning not directly required by their immediate job assignments. 

**8. Create diverse teams.** People don't learn a lot from other people who are just like themselves. Consider as many dimensions of diversity as possible, including years of experience at software development. (Disparities in this dimension should lead to some healthy mentoring relationships.) 

By the way, since teammates will tend to become more like each other over time, new team members will need to be added periodically in order to maintain healthy levels of diversity. 

**9. Identify clear and unambiguous success indicators.** These may be meaningful, numeric metrics, or may be other indicators such as customer feedback at software prototyping sessions, or results of usability testing. 

**10. Shorten feedback loops.** (These should also be thought of as learning loops.) Practices such as continuous build integration, automated testing, software prototyping, daily stand-up meetings, and short software delivery cycles are all variations on this theme. Don't underestimate the power of this suggestion. When a development team is performing one-month sprints, they suddenly learn and change things about their process that they would never have noticed or bothered with if they were taking a year or two to complete one iteration of their development lifecycle.

**11. Foster a healthy attitude towards documentation.** Hey, sometimes it helps to write things down. Sometimes pictures help. Don't make it more complicated than that. Watch out for those who tend to polarize this discussion into document everything vs. document nothing, since both of those extremes are generally disastrous. Also watch out for ceremonial approvals of documents. When 10 people have to approve everything that's been written down, that's a sure sign that no one understands any of it and no one trusts anyone else. 

An egalitarian authoring tool that includes lightweight content management -- such as a wiki -- can help here.

**12. Avoid extremes and religious movements.** In other words, [If you meet the Software Development Guru on the Road, Take Him off His Pedestal](http://www.amazon.com/gp/product/0553278320?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0553278320). Notice that I haven't used the phrase ""employee empowerment"" here anywhere -- not because it isn't implicit in much of what I've said, but because it's lately become fashionable jargon used to mean radical abdication of responsibility by management -- but there is no faster way to disempower a software development team than to have them put absolute faith in a particular author, book, manifesto, movement or institution. Learn from all of them, but place absolute faith in none of them. 

There. That's it. These things won't guarantee success -- nothing will do that -- but if followed faithfully, I sincerely believe they will result in pretty spectacular success rates, much better than industry averages. Why? Because I've seen projects and teams succeed when these elements are present, and seen them fail when they are not. And when I boil down all the collective wisdom I've heard from colleagues, authors and various distinguished bodies of knowledge over the years, these same elements show up over and over again. 

Now, there are a few interesting attributes of this list that I want to call your attention to.  

First, these items includes elements of [Lean](http://www.amazon.com/gp/product/0071392319?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0071392319), [Agile](http://www.amazon.com/gp/product/0321482751?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0321482751), the [CMMI](http://www.amazon.com/gp/product/0321279670?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0321279670) and the [PMBOK](http://www.amazon.com/gp/product/1933890517?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=1933890517).  

Second, the list is short, easy to comprehend and actionable. Long, complicated bodies of knowledge have their value, but they should fundamentally supplement this list, not replace it. And while doing all of this stuff consistently will never be easy -- what fun would that be? -- neither is it impossible or something that will take years to accomplish. 

Third -- and I think this is a big one -- none of these twelve items are exclusively or even primarily actions for developers, or process improvement professionals. Rather, all of these items require at least as much of management as they do of software developers. 

Let me say that again: *all of the items above are primarily the responsibility of management.*

In fact, based on the contents of this list, I might go so far as to assert that management tends to be the missing link in software development improvement efforts. After all, most approaches, including CMMI and Agile, tend to treat managers as at most passive sponsors of improvement efforts being worked by vendors, developers and methodologists. Implementing this list, however, will require more of management than to sit behind their desk and occasionally sign documents supporting the labors of others. In fact, implementation of this list requires management to play a very active and ongoing role in such improvement efforts.
"
Software Development	12 Secrets to Application Development Nirvana	2009-05-23	9 - Closed	Leadership, Software, Software Development, Technology		"ÔªøAs I wing my way back to Seattle, returning from an IT conference in Las Vegas, I find myself reflecting, not on all the latest and greatest IT trends that were discussed over the past week, but on some of the basics I've learned during several decades in applications development. Although these practices manifest themselves differently at different times, as technologies and methodology movements come and go, they seem to me to have remained fundamentally constant over all these many years. 

So here it is: my 12-Step Program to App Dev Nirvana.

**1. Start with the right sort of people.** You need people who are [smart, who get things done](http://www.amazon.com/gp/product/1590598385?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=1590598385), who enjoy learning, and who interact constructively with customers, management and teammates. I don't mean to imply that these sorts of people are hard to find. Most of the people I've worked with in my career fit this description on a good day, and almost everyone I've known (myself included) fails to meet one or more of these standards on a bad day. And certainly all of us have room for development in these areas, and do indeed develop in positive ways over time.

On the other hand, there are situations where not everyone lives up to these standards consistently, where people are progressing slowly if at all, and where you can't afford to wait for a long-term turnaround plan. These situations are unfortunate for all involved, but ignoring them doesn't make them go away. 

**2. Pick the right sorts of problems.** Many IT development projects are doomed from the start, either because they are too large, because stakeholder expectations are unrealistic, because the chosen technology is too immature, because organizational politics present insurmountable problems, because you are automating a fundamentally poor process, or for a whole host of other reasons. These projects generally proceed, not because these problems are unknown, or their impact is underestimated, but because people are afraid to speak up, or are not listened to when they do.  

**3. Form developers into mid-sized teams of 8 - 12 people who work closely together and who are dependent on each other for success.** These sorts of teams have wonderful qualities. People learn from each other. People challenge each other. Communication tends to happen quickly and effectively. Performance standards tend to be embraced and enforced by the teams themselves, in a much more effective way than would ever be possible through the intervention of management or a central process group. 

**4. Give the teams the resources they need to succeed.** These resources may be tools, skills, training, outside consulting, or elements of hardware and software infrastructure. 

**5. Give everyone line-of-sight access to their key customers.** Key customers will always include the users and primary beneficiaries of a software development effort, but may also include internal customers (in the way that programmers are customers of functional analysts writing requirements specifications). By line-of-sight access, I mean to imply clear channels of communication, rapid, unambiguous feedback, and availability. 

**6. Give someone the job of reminding everyone of everything else.** By everything else, I mean all the things that could go wrong -- late deliveries of software or hardware, dramatic changes in business conditions, inability of the solution to scale to potential volumes of users or transactions, and on and on. By everything else, I also mean the requirements of secondary stakeholders, such as Enterprise Architecture, Information Security, senior management, audit groups responsible for maintaining compliance with Sarbanes-Oxley, etc. (These other requirements should not impede the satisfaction of key customers, and should not over-burden the project team, but they do exist, and cannot be ignored without imperiling the success of a project.) 

This is traditionally the role of the project manager, by the way, although it is not often stated as such.

**7. Create an environment of continuous learning.** Encourage developers to take time to learn new technologies and practices. Provide [books](http://www.amazon.com/gp/redirect.html?ie=UTF8&location=http%3A%2F%2Fwww.amazon.com%2FComputers-Internet-Books%2Fb%3Fie%3DUTF8%26node%3D5%26ref%255F%3Dbhp%255Fbb0309A%255Fcomint2&tag=pagantuna-20&linkCode=ur2&camp=1789&creative=390957), seminars, conferences, training classes and time for experimentation. Hold retrospectives at the end of software delivery cycles. Challenge people to improve and to develop, rather than just continuing to do what they are already good at. Have team members cross-train each other. Make it OK for people not to know all the answers, and to try things that don't work. Challenge complacency. Don't settle for the status quo. 

If you want a more concrete guideline, everyone should be encouraged to spend 5 - 20% of their time -- day after day, week after week -- in some form of learning not directly required by their immediate job assignments. 

**8. Create diverse teams.** People don't learn a lot from other people who are just like themselves. Consider as many dimensions of diversity as possible, including years of experience at software development. (Disparities in this dimension should lead to some healthy mentoring relationships.) 

By the way, since teammates will tend to become more like each other over time, new team members will need to be added periodically in order to maintain healthy levels of diversity. 

**9. Identify clear and unambiguous success indicators.** These may be meaningful, numeric metrics, or may be other indicators such as customer feedback at software prototyping sessions, or results of usability testing. 

**10. Shorten feedback loops.** (These should also be thought of as learning loops.) Practices such as continuous build integration, automated testing, software prototyping, daily stand-up meetings, and short software delivery cycles are all variations on this theme. Don't underestimate the power of this suggestion. When a development team is performing one-month sprints, they suddenly learn and change things about their process that they would never have noticed or bothered with if they were taking a year or two to complete one iteration of their development lifecycle.

**11. Foster a healthy attitude towards documentation.** Hey, sometimes it helps to write things down. Sometimes pictures help. Don't make it more complicated than that. Watch out for those who tend to polarize this discussion into document everything vs. document nothing, since both of those extremes are generally disastrous. Also watch out for ceremonial approvals of documents. When 10 people have to approve everything that's been written down, that's a sure sign that no one understands any of it and no one trusts anyone else. 

An egalitarian authoring tool that includes lightweight content management -- such as a wiki -- can help here.

**12. Avoid extremes and religious movements.** In other words, [If you meet the Software Development Guru on the Road, Take Him off His Pedestal](http://www.amazon.com/gp/product/0553278320?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0553278320). Notice that I haven't used the phrase ""employee empowerment"" here anywhere -- not because it isn't implicit in much of what I've said, but because it's lately become fashionable jargon used to mean radical abdication of responsibility by management -- but there is no faster way to disempower a software development team than to have them put absolute faith in a particular author, book, manifesto, movement or institution. Learn from all of them, but place absolute faith in none of them. 

There. That's it. These things won't guarantee success -- nothing will do that -- but if followed faithfully, I sincerely believe they will result in pretty spectacular success rates, much better than industry averages. Why? Because I've seen projects and teams succeed when these elements are present, and seen them fail when they are not. And when I boil down all the collective wisdom I've heard from colleagues, authors and various distinguished bodies of knowledge over the years, these same elements show up over and over again. 

Now, there are a few interesting attributes of this list that I want to call your attention to.  

First, these items includes elements of [Lean](http://www.amazon.com/gp/product/0071392319?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0071392319), [Agile](http://www.amazon.com/gp/product/0321482751?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0321482751), the [CMMI](http://www.amazon.com/gp/product/0321279670?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0321279670) and the [PMBOK](http://www.amazon.com/gp/product/1933890517?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=1933890517).  

Second, the list is short, easy to comprehend and actionable. Long, complicated bodies of knowledge have their value, but they should fundamentally supplement this list, not replace it. And while doing all of this stuff consistently will never be easy -- what fun would that be? -- neither is it impossible or something that will take years to accomplish. 

Third -- and I think this is a big one -- none of these twelve items are exclusively or even primarily actions for developers, or process improvement professionals. Rather, all of these items require at least as much of management as they do of software developers. 

Let me say that again: *all of the items above are primarily the responsibility of management.*

In fact, based on the contents of this list, I might go so far as to assert that management tends to be the missing link in software development improvement efforts. After all, most approaches, including CMMI and Agile, tend to treat managers as at most passive sponsors of improvement efforts being worked by vendors, developers and methodologists. Implementing this list, however, will require more of management than to sit behind their desk and occasionally sign documents supporting the labors of others. In fact, implementation of this list requires management to play a very active and ongoing role in such improvement efforts.
"
Technology	12 Secrets to Application Development Nirvana	2009-05-23	9 - Closed	Leadership, Software, Software Development, Technology		"ÔªøAs I wing my way back to Seattle, returning from an IT conference in Las Vegas, I find myself reflecting, not on all the latest and greatest IT trends that were discussed over the past week, but on some of the basics I've learned during several decades in applications development. Although these practices manifest themselves differently at different times, as technologies and methodology movements come and go, they seem to me to have remained fundamentally constant over all these many years. 

So here it is: my 12-Step Program to App Dev Nirvana.

**1. Start with the right sort of people.** You need people who are [smart, who get things done](http://www.amazon.com/gp/product/1590598385?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=1590598385), who enjoy learning, and who interact constructively with customers, management and teammates. I don't mean to imply that these sorts of people are hard to find. Most of the people I've worked with in my career fit this description on a good day, and almost everyone I've known (myself included) fails to meet one or more of these standards on a bad day. And certainly all of us have room for development in these areas, and do indeed develop in positive ways over time.

On the other hand, there are situations where not everyone lives up to these standards consistently, where people are progressing slowly if at all, and where you can't afford to wait for a long-term turnaround plan. These situations are unfortunate for all involved, but ignoring them doesn't make them go away. 

**2. Pick the right sorts of problems.** Many IT development projects are doomed from the start, either because they are too large, because stakeholder expectations are unrealistic, because the chosen technology is too immature, because organizational politics present insurmountable problems, because you are automating a fundamentally poor process, or for a whole host of other reasons. These projects generally proceed, not because these problems are unknown, or their impact is underestimated, but because people are afraid to speak up, or are not listened to when they do.  

**3. Form developers into mid-sized teams of 8 - 12 people who work closely together and who are dependent on each other for success.** These sorts of teams have wonderful qualities. People learn from each other. People challenge each other. Communication tends to happen quickly and effectively. Performance standards tend to be embraced and enforced by the teams themselves, in a much more effective way than would ever be possible through the intervention of management or a central process group. 

**4. Give the teams the resources they need to succeed.** These resources may be tools, skills, training, outside consulting, or elements of hardware and software infrastructure. 

**5. Give everyone line-of-sight access to their key customers.** Key customers will always include the users and primary beneficiaries of a software development effort, but may also include internal customers (in the way that programmers are customers of functional analysts writing requirements specifications). By line-of-sight access, I mean to imply clear channels of communication, rapid, unambiguous feedback, and availability. 

**6. Give someone the job of reminding everyone of everything else.** By everything else, I mean all the things that could go wrong -- late deliveries of software or hardware, dramatic changes in business conditions, inability of the solution to scale to potential volumes of users or transactions, and on and on. By everything else, I also mean the requirements of secondary stakeholders, such as Enterprise Architecture, Information Security, senior management, audit groups responsible for maintaining compliance with Sarbanes-Oxley, etc. (These other requirements should not impede the satisfaction of key customers, and should not over-burden the project team, but they do exist, and cannot be ignored without imperiling the success of a project.) 

This is traditionally the role of the project manager, by the way, although it is not often stated as such.

**7. Create an environment of continuous learning.** Encourage developers to take time to learn new technologies and practices. Provide [books](http://www.amazon.com/gp/redirect.html?ie=UTF8&location=http%3A%2F%2Fwww.amazon.com%2FComputers-Internet-Books%2Fb%3Fie%3DUTF8%26node%3D5%26ref%255F%3Dbhp%255Fbb0309A%255Fcomint2&tag=pagantuna-20&linkCode=ur2&camp=1789&creative=390957), seminars, conferences, training classes and time for experimentation. Hold retrospectives at the end of software delivery cycles. Challenge people to improve and to develop, rather than just continuing to do what they are already good at. Have team members cross-train each other. Make it OK for people not to know all the answers, and to try things that don't work. Challenge complacency. Don't settle for the status quo. 

If you want a more concrete guideline, everyone should be encouraged to spend 5 - 20% of their time -- day after day, week after week -- in some form of learning not directly required by their immediate job assignments. 

**8. Create diverse teams.** People don't learn a lot from other people who are just like themselves. Consider as many dimensions of diversity as possible, including years of experience at software development. (Disparities in this dimension should lead to some healthy mentoring relationships.) 

By the way, since teammates will tend to become more like each other over time, new team members will need to be added periodically in order to maintain healthy levels of diversity. 

**9. Identify clear and unambiguous success indicators.** These may be meaningful, numeric metrics, or may be other indicators such as customer feedback at software prototyping sessions, or results of usability testing. 

**10. Shorten feedback loops.** (These should also be thought of as learning loops.) Practices such as continuous build integration, automated testing, software prototyping, daily stand-up meetings, and short software delivery cycles are all variations on this theme. Don't underestimate the power of this suggestion. When a development team is performing one-month sprints, they suddenly learn and change things about their process that they would never have noticed or bothered with if they were taking a year or two to complete one iteration of their development lifecycle.

**11. Foster a healthy attitude towards documentation.** Hey, sometimes it helps to write things down. Sometimes pictures help. Don't make it more complicated than that. Watch out for those who tend to polarize this discussion into document everything vs. document nothing, since both of those extremes are generally disastrous. Also watch out for ceremonial approvals of documents. When 10 people have to approve everything that's been written down, that's a sure sign that no one understands any of it and no one trusts anyone else. 

An egalitarian authoring tool that includes lightweight content management -- such as a wiki -- can help here.

**12. Avoid extremes and religious movements.** In other words, [If you meet the Software Development Guru on the Road, Take Him off His Pedestal](http://www.amazon.com/gp/product/0553278320?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0553278320). Notice that I haven't used the phrase ""employee empowerment"" here anywhere -- not because it isn't implicit in much of what I've said, but because it's lately become fashionable jargon used to mean radical abdication of responsibility by management -- but there is no faster way to disempower a software development team than to have them put absolute faith in a particular author, book, manifesto, movement or institution. Learn from all of them, but place absolute faith in none of them. 

There. That's it. These things won't guarantee success -- nothing will do that -- but if followed faithfully, I sincerely believe they will result in pretty spectacular success rates, much better than industry averages. Why? Because I've seen projects and teams succeed when these elements are present, and seen them fail when they are not. And when I boil down all the collective wisdom I've heard from colleagues, authors and various distinguished bodies of knowledge over the years, these same elements show up over and over again. 

Now, there are a few interesting attributes of this list that I want to call your attention to.  

First, these items includes elements of [Lean](http://www.amazon.com/gp/product/0071392319?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0071392319), [Agile](http://www.amazon.com/gp/product/0321482751?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0321482751), the [CMMI](http://www.amazon.com/gp/product/0321279670?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0321279670) and the [PMBOK](http://www.amazon.com/gp/product/1933890517?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=1933890517).  

Second, the list is short, easy to comprehend and actionable. Long, complicated bodies of knowledge have their value, but they should fundamentally supplement this list, not replace it. And while doing all of this stuff consistently will never be easy -- what fun would that be? -- neither is it impossible or something that will take years to accomplish. 

Third -- and I think this is a big one -- none of these twelve items are exclusively or even primarily actions for developers, or process improvement professionals. Rather, all of these items require at least as much of management as they do of software developers. 

Let me say that again: *all of the items above are primarily the responsibility of management.*

In fact, based on the contents of this list, I might go so far as to assert that management tends to be the missing link in software development improvement efforts. After all, most approaches, including CMMI and Agile, tend to treat managers as at most passive sponsors of improvement efforts being worked by vendors, developers and methodologists. Implementing this list, however, will require more of management than to sit behind their desk and occasionally sign documents supporting the labors of others. In fact, implementation of this list requires management to play a very active and ongoing role in such improvement efforts.
"
Improvement	The Requirements Problem	2009-05-29	9 - Closed	Improvement, Software, Software Development	"<p>One of the great myths of software development is that we can ask our customers to give us their requirements, that they will write them down for us, and we can then successfully build software based on those documents. </p><br><br><p>Watts Humphrey, the father of the Software CMM, puts it this way, in his seminal work, <cite>Managing the Software Process</cite>:</p>
"	"One of the great myths of software development is that we can ask our customers to give us their requirements, that they will write them down for us, and we can then successfully build software based on those documents. 

[Watts Humphrey](http://en.wikipedia.org/wiki/Watts_Humphrey), the father of the Software [CMM](http://en.wikipedia.org/wiki/Capability_Maturity_Model), puts it this way, in his seminal work, <cite>[Managing the Software Process](http://www.amazon.com/gp/product/0201180952?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0201180952)</cite>:

> A common misperception is that we must start with firm requirements. There is a widespread but fallacious view that requirements are the customers' job and that development should not start until they are explicitly defined. The fact is that the demand for firm and unchanging requirements is mostly wishful thinking....

[Henry Ford](http://en.wikipedia.org/wiki/Henry_Ford) expressed a similar idea a bit more succinctly when he famously said: 

> If I had asked people what they wanted, they would have said faster horses.

[Steve Jobs](http://en.wikipedia.org/wiki/Steve_jobs), a more recent innovator, said something similar in a 1998 article in <cite>[Business Week](http://businessweek.com)</cite> magazine:

> It's really hard to design products by focus groups. A lot of times, people don't know what they want until you show it to them.

But then, for those of us who have heard of the [Edsel](http://en.wikipedia.org/wiki/Edsel) (or the [Zune](http://en.wikipedia.org/wiki/Zune), for that matter), we are also mindful of the dangers of excessive arrogance in regards to our customers' desires. As Nathaniel S. Borenstein says, in his book <cite>[Programming As If People Mattered: Friendly Programs, Software Engineering, and Other Noble Delusions](http://www.amazon.com/gp/product/0691037639?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0691037639)</cite>:

> You [the software developer] will need humility to recognize that the users are always the final and most appropriate judges of your work. Even though you're the expert in interpreting your users' comments and meeting their needs, their judgments of your work are final and without appeal.

![1959 Edsel Corsair convertible](../images/edsel.jpg)

![All three models of the Zune](../images/zunes.png)

So what is a poor software developer supposed to do?

Alan M. Davis offers good advice in his encyclopedic work, <cite>[201 Principles of Software Development](http://www.amazon.com/gp/product/0070158401?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0070158401)</cite>:

> Requirements are hard to understand and harder to specify. The wrong solution to this problem is to do a slipshod job of requirements specification, and rush ahead to design and code.... The right solution is to do whatever it takes to learn as many of the requirements as possible *now*. Do prototyping. Talk with more customers. Work for a month with a customer to get to know his or her job firsthand. Collect data. Do whatever it takes.

Although Davis also warns, in his later work <cite>[Just Enough Requirements](http://www.amazon.com/gp/product/0932633641?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0932633641)</cite>, about the dangers of going overboard here:

> If you do not pay enough attention to requirements, you endanger the project's success by introducing too much risk. If you pay too much attention to requirements, you overburden the project and raise the likelihood of being late and over-budget.

And Suzanne and James Robertson, writing in <cite>[Mastering the Requirements Process](http://www.amazon.com/gp/product/0321419499?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0321419499)</cite>, get a little closer to the Henry Ford and Steve Jobs insights:

> The requirements analyst has to inject something new into the process: his vision of what the product might be. In other words, the requirements are not simply the passive interpretation of an existing piece of work, but contain inventions that will make the work easier, better, more interesting and more pleasant.

Taking all of this wisdom into account, here are what I would consider the key points to keep in mind about requirements.

1. Software requirements must be grounded in a solid understanding of your customers and the way they see the world. 

2. Requirements analysis is a creative process that discovers or even invents new approaches to stating and addressing your customer's wants and needs. 

3. Requirements prioritization is essential, to provide focus to both your elicitation and delivery: trying to discover all possible requirements is an endless job, and creating a design that gives equal weight to all requirements is a recipe for disaster. 

4. Requirements are dynamic. Change is inevitable, and the best way to cope with this reality is to try to discern the difference between requirements that are likely to be fundamental and unchanging vs. those that are likely to be subject to the latest whims of management and users.   

5. Requirements validation requires us to show our customers what we propose to give them. 

6. A certain degree of risk is inherent in the process, and your best approach is not to try to avoid risk altogether, but to try to keep the degree of risk within acceptable levels, while also being mindful of cost and schedule. 
"
Software	The Requirements Problem	2009-05-29	9 - Closed	Improvement, Software, Software Development	"<p>One of the great myths of software development is that we can ask our customers to give us their requirements, that they will write them down for us, and we can then successfully build software based on those documents. </p><br><br><p>Watts Humphrey, the father of the Software CMM, puts it this way, in his seminal work, <cite>Managing the Software Process</cite>:</p>
"	"One of the great myths of software development is that we can ask our customers to give us their requirements, that they will write them down for us, and we can then successfully build software based on those documents. 

[Watts Humphrey](http://en.wikipedia.org/wiki/Watts_Humphrey), the father of the Software [CMM](http://en.wikipedia.org/wiki/Capability_Maturity_Model), puts it this way, in his seminal work, <cite>[Managing the Software Process](http://www.amazon.com/gp/product/0201180952?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0201180952)</cite>:

> A common misperception is that we must start with firm requirements. There is a widespread but fallacious view that requirements are the customers' job and that development should not start until they are explicitly defined. The fact is that the demand for firm and unchanging requirements is mostly wishful thinking....

[Henry Ford](http://en.wikipedia.org/wiki/Henry_Ford) expressed a similar idea a bit more succinctly when he famously said: 

> If I had asked people what they wanted, they would have said faster horses.

[Steve Jobs](http://en.wikipedia.org/wiki/Steve_jobs), a more recent innovator, said something similar in a 1998 article in <cite>[Business Week](http://businessweek.com)</cite> magazine:

> It's really hard to design products by focus groups. A lot of times, people don't know what they want until you show it to them.

But then, for those of us who have heard of the [Edsel](http://en.wikipedia.org/wiki/Edsel) (or the [Zune](http://en.wikipedia.org/wiki/Zune), for that matter), we are also mindful of the dangers of excessive arrogance in regards to our customers' desires. As Nathaniel S. Borenstein says, in his book <cite>[Programming As If People Mattered: Friendly Programs, Software Engineering, and Other Noble Delusions](http://www.amazon.com/gp/product/0691037639?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0691037639)</cite>:

> You [the software developer] will need humility to recognize that the users are always the final and most appropriate judges of your work. Even though you're the expert in interpreting your users' comments and meeting their needs, their judgments of your work are final and without appeal.

![1959 Edsel Corsair convertible](../images/edsel.jpg)

![All three models of the Zune](../images/zunes.png)

So what is a poor software developer supposed to do?

Alan M. Davis offers good advice in his encyclopedic work, <cite>[201 Principles of Software Development](http://www.amazon.com/gp/product/0070158401?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0070158401)</cite>:

> Requirements are hard to understand and harder to specify. The wrong solution to this problem is to do a slipshod job of requirements specification, and rush ahead to design and code.... The right solution is to do whatever it takes to learn as many of the requirements as possible *now*. Do prototyping. Talk with more customers. Work for a month with a customer to get to know his or her job firsthand. Collect data. Do whatever it takes.

Although Davis also warns, in his later work <cite>[Just Enough Requirements](http://www.amazon.com/gp/product/0932633641?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0932633641)</cite>, about the dangers of going overboard here:

> If you do not pay enough attention to requirements, you endanger the project's success by introducing too much risk. If you pay too much attention to requirements, you overburden the project and raise the likelihood of being late and over-budget.

And Suzanne and James Robertson, writing in <cite>[Mastering the Requirements Process](http://www.amazon.com/gp/product/0321419499?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0321419499)</cite>, get a little closer to the Henry Ford and Steve Jobs insights:

> The requirements analyst has to inject something new into the process: his vision of what the product might be. In other words, the requirements are not simply the passive interpretation of an existing piece of work, but contain inventions that will make the work easier, better, more interesting and more pleasant.

Taking all of this wisdom into account, here are what I would consider the key points to keep in mind about requirements.

1. Software requirements must be grounded in a solid understanding of your customers and the way they see the world. 

2. Requirements analysis is a creative process that discovers or even invents new approaches to stating and addressing your customer's wants and needs. 

3. Requirements prioritization is essential, to provide focus to both your elicitation and delivery: trying to discover all possible requirements is an endless job, and creating a design that gives equal weight to all requirements is a recipe for disaster. 

4. Requirements are dynamic. Change is inevitable, and the best way to cope with this reality is to try to discern the difference between requirements that are likely to be fundamental and unchanging vs. those that are likely to be subject to the latest whims of management and users.   

5. Requirements validation requires us to show our customers what we propose to give them. 

6. A certain degree of risk is inherent in the process, and your best approach is not to try to avoid risk altogether, but to try to keep the degree of risk within acceptable levels, while also being mindful of cost and schedule. 
"
Software Development	The Requirements Problem	2009-05-29	9 - Closed	Improvement, Software, Software Development	"<p>One of the great myths of software development is that we can ask our customers to give us their requirements, that they will write them down for us, and we can then successfully build software based on those documents. </p><br><br><p>Watts Humphrey, the father of the Software CMM, puts it this way, in his seminal work, <cite>Managing the Software Process</cite>:</p>
"	"One of the great myths of software development is that we can ask our customers to give us their requirements, that they will write them down for us, and we can then successfully build software based on those documents. 

[Watts Humphrey](http://en.wikipedia.org/wiki/Watts_Humphrey), the father of the Software [CMM](http://en.wikipedia.org/wiki/Capability_Maturity_Model), puts it this way, in his seminal work, <cite>[Managing the Software Process](http://www.amazon.com/gp/product/0201180952?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0201180952)</cite>:

> A common misperception is that we must start with firm requirements. There is a widespread but fallacious view that requirements are the customers' job and that development should not start until they are explicitly defined. The fact is that the demand for firm and unchanging requirements is mostly wishful thinking....

[Henry Ford](http://en.wikipedia.org/wiki/Henry_Ford) expressed a similar idea a bit more succinctly when he famously said: 

> If I had asked people what they wanted, they would have said faster horses.

[Steve Jobs](http://en.wikipedia.org/wiki/Steve_jobs), a more recent innovator, said something similar in a 1998 article in <cite>[Business Week](http://businessweek.com)</cite> magazine:

> It's really hard to design products by focus groups. A lot of times, people don't know what they want until you show it to them.

But then, for those of us who have heard of the [Edsel](http://en.wikipedia.org/wiki/Edsel) (or the [Zune](http://en.wikipedia.org/wiki/Zune), for that matter), we are also mindful of the dangers of excessive arrogance in regards to our customers' desires. As Nathaniel S. Borenstein says, in his book <cite>[Programming As If People Mattered: Friendly Programs, Software Engineering, and Other Noble Delusions](http://www.amazon.com/gp/product/0691037639?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0691037639)</cite>:

> You [the software developer] will need humility to recognize that the users are always the final and most appropriate judges of your work. Even though you're the expert in interpreting your users' comments and meeting their needs, their judgments of your work are final and without appeal.

![1959 Edsel Corsair convertible](../images/edsel.jpg)

![All three models of the Zune](../images/zunes.png)

So what is a poor software developer supposed to do?

Alan M. Davis offers good advice in his encyclopedic work, <cite>[201 Principles of Software Development](http://www.amazon.com/gp/product/0070158401?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0070158401)</cite>:

> Requirements are hard to understand and harder to specify. The wrong solution to this problem is to do a slipshod job of requirements specification, and rush ahead to design and code.... The right solution is to do whatever it takes to learn as many of the requirements as possible *now*. Do prototyping. Talk with more customers. Work for a month with a customer to get to know his or her job firsthand. Collect data. Do whatever it takes.

Although Davis also warns, in his later work <cite>[Just Enough Requirements](http://www.amazon.com/gp/product/0932633641?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0932633641)</cite>, about the dangers of going overboard here:

> If you do not pay enough attention to requirements, you endanger the project's success by introducing too much risk. If you pay too much attention to requirements, you overburden the project and raise the likelihood of being late and over-budget.

And Suzanne and James Robertson, writing in <cite>[Mastering the Requirements Process](http://www.amazon.com/gp/product/0321419499?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0321419499)</cite>, get a little closer to the Henry Ford and Steve Jobs insights:

> The requirements analyst has to inject something new into the process: his vision of what the product might be. In other words, the requirements are not simply the passive interpretation of an existing piece of work, but contain inventions that will make the work easier, better, more interesting and more pleasant.

Taking all of this wisdom into account, here are what I would consider the key points to keep in mind about requirements.

1. Software requirements must be grounded in a solid understanding of your customers and the way they see the world. 

2. Requirements analysis is a creative process that discovers or even invents new approaches to stating and addressing your customer's wants and needs. 

3. Requirements prioritization is essential, to provide focus to both your elicitation and delivery: trying to discover all possible requirements is an endless job, and creating a design that gives equal weight to all requirements is a recipe for disaster. 

4. Requirements are dynamic. Change is inevitable, and the best way to cope with this reality is to try to discern the difference between requirements that are likely to be fundamental and unchanging vs. those that are likely to be subject to the latest whims of management and users.   

5. Requirements validation requires us to show our customers what we propose to give them. 

6. A certain degree of risk is inherent in the process, and your best approach is not to try to avoid risk altogether, but to try to keep the degree of risk within acceptable levels, while also being mindful of cost and schedule. 
"
Jazz	Take the Agile Train	2009-06-06	9 - Closed	Jazz, Lean and Agile, Music	"<p>I noticed this week that jazz trumpeter and composer Wynton Marsalis was awarded an honorary Doctor of Music degree from Harvard University. </p><br><br><p>This got me thinking about some of the notable messages from his and Geoffrey Ward&#8217;s recent book <cite>Moving to Higher Ground: How Jazz Can Change Your Life</cite>.</p><br><br><p>Dr. Marsalis is a philosopher as well as a musician, and in this book he and Ward have this to say about jazz and democracy:</p>
"	"I noticed this week that jazz trumpeter and composer Wynton Marsalis was awarded an honorary [Doctor of Music degree][harvard] from Harvard University. 

![Wynton Marsalis][harvard-pic]

This got me thinking about some of the notable messages from his and Geoffrey Ward's recent book <cite>[Moving to Higher Ground: How Jazz Can Change Your Life][marsalis-2008]</cite>.

Dr. Marsalis is a philosopher as well as a musician, and in this book he and Ward have this to say about jazz and democracy:

> Jazz is the most flexible art form ever because it believes in the good taste of individuals. It believes in our ability to make reasonable choices. It takes a chance on our decision-making skills instead of legislating our freedom away with written restrictions and restrictive hierarchies. In jazz, the size of your heart and your ability to play determine your position in the band. The philosophy of jazz is rooted in the elevation and enrichment of people, plain ol' folks.

I mention all of this in a forum on software development because I think this same egalitarian spirit also runs through much of the Agile movement. Just as jazz represents a shift away from large teams that require scores and conductors and rigid musical rules, agile in some sense represents a movement away from the forced marches of large armies of developers working to exhaustive, detailed project schedules. 

Marsalis and Ward also emphasize the importance of group dynamics within the art form and I think this too reflects part of the underlying agile philosophy:

> Swing -- the dance and the music -- bespeaks the flexible nature of American life. In jazz, the bass walks a note on every beat. The drummer rides the cymbal or plays brushes on every beat. And everybody else invents melodies and sounds that sway with, against, and upside every beat. Every beat requires musicians to reassess their relationships to one another. This is what makes swinging so challenging. You are forced to be constantly aware of other people's feelings.

Substitute ""the sprint"" or ""the daily meeting"" for ""the beat"" in the words above, and they could easily be describing an agile software development team. 

As a matter of fact, if we change a few words in the <cite>[Manifesto for Agile Software Development][agile-manifesto]</cite>, it could easily become <cite>The Jazz Manifesto</cite>:

<p style=""text-align: center;"">We are uncovering better ways of playing music by doing it and helping others do it. Through this work we have come to value:</p>

<p style=""text-align: center;""><span style=""font-size: large;"">Individuals and interactions</span> over rules and hierarchies <br />
<span style=""font-size: large;"">Live music</span> over comprehensive musical notation <br />
<span style=""font-size: large;"">Audience interaction</span> over contractual commitments <br />
<span style=""font-size: large;"">Responding to changes</span> over following a score</p>

<p style=""text-align: center;"">That is, while there is value in the items on the right, we value the items on the left more. </p>

So what's my message here -- that you have to love jazz in order to succeed at agile? Well, no, not really (although it certainly couldn't hurt). But just as Marsalis emphasizes that there is an underlying philosophy and feeling for people that makes jazz work, it's important to remember that agile is more than a set of practices and deliverables: it also represents a set of beliefs about people, the way they relate to their work, and the ways they work best together. 

So just as you could teach any musician the notes to ""[A Love Supreme][a-love-supreme],"" but they still wouldn't be playing jazz, it takes more than a different lifecycle and a new set of practices to make a successful transition to agile. 

In particular, I think jazz and agile both emphasize the following:

1. The need for flexibility/agility as a means of adapting quickly and responsively to a dynamic environment.
2. That players/practitioners/developers, as the people most directly shaping the output of the work being done, have the most to contribute to improvements in their respective forms, and deserve the highest respect for their work.
3. That the work is inherently creative, and cannot be managed as if is transactional.
4. That the work is best done by interdependent teams in which all are dependent on each other for success. 
5. That teams will manage themselves to optimize their overall output in a way that makes best use of the various talents available on the team.
6. That freedom of self-expression is balanced by the judgments of fellow team members and the customer/audience.
7. The importance of the central discipline of a regular rhythm to the work being done.
8. That the freedom to make mistakes, combined with short feedback loops from teammates and customers, are essential to learning, and that this sort of learning will have a more positive long-term influence on player/practitioner behavior than sets of rigid rules and management hierarchies. 

So maybe it was Agility that the [Duke][duke] was talking about when he was playing ""[Take the 'A' Train][a-train]""!

For those interested in learning more about Marsalis, jazz and technology, see the [YouTube video][marsalis-google] of Marsalis and Ward being interviewed at Google. 

[agile-manifesto]: http://agilemanifesto.org/
[a-love-supreme]: http://en.wikipedia.org/wiki/A_Love_Supreme
[a-train]: http://en.wikipedia.org/wiki/Take_the_a_train
[duke]: http://en.wikipedia.org/wiki/Duke_Ellington
[harvard]: http://www.boston.com/news/local/breaking_news/2009/06/amid_pomp_music.html
[harvard-pic]: http://www.boston.com/news/local/breaking_news/marsalis_harvard_graduation_060409.jpg
[marsalis-google]: http://www.youtube.com/watch?v=_qsVApXwCqA
[marsalis-2008]: http://www.amazon.com/gp/product/1400060788?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=1400060788
"
Lean and Agile	Take the Agile Train	2009-06-06	9 - Closed	Jazz, Lean and Agile, Music	"<p>I noticed this week that jazz trumpeter and composer Wynton Marsalis was awarded an honorary Doctor of Music degree from Harvard University. </p><br><br><p>This got me thinking about some of the notable messages from his and Geoffrey Ward&#8217;s recent book <cite>Moving to Higher Ground: How Jazz Can Change Your Life</cite>.</p><br><br><p>Dr. Marsalis is a philosopher as well as a musician, and in this book he and Ward have this to say about jazz and democracy:</p>
"	"I noticed this week that jazz trumpeter and composer Wynton Marsalis was awarded an honorary [Doctor of Music degree][harvard] from Harvard University. 

![Wynton Marsalis][harvard-pic]

This got me thinking about some of the notable messages from his and Geoffrey Ward's recent book <cite>[Moving to Higher Ground: How Jazz Can Change Your Life][marsalis-2008]</cite>.

Dr. Marsalis is a philosopher as well as a musician, and in this book he and Ward have this to say about jazz and democracy:

> Jazz is the most flexible art form ever because it believes in the good taste of individuals. It believes in our ability to make reasonable choices. It takes a chance on our decision-making skills instead of legislating our freedom away with written restrictions and restrictive hierarchies. In jazz, the size of your heart and your ability to play determine your position in the band. The philosophy of jazz is rooted in the elevation and enrichment of people, plain ol' folks.

I mention all of this in a forum on software development because I think this same egalitarian spirit also runs through much of the Agile movement. Just as jazz represents a shift away from large teams that require scores and conductors and rigid musical rules, agile in some sense represents a movement away from the forced marches of large armies of developers working to exhaustive, detailed project schedules. 

Marsalis and Ward also emphasize the importance of group dynamics within the art form and I think this too reflects part of the underlying agile philosophy:

> Swing -- the dance and the music -- bespeaks the flexible nature of American life. In jazz, the bass walks a note on every beat. The drummer rides the cymbal or plays brushes on every beat. And everybody else invents melodies and sounds that sway with, against, and upside every beat. Every beat requires musicians to reassess their relationships to one another. This is what makes swinging so challenging. You are forced to be constantly aware of other people's feelings.

Substitute ""the sprint"" or ""the daily meeting"" for ""the beat"" in the words above, and they could easily be describing an agile software development team. 

As a matter of fact, if we change a few words in the <cite>[Manifesto for Agile Software Development][agile-manifesto]</cite>, it could easily become <cite>The Jazz Manifesto</cite>:

<p style=""text-align: center;"">We are uncovering better ways of playing music by doing it and helping others do it. Through this work we have come to value:</p>

<p style=""text-align: center;""><span style=""font-size: large;"">Individuals and interactions</span> over rules and hierarchies <br />
<span style=""font-size: large;"">Live music</span> over comprehensive musical notation <br />
<span style=""font-size: large;"">Audience interaction</span> over contractual commitments <br />
<span style=""font-size: large;"">Responding to changes</span> over following a score</p>

<p style=""text-align: center;"">That is, while there is value in the items on the right, we value the items on the left more. </p>

So what's my message here -- that you have to love jazz in order to succeed at agile? Well, no, not really (although it certainly couldn't hurt). But just as Marsalis emphasizes that there is an underlying philosophy and feeling for people that makes jazz work, it's important to remember that agile is more than a set of practices and deliverables: it also represents a set of beliefs about people, the way they relate to their work, and the ways they work best together. 

So just as you could teach any musician the notes to ""[A Love Supreme][a-love-supreme],"" but they still wouldn't be playing jazz, it takes more than a different lifecycle and a new set of practices to make a successful transition to agile. 

In particular, I think jazz and agile both emphasize the following:

1. The need for flexibility/agility as a means of adapting quickly and responsively to a dynamic environment.
2. That players/practitioners/developers, as the people most directly shaping the output of the work being done, have the most to contribute to improvements in their respective forms, and deserve the highest respect for their work.
3. That the work is inherently creative, and cannot be managed as if is transactional.
4. That the work is best done by interdependent teams in which all are dependent on each other for success. 
5. That teams will manage themselves to optimize their overall output in a way that makes best use of the various talents available on the team.
6. That freedom of self-expression is balanced by the judgments of fellow team members and the customer/audience.
7. The importance of the central discipline of a regular rhythm to the work being done.
8. That the freedom to make mistakes, combined with short feedback loops from teammates and customers, are essential to learning, and that this sort of learning will have a more positive long-term influence on player/practitioner behavior than sets of rigid rules and management hierarchies. 

So maybe it was Agility that the [Duke][duke] was talking about when he was playing ""[Take the 'A' Train][a-train]""!

For those interested in learning more about Marsalis, jazz and technology, see the [YouTube video][marsalis-google] of Marsalis and Ward being interviewed at Google. 

[agile-manifesto]: http://agilemanifesto.org/
[a-love-supreme]: http://en.wikipedia.org/wiki/A_Love_Supreme
[a-train]: http://en.wikipedia.org/wiki/Take_the_a_train
[duke]: http://en.wikipedia.org/wiki/Duke_Ellington
[harvard]: http://www.boston.com/news/local/breaking_news/2009/06/amid_pomp_music.html
[harvard-pic]: http://www.boston.com/news/local/breaking_news/marsalis_harvard_graduation_060409.jpg
[marsalis-google]: http://www.youtube.com/watch?v=_qsVApXwCqA
[marsalis-2008]: http://www.amazon.com/gp/product/1400060788?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=1400060788
"
Music	Take the Agile Train	2009-06-06	9 - Closed	Jazz, Lean and Agile, Music	"<p>I noticed this week that jazz trumpeter and composer Wynton Marsalis was awarded an honorary Doctor of Music degree from Harvard University. </p><br><br><p>This got me thinking about some of the notable messages from his and Geoffrey Ward&#8217;s recent book <cite>Moving to Higher Ground: How Jazz Can Change Your Life</cite>.</p><br><br><p>Dr. Marsalis is a philosopher as well as a musician, and in this book he and Ward have this to say about jazz and democracy:</p>
"	"I noticed this week that jazz trumpeter and composer Wynton Marsalis was awarded an honorary [Doctor of Music degree][harvard] from Harvard University. 

![Wynton Marsalis][harvard-pic]

This got me thinking about some of the notable messages from his and Geoffrey Ward's recent book <cite>[Moving to Higher Ground: How Jazz Can Change Your Life][marsalis-2008]</cite>.

Dr. Marsalis is a philosopher as well as a musician, and in this book he and Ward have this to say about jazz and democracy:

> Jazz is the most flexible art form ever because it believes in the good taste of individuals. It believes in our ability to make reasonable choices. It takes a chance on our decision-making skills instead of legislating our freedom away with written restrictions and restrictive hierarchies. In jazz, the size of your heart and your ability to play determine your position in the band. The philosophy of jazz is rooted in the elevation and enrichment of people, plain ol' folks.

I mention all of this in a forum on software development because I think this same egalitarian spirit also runs through much of the Agile movement. Just as jazz represents a shift away from large teams that require scores and conductors and rigid musical rules, agile in some sense represents a movement away from the forced marches of large armies of developers working to exhaustive, detailed project schedules. 

Marsalis and Ward also emphasize the importance of group dynamics within the art form and I think this too reflects part of the underlying agile philosophy:

> Swing -- the dance and the music -- bespeaks the flexible nature of American life. In jazz, the bass walks a note on every beat. The drummer rides the cymbal or plays brushes on every beat. And everybody else invents melodies and sounds that sway with, against, and upside every beat. Every beat requires musicians to reassess their relationships to one another. This is what makes swinging so challenging. You are forced to be constantly aware of other people's feelings.

Substitute ""the sprint"" or ""the daily meeting"" for ""the beat"" in the words above, and they could easily be describing an agile software development team. 

As a matter of fact, if we change a few words in the <cite>[Manifesto for Agile Software Development][agile-manifesto]</cite>, it could easily become <cite>The Jazz Manifesto</cite>:

<p style=""text-align: center;"">We are uncovering better ways of playing music by doing it and helping others do it. Through this work we have come to value:</p>

<p style=""text-align: center;""><span style=""font-size: large;"">Individuals and interactions</span> over rules and hierarchies <br />
<span style=""font-size: large;"">Live music</span> over comprehensive musical notation <br />
<span style=""font-size: large;"">Audience interaction</span> over contractual commitments <br />
<span style=""font-size: large;"">Responding to changes</span> over following a score</p>

<p style=""text-align: center;"">That is, while there is value in the items on the right, we value the items on the left more. </p>

So what's my message here -- that you have to love jazz in order to succeed at agile? Well, no, not really (although it certainly couldn't hurt). But just as Marsalis emphasizes that there is an underlying philosophy and feeling for people that makes jazz work, it's important to remember that agile is more than a set of practices and deliverables: it also represents a set of beliefs about people, the way they relate to their work, and the ways they work best together. 

So just as you could teach any musician the notes to ""[A Love Supreme][a-love-supreme],"" but they still wouldn't be playing jazz, it takes more than a different lifecycle and a new set of practices to make a successful transition to agile. 

In particular, I think jazz and agile both emphasize the following:

1. The need for flexibility/agility as a means of adapting quickly and responsively to a dynamic environment.
2. That players/practitioners/developers, as the people most directly shaping the output of the work being done, have the most to contribute to improvements in their respective forms, and deserve the highest respect for their work.
3. That the work is inherently creative, and cannot be managed as if is transactional.
4. That the work is best done by interdependent teams in which all are dependent on each other for success. 
5. That teams will manage themselves to optimize their overall output in a way that makes best use of the various talents available on the team.
6. That freedom of self-expression is balanced by the judgments of fellow team members and the customer/audience.
7. The importance of the central discipline of a regular rhythm to the work being done.
8. That the freedom to make mistakes, combined with short feedback loops from teammates and customers, are essential to learning, and that this sort of learning will have a more positive long-term influence on player/practitioner behavior than sets of rigid rules and management hierarchies. 

So maybe it was Agility that the [Duke][duke] was talking about when he was playing ""[Take the 'A' Train][a-train]""!

For those interested in learning more about Marsalis, jazz and technology, see the [YouTube video][marsalis-google] of Marsalis and Ward being interviewed at Google. 

[agile-manifesto]: http://agilemanifesto.org/
[a-love-supreme]: http://en.wikipedia.org/wiki/A_Love_Supreme
[a-train]: http://en.wikipedia.org/wiki/Take_the_a_train
[duke]: http://en.wikipedia.org/wiki/Duke_Ellington
[harvard]: http://www.boston.com/news/local/breaking_news/2009/06/amid_pomp_music.html
[harvard-pic]: http://www.boston.com/news/local/breaking_news/marsalis_harvard_graduation_060409.jpg
[marsalis-google]: http://www.youtube.com/watch?v=_qsVApXwCqA
[marsalis-2008]: http://www.amazon.com/gp/product/1400060788?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=1400060788
"
Culture	The Watery Ketchup Stops Here	2009-06-12	9 - Closed	Culture, Leadership, Lean and Agile	"<p>Entrepreneurs sometimes get a bad rap. </p><br><br><p>Anybody recognize this gentleman?</p><br><br><p>A few years before the iPod, he developed and marketed a portable computer about the size and heft of a sewing machine, and sold it under his own name. It ran what was then the most popular operating system for home computers, and came with a slew of software, including a Basic compiler from what was then a relatively small startup in the great Northwest. </p><br><br><p>It was a revolutionary computer in many ways, and achieved some notable short-term success. However, its creator never made any money from it, and it was driven out of business by its competitors in a few years, which is why the guy who marketed that pre-Visual Basic compiler is now a lot better known than Adam Osborne. </p><br><br><p>This is our usual image of the entrepreneur: the restless loner, always willing to risk it all on one more roll of the dice, one last long shot, one final chance to grab the golden ring. </p><br><br><p>I stumbled across a wonderful book recently, <cite>The Empowered Manager: Positive Political Skills at Work</cite>, by Peter Block, and in it he talks about choosing the entrepreneurial path over the bureaucratic path when working within large organizations. </p>
"	"Entrepreneurs sometimes get a bad rap. 

Anybody recognize this gentleman?

![???](../images/adamosborne.jpg)

A few years before the iPod, he developed and marketed a portable computer about the size and heft of a sewing machine, and sold it under his own name. It ran what was then the [most popular operating system for home computers](http://en.wikipedia.org/wiki/CP/M), and came with a slew of software, including a Basic compiler from what was then a relatively [small startup in the great Northwest](http://www.microsoft.com/). 

![The Osborne 1](../images/osborne1.jpg)

It was a revolutionary computer in many ways, and achieved some notable short-term success. However, its creator never made any money from it, and it was driven out of business by its competitors in a few years, which is why the [guy who marketed that pre-Visual Basic compiler](http://en.wikipedia.org/wiki/Bill_Gates) is now a lot better known than Adam Osborne. 

This is our usual image of the entrepreneur: the restless loner, always willing to risk it all on one more roll of the dice, one last long shot, one final chance to grab the golden ring. 

I stumbled across a wonderful book recently, [<cite>The Empowered Manager: Positive Political Skills at Work</cite>](http://www.amazon.com/gp/product/1555422659?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=1555422659), by [Peter Block](http://www.peterblock.com/), and in it he talks about choosing the entrepreneurial path over the bureaucratic path when working within large organizations. 

Block tells a wonderful story of himself working as a young consultant, trying to help a regional chain of supermarkets compete successfully in a changing marketplace. The approach they took was to grant more power to the lower levels of the organization, to encourage individual store managers to take more personal responsibility for the success of their stores. 

The story is an amusing one. They start with the store managers, launch a change campaign at their level, and meet with limited success. When they meet with the store managers to find out what is going on, they complain of resistance from the next level up. 

Alright. The team regroups, designs a new change campaign to focus on the regional managers and, after considerable further investment of time and money, they discover that this campaign too has had disappointing results. They meet with the regional managers, interview them to discover the impediments to change and -- guess what -- they're not the problem, it's their managers. 

You can probably get a sense of where this is going. Sure enough, Block finally ends up in the office of the president of the corporation. His narrative here is too good to let it suffer from my attempts to paraphrase:

> I was especially eager for this meeting since it would be my first real opportunity to deal directly on an intimate basis with the person in the seat of power in a major corporation. ... If change had to come from the top, I was meeting with the right person. 

> The meeting was scheduled, and I arrived eager and dressed in my newly pressed power suit. After a little light chatter about the weather and the ball scores, I mentioned that the purpose of this meeting was to talk about how he could personally support the change effort we were engaged in. He said he had met with the chairman of the board of directors earlier that morning and the chairman brought up a series of minor issues that were a real nuisance to have to deal with. I suggested perhaps that Hilliard, the president, could support our program by personally getting out in the stores more. Hilliard said that the chairman was not giving him all the support he needed. I urged that Hilliard could perhaps allow certain merchandising decisions to be made at the district level instead of at the headquarters office in Somverville, Massachusetts. He said he was also having a hard time with certain analysts on Wall Street. They refused to acknowledge the progress the new management was making, and the stock price remained depressed. I suggested we might hold a team-building session with the top thirty people. He stated that not only were the chairman of the board and the bankers giving him a hard time, but he was frustrated with the ketchup in the company cafeteria. 

> It was at this point that I began to recognize that the conversation was not going the way that I had anticipated. I asked him to tell me a little more about the ketchup in the company cafeteria. He said it was too thin and watery. I acknowledged that [watery ketchup could be deeply disappointing](http://picasaweb.google.com/lh/photo/l-8eM4L_48K4iMJMChNIyQ), thinking to myself that I had just stepped onto the set of a [Woody Allen](http://images.greencine.com/images/movies/amg/dvd/cov150/drt000/t071/t07118z16ue.jpg) movie. Hilliard began to get a little irritated with me and claimed I did not understand the point he was making. He was right. I noticed that he was wearing shoes with a clay-colored tint to them. He explained that the ketchup in the company cafeteria was a Finast private label brand, and two weeks ago he had suggested that the product needed to be thickened to compete effectively with the name brand products. He was constantly amazed at the effort it took to bring about even the smallest change in this old-line company. He thought that at least someone could have thickened the ketchup at his table in the company cafeteria, even if the product on the shelves remained watery. 

> I was stunned. I had thought that the president of a company could have it any way he or she wanted it. I had pursued the source of power all the way up the organization, and here the chief executive officer was telling me he was caught in the middle like the rest of us. 

Block's experience mirrors my own. When I talk to employees about making their software development more lean and agile, they often tell me that they would love to, but their bosses won't let them, or their management won't buy them the tools they need to make it possible. When I talk to people trying to promote internal standards, they often suggest we ask our corporate leaders to issue an official edict that will force people to follow the standards. And when I talk to leaders, they often ask for suggestions on how we can get people to follow the guidance that has already been dispensed. 

So who has the power to make change happen inside of large organizations? The truth, of course, is that:

1. None of us has absolute power (no matter what our title).
2. All of us have some power. 
3. All of us operate within certain constraints. 
4. None of us are absolutely certain of how much power we have.
5. There is always a degree or risk involved with exercising our power. 

So where does that leave us? Block says that all of us have essentially three choices to make that determine to what degree we will be entrepreneurial rather than bureaucratic:

> We choose between Maintenance and Greatness.  
> We choose between Caution and Courage.   
> We choose between Dependency and Autonomy.

I had the privilege of having lunch yesterday with a group of corporate entrepreneurs. This is a group that has been working together to create and deliver an internal course on Agile software development. Five years ago, when some of them started employing Agile at work, they had to fly under the corporate radar in order to get started. This year, Agile has been officially recognized as something management would like to see more of -- with the result that some members of the group now have people calling them to ask if they can get credit for being Agile without really having to do anything different. 

At no time during our lunch did I hear anyone use the words Greatness, Courage or Autonomy. And yet, over and over again, as we ate and chatted and talked about their Agile accomplishments, I heard the same themes: they were not content to keep doing the same things over and over again; they were excited to try something new that would make them and their teammates more effective; they were willing to take reasonable risks; they were willing to act independently, while still taking full responsibility for their actions. 

More and more, as I engage in discussions about what it takes to change corporate culture, it seems to me that this is often the key issue: how many of us are willing to stand up and say these magic words...

The watery ketchup stops here.
"
Leadership	The Watery Ketchup Stops Here	2009-06-12	9 - Closed	Culture, Leadership, Lean and Agile	"<p>Entrepreneurs sometimes get a bad rap. </p><br><br><p>Anybody recognize this gentleman?</p><br><br><p>A few years before the iPod, he developed and marketed a portable computer about the size and heft of a sewing machine, and sold it under his own name. It ran what was then the most popular operating system for home computers, and came with a slew of software, including a Basic compiler from what was then a relatively small startup in the great Northwest. </p><br><br><p>It was a revolutionary computer in many ways, and achieved some notable short-term success. However, its creator never made any money from it, and it was driven out of business by its competitors in a few years, which is why the guy who marketed that pre-Visual Basic compiler is now a lot better known than Adam Osborne. </p><br><br><p>This is our usual image of the entrepreneur: the restless loner, always willing to risk it all on one more roll of the dice, one last long shot, one final chance to grab the golden ring. </p><br><br><p>I stumbled across a wonderful book recently, <cite>The Empowered Manager: Positive Political Skills at Work</cite>, by Peter Block, and in it he talks about choosing the entrepreneurial path over the bureaucratic path when working within large organizations. </p>
"	"Entrepreneurs sometimes get a bad rap. 

Anybody recognize this gentleman?

![???](../images/adamosborne.jpg)

A few years before the iPod, he developed and marketed a portable computer about the size and heft of a sewing machine, and sold it under his own name. It ran what was then the [most popular operating system for home computers](http://en.wikipedia.org/wiki/CP/M), and came with a slew of software, including a Basic compiler from what was then a relatively [small startup in the great Northwest](http://www.microsoft.com/). 

![The Osborne 1](../images/osborne1.jpg)

It was a revolutionary computer in many ways, and achieved some notable short-term success. However, its creator never made any money from it, and it was driven out of business by its competitors in a few years, which is why the [guy who marketed that pre-Visual Basic compiler](http://en.wikipedia.org/wiki/Bill_Gates) is now a lot better known than Adam Osborne. 

This is our usual image of the entrepreneur: the restless loner, always willing to risk it all on one more roll of the dice, one last long shot, one final chance to grab the golden ring. 

I stumbled across a wonderful book recently, [<cite>The Empowered Manager: Positive Political Skills at Work</cite>](http://www.amazon.com/gp/product/1555422659?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=1555422659), by [Peter Block](http://www.peterblock.com/), and in it he talks about choosing the entrepreneurial path over the bureaucratic path when working within large organizations. 

Block tells a wonderful story of himself working as a young consultant, trying to help a regional chain of supermarkets compete successfully in a changing marketplace. The approach they took was to grant more power to the lower levels of the organization, to encourage individual store managers to take more personal responsibility for the success of their stores. 

The story is an amusing one. They start with the store managers, launch a change campaign at their level, and meet with limited success. When they meet with the store managers to find out what is going on, they complain of resistance from the next level up. 

Alright. The team regroups, designs a new change campaign to focus on the regional managers and, after considerable further investment of time and money, they discover that this campaign too has had disappointing results. They meet with the regional managers, interview them to discover the impediments to change and -- guess what -- they're not the problem, it's their managers. 

You can probably get a sense of where this is going. Sure enough, Block finally ends up in the office of the president of the corporation. His narrative here is too good to let it suffer from my attempts to paraphrase:

> I was especially eager for this meeting since it would be my first real opportunity to deal directly on an intimate basis with the person in the seat of power in a major corporation. ... If change had to come from the top, I was meeting with the right person. 

> The meeting was scheduled, and I arrived eager and dressed in my newly pressed power suit. After a little light chatter about the weather and the ball scores, I mentioned that the purpose of this meeting was to talk about how he could personally support the change effort we were engaged in. He said he had met with the chairman of the board of directors earlier that morning and the chairman brought up a series of minor issues that were a real nuisance to have to deal with. I suggested perhaps that Hilliard, the president, could support our program by personally getting out in the stores more. Hilliard said that the chairman was not giving him all the support he needed. I urged that Hilliard could perhaps allow certain merchandising decisions to be made at the district level instead of at the headquarters office in Somverville, Massachusetts. He said he was also having a hard time with certain analysts on Wall Street. They refused to acknowledge the progress the new management was making, and the stock price remained depressed. I suggested we might hold a team-building session with the top thirty people. He stated that not only were the chairman of the board and the bankers giving him a hard time, but he was frustrated with the ketchup in the company cafeteria. 

> It was at this point that I began to recognize that the conversation was not going the way that I had anticipated. I asked him to tell me a little more about the ketchup in the company cafeteria. He said it was too thin and watery. I acknowledged that [watery ketchup could be deeply disappointing](http://picasaweb.google.com/lh/photo/l-8eM4L_48K4iMJMChNIyQ), thinking to myself that I had just stepped onto the set of a [Woody Allen](http://images.greencine.com/images/movies/amg/dvd/cov150/drt000/t071/t07118z16ue.jpg) movie. Hilliard began to get a little irritated with me and claimed I did not understand the point he was making. He was right. I noticed that he was wearing shoes with a clay-colored tint to them. He explained that the ketchup in the company cafeteria was a Finast private label brand, and two weeks ago he had suggested that the product needed to be thickened to compete effectively with the name brand products. He was constantly amazed at the effort it took to bring about even the smallest change in this old-line company. He thought that at least someone could have thickened the ketchup at his table in the company cafeteria, even if the product on the shelves remained watery. 

> I was stunned. I had thought that the president of a company could have it any way he or she wanted it. I had pursued the source of power all the way up the organization, and here the chief executive officer was telling me he was caught in the middle like the rest of us. 

Block's experience mirrors my own. When I talk to employees about making their software development more lean and agile, they often tell me that they would love to, but their bosses won't let them, or their management won't buy them the tools they need to make it possible. When I talk to people trying to promote internal standards, they often suggest we ask our corporate leaders to issue an official edict that will force people to follow the standards. And when I talk to leaders, they often ask for suggestions on how we can get people to follow the guidance that has already been dispensed. 

So who has the power to make change happen inside of large organizations? The truth, of course, is that:

1. None of us has absolute power (no matter what our title).
2. All of us have some power. 
3. All of us operate within certain constraints. 
4. None of us are absolutely certain of how much power we have.
5. There is always a degree or risk involved with exercising our power. 

So where does that leave us? Block says that all of us have essentially three choices to make that determine to what degree we will be entrepreneurial rather than bureaucratic:

> We choose between Maintenance and Greatness.  
> We choose between Caution and Courage.   
> We choose between Dependency and Autonomy.

I had the privilege of having lunch yesterday with a group of corporate entrepreneurs. This is a group that has been working together to create and deliver an internal course on Agile software development. Five years ago, when some of them started employing Agile at work, they had to fly under the corporate radar in order to get started. This year, Agile has been officially recognized as something management would like to see more of -- with the result that some members of the group now have people calling them to ask if they can get credit for being Agile without really having to do anything different. 

At no time during our lunch did I hear anyone use the words Greatness, Courage or Autonomy. And yet, over and over again, as we ate and chatted and talked about their Agile accomplishments, I heard the same themes: they were not content to keep doing the same things over and over again; they were excited to try something new that would make them and their teammates more effective; they were willing to take reasonable risks; they were willing to act independently, while still taking full responsibility for their actions. 

More and more, as I engage in discussions about what it takes to change corporate culture, it seems to me that this is often the key issue: how many of us are willing to stand up and say these magic words...

The watery ketchup stops here.
"
Lean and Agile	The Watery Ketchup Stops Here	2009-06-12	9 - Closed	Culture, Leadership, Lean and Agile	"<p>Entrepreneurs sometimes get a bad rap. </p><br><br><p>Anybody recognize this gentleman?</p><br><br><p>A few years before the iPod, he developed and marketed a portable computer about the size and heft of a sewing machine, and sold it under his own name. It ran what was then the most popular operating system for home computers, and came with a slew of software, including a Basic compiler from what was then a relatively small startup in the great Northwest. </p><br><br><p>It was a revolutionary computer in many ways, and achieved some notable short-term success. However, its creator never made any money from it, and it was driven out of business by its competitors in a few years, which is why the guy who marketed that pre-Visual Basic compiler is now a lot better known than Adam Osborne. </p><br><br><p>This is our usual image of the entrepreneur: the restless loner, always willing to risk it all on one more roll of the dice, one last long shot, one final chance to grab the golden ring. </p><br><br><p>I stumbled across a wonderful book recently, <cite>The Empowered Manager: Positive Political Skills at Work</cite>, by Peter Block, and in it he talks about choosing the entrepreneurial path over the bureaucratic path when working within large organizations. </p>
"	"Entrepreneurs sometimes get a bad rap. 

Anybody recognize this gentleman?

![???](../images/adamosborne.jpg)

A few years before the iPod, he developed and marketed a portable computer about the size and heft of a sewing machine, and sold it under his own name. It ran what was then the [most popular operating system for home computers](http://en.wikipedia.org/wiki/CP/M), and came with a slew of software, including a Basic compiler from what was then a relatively [small startup in the great Northwest](http://www.microsoft.com/). 

![The Osborne 1](../images/osborne1.jpg)

It was a revolutionary computer in many ways, and achieved some notable short-term success. However, its creator never made any money from it, and it was driven out of business by its competitors in a few years, which is why the [guy who marketed that pre-Visual Basic compiler](http://en.wikipedia.org/wiki/Bill_Gates) is now a lot better known than Adam Osborne. 

This is our usual image of the entrepreneur: the restless loner, always willing to risk it all on one more roll of the dice, one last long shot, one final chance to grab the golden ring. 

I stumbled across a wonderful book recently, [<cite>The Empowered Manager: Positive Political Skills at Work</cite>](http://www.amazon.com/gp/product/1555422659?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=1555422659), by [Peter Block](http://www.peterblock.com/), and in it he talks about choosing the entrepreneurial path over the bureaucratic path when working within large organizations. 

Block tells a wonderful story of himself working as a young consultant, trying to help a regional chain of supermarkets compete successfully in a changing marketplace. The approach they took was to grant more power to the lower levels of the organization, to encourage individual store managers to take more personal responsibility for the success of their stores. 

The story is an amusing one. They start with the store managers, launch a change campaign at their level, and meet with limited success. When they meet with the store managers to find out what is going on, they complain of resistance from the next level up. 

Alright. The team regroups, designs a new change campaign to focus on the regional managers and, after considerable further investment of time and money, they discover that this campaign too has had disappointing results. They meet with the regional managers, interview them to discover the impediments to change and -- guess what -- they're not the problem, it's their managers. 

You can probably get a sense of where this is going. Sure enough, Block finally ends up in the office of the president of the corporation. His narrative here is too good to let it suffer from my attempts to paraphrase:

> I was especially eager for this meeting since it would be my first real opportunity to deal directly on an intimate basis with the person in the seat of power in a major corporation. ... If change had to come from the top, I was meeting with the right person. 

> The meeting was scheduled, and I arrived eager and dressed in my newly pressed power suit. After a little light chatter about the weather and the ball scores, I mentioned that the purpose of this meeting was to talk about how he could personally support the change effort we were engaged in. He said he had met with the chairman of the board of directors earlier that morning and the chairman brought up a series of minor issues that were a real nuisance to have to deal with. I suggested perhaps that Hilliard, the president, could support our program by personally getting out in the stores more. Hilliard said that the chairman was not giving him all the support he needed. I urged that Hilliard could perhaps allow certain merchandising decisions to be made at the district level instead of at the headquarters office in Somverville, Massachusetts. He said he was also having a hard time with certain analysts on Wall Street. They refused to acknowledge the progress the new management was making, and the stock price remained depressed. I suggested we might hold a team-building session with the top thirty people. He stated that not only were the chairman of the board and the bankers giving him a hard time, but he was frustrated with the ketchup in the company cafeteria. 

> It was at this point that I began to recognize that the conversation was not going the way that I had anticipated. I asked him to tell me a little more about the ketchup in the company cafeteria. He said it was too thin and watery. I acknowledged that [watery ketchup could be deeply disappointing](http://picasaweb.google.com/lh/photo/l-8eM4L_48K4iMJMChNIyQ), thinking to myself that I had just stepped onto the set of a [Woody Allen](http://images.greencine.com/images/movies/amg/dvd/cov150/drt000/t071/t07118z16ue.jpg) movie. Hilliard began to get a little irritated with me and claimed I did not understand the point he was making. He was right. I noticed that he was wearing shoes with a clay-colored tint to them. He explained that the ketchup in the company cafeteria was a Finast private label brand, and two weeks ago he had suggested that the product needed to be thickened to compete effectively with the name brand products. He was constantly amazed at the effort it took to bring about even the smallest change in this old-line company. He thought that at least someone could have thickened the ketchup at his table in the company cafeteria, even if the product on the shelves remained watery. 

> I was stunned. I had thought that the president of a company could have it any way he or she wanted it. I had pursued the source of power all the way up the organization, and here the chief executive officer was telling me he was caught in the middle like the rest of us. 

Block's experience mirrors my own. When I talk to employees about making their software development more lean and agile, they often tell me that they would love to, but their bosses won't let them, or their management won't buy them the tools they need to make it possible. When I talk to people trying to promote internal standards, they often suggest we ask our corporate leaders to issue an official edict that will force people to follow the standards. And when I talk to leaders, they often ask for suggestions on how we can get people to follow the guidance that has already been dispensed. 

So who has the power to make change happen inside of large organizations? The truth, of course, is that:

1. None of us has absolute power (no matter what our title).
2. All of us have some power. 
3. All of us operate within certain constraints. 
4. None of us are absolutely certain of how much power we have.
5. There is always a degree or risk involved with exercising our power. 

So where does that leave us? Block says that all of us have essentially three choices to make that determine to what degree we will be entrepreneurial rather than bureaucratic:

> We choose between Maintenance and Greatness.  
> We choose between Caution and Courage.   
> We choose between Dependency and Autonomy.

I had the privilege of having lunch yesterday with a group of corporate entrepreneurs. This is a group that has been working together to create and deliver an internal course on Agile software development. Five years ago, when some of them started employing Agile at work, they had to fly under the corporate radar in order to get started. This year, Agile has been officially recognized as something management would like to see more of -- with the result that some members of the group now have people calling them to ask if they can get credit for being Agile without really having to do anything different. 

At no time during our lunch did I hear anyone use the words Greatness, Courage or Autonomy. And yet, over and over again, as we ate and chatted and talked about their Agile accomplishments, I heard the same themes: they were not content to keep doing the same things over and over again; they were excited to try something new that would make them and their teammates more effective; they were willing to take reasonable risks; they were willing to act independently, while still taking full responsibility for their actions. 

More and more, as I engage in discussions about what it takes to change corporate culture, it seems to me that this is often the key issue: how many of us are willing to stand up and say these magic words...

The watery ketchup stops here.
"
Lean and Agile	An Agile Acid Test	2009-07-20	9 - Closed	Lean and Agile	"<p>One of the problems with Agile Software Development is the lack of any rigorous tool or method for determining any given project&#8217;s agility. To some extent, this can be considered a &#8220;feature&#8221; of Agile (and not a bug) since one of the core Agile values is a preference for &#8220;individuals and interactions over processes and tools.&#8221; At the same time, when managing a large-scale agile deployment at an organizational level, or providing consulting help to a number of different teams, there arises a legitimate need to distinguish between projects that can be fairly classified as Agile vs. others that may only be aspiring to this state. </p><br><br><p>The way in which Agile Development is defined makes this somewhat difficult. At a lower level of detail, we have sources that define specific practices. However, we have multiple such sources &#8212; most notably, for Scrum and Extreme Programming &#8212; and these various sources are far from congruent. The Agile Manifesto successfully generalizes these lower-level practices into a higher-level definition, but this definition is so general as to leave it open to broad interpretation, and so offers no easy way to assure consistent application.  </p><br><br><p>While I can&#8217;t claim any definitive authority for such a list, it does seem to me that there is a fairly small set of essential elements that can be used to determine whether a project is &#8220;really&#8221; Agile. So here, then, are the constituents of what I would call an &#8220;Agile Acid Test.&#8221;</p>
"	"One of the problems with Agile Software Development is the lack of any rigorous tool or method for determining any given project's agility. To some extent, this can be considered a ""feature"" of Agile (and not a bug) since one of the core [Agile values][agile-manifesto] is a preference for ""individuals and interactions over processes and tools."" At the same time, when managing a large-scale agile deployment at an organizational level, or providing consulting help to a number of different teams, there arises a legitimate need to distinguish between projects that can be fairly classified as Agile vs. others that may only be aspiring to this state. 

The way in which Agile Development is defined makes this somewhat difficult. At a lower level of detail, we have sources that define specific practices. However, we have multiple such sources -- most notably, for Scrum and Extreme Programming -- and these various sources are far from congruent. The [Agile Manifesto][agile-manifesto] successfully generalizes these lower-level practices into a higher-level definition, but this definition is so general as to leave it open to broad interpretation, and so offers no easy way to assure consistent application.  

While I can't claim any definitive authority for such a list, it does seem to me that there is a fairly small set of essential elements that can be used to determine whether a project is ""really"" Agile. So here, then, are the constituents of what I would call an ""Agile Acid Test.""

1. The project must *deliver* working software to its customers on a fairly regular basis -- at least once every two months. 

    Note that the customers may elect to defer use of a particular software release, but the delivered software must be usable. 

	Also note that the first release may in some cases take longer -- say, up to six months -- to lay the foundation for further development with a minimum useful set of features. 

2. The project must *demonstrate* new or revised software to its customers on a regular basis -- at least once every four weeks. 

    Note that, if projects are *delivering* working software at least every four weeks, then element 1 would also satisfy this requirement. If they are delivering less frequently, however, then they must be demonstrating software more often. 

3. The project must work to an actively managed feature backlog. 

    There are several implications here:

    * Project requirements are primarily defined in terms of desired software features, rather than in more abstract concepts or models.
    * The backlog of feature requests must be managed as a list of items that can be individually identified and prioritized in relationship to one another.  
    * The list must not be frozen. Items should be added to and removed from the list as customers and developers gain more knowledge about what needs to be accomplished. 
    * The relative priorities of items on the list, and the sequence in which they are to be implemented, should be reviewed at least once at the beginning of each new incremental delivery cycle.  
    * Each feature request should be small enough to be completed within a single incremental delivery cycle.

4. The project must focus on fulfilling an overarching product vision. 

    The product vision need not be fancy, but it should be documented. Without some sort of overall vision for the product and its evolution, the project can too easily devolve into a simple aggregation of unrelated change requests, and the product can quickly become a victim of feature bloat. A product vision provides the cohesion necessary to make both the project team and the features being implemented more than just the sums of their respective parts. 

5. The project should produce just enough documentation that is done as needed, on a just-in-time basis.

    Documentation can be useful to help clarify issues before committing them to code, but it should be the software code, not a separate set of documents, that serves as the primary repository for the knowledge gained by the team over the course of the project. 

6. The project team must regularly engage in retrospectives that help the team continuously improve their development practices. 

7. Most team communication must happen on a direct, real-time basis, and the team must be small enough -- fifteen members at the most -- to allow this to be practical.   

These then are what I would suggest as the essential practices of Agile software development. There are other important practices as well, of course, but I would consider those supporting practices, rather than essential ones. 

As confessed above, I can offer no definitive authority for this list. But if we take a look at the elements of the Agile Manifesto, I think I can explain how these are all directly related. I've listed my suggestions for essential agile practices down the left side of the following table, and used succeeding columns to explain how each practice supports the Manifesto element called out in the column heading. 

<table>
    <caption align=""top"">
    	The Essential Practices of Agile Software Development
	</caption>
	<tr>
		<th width=""15%"">Essential Practice</th>
		<th width=""17%"">Uncovering better ways of developing software by doing it</th>
		<th width=""17%"">Individuals and interactions over processes and tools</th>
		<th width=""17%"">Working software over comprehensive documentation</th>
		<th width=""17%"">Customer collaboration over contract negotiation</th>
		<th width=""17%"">Responding to change over following a plan</th>
	</tr>
	<tr>
		<th>1. Delivery of working software at least every two months</th>
		<td>The more frequently each delivery cycle is completed, the more rapidly the team can observe the results of their efforts and try improvements</td>
		<td> </td>
		<td>Rapid delivery of working software reduces the need for more extensive documentation</td>
		<td> </td>
		<td>Rapid completion of each delivery cycle allows changes to the overall delivery plan to be incorporated relatively quickly</td>
	</tr>
	<tr>
		<th>2. Demonstration of new or revised software at least every four weeks</th>
		<td> </td>
		<td>The demonstration of working software is the compelling event that generates the most meaningful interaction between all the individuals involved with the project, and reduces the need for more complex processes and tools </td>
		<td>Rapid creation and demonstration of working software reduces the need for more extensive documentation</td>
		<td>Frequent demonstration of working software provides the most meaningful opportunities for customer collaboration, and reduces the need for contracts to specify complex statements of work </td>
		<td>Demonstration of working software is the most reliable means of eliciting further ideas for change, and frequent demonstration opportunities provide the best means of demonstrating responsiveness to these changes</td>
	</tr>
	<tr>
		<th>3. An actively managed feature backlog </th>
		<td> </td>
		<td>Desired software features are topics that can generate interaction between developers and customers</td>
		<td>Desired software features can be translated relatively easily and rapidly into working software</td>
		<td>Customers and developers can easily collaborate on software feature requests </td>
		<td>A list of requested features, with relatively little investment in the initial definition of each feature, is a document that lends itself to easy and rapid change</td>
	</tr>
	<tr>
		<th>4. An overarching product vision </th>
		<td> Without an explicit vision for the product to be developed, it is difficult to tell to what degree the team is succeeding </td>
		<td>A compelling vision can engage both developers and customers in meaningful interaction, without the need for complex processes or tools </td>
		<td>A compelling vision does not require comprehensive documentation, and can help shape the evolution of working software </td>
		<td>Customers and developers are encouraged to collaborate on the means of fulfilling their common vision for the product </td>
		<td>An overarching vision to be fulfilled is different from a detailed plan to be followed, and tactical changes can be easily accommodated without disturbing the overall vision </td>
	</tr>
	<tr>
		<th>5. Documentation that is just enough and just-in-time </th>
		<td>Allows more time and energy to be focused on actual software development </td>
		<td>Since documentation is a less interactive form of dialogue, minimal documentation places greater focus on real-time interaction between customers and developers </td>
		<td>Less focus on comprehensive documentation </td>
		<td>A contract is a complex, binding document, so minimal documentation implies less reliance on a contract, and greater reliance on direct collaboration </td>
		<td>A smaller investment in documentation makes it easier for the development team to respond to changes </td>
	</tr>
	<tr>
		<th>6. Continuous improvement through retrospectives </th>
		<td>Provides a forum for uncovering better ways of developing software </td>
		<td>Provides a forum for team interactions about improvements and reduces dependence on rigid, unchanging processes </td>
		<td> </td>
		<td> </td>
		<td>Allows the team to rapidly respond to ideas for process changes </td>
	</tr>
	<tr>
		<th>7. Direct, real-time team communication among no more than 15 people </th>
		<td>Allows team members to quickly share experiences and learn from each other </td>
		<td>Larger teams require more complex processes and tools for communication and control </td>
		<td>Larger teams require more documentation to ensure adequate communication </td>
		<td>Larger teams require more definitive, documented statements of work in order to keep the team on track </td>
		<td>With larger teams, responding to change is more like turning the battleship rather than turning on a dime </td>
	</tr>
	<tr>
		<th width=""15%"">Essential Practice</th>
		<th width=""17%"">Uncovering better ways of developing software by doing it</th>
		<th width=""17%"">Individuals and interactions over processes and tools</th>
		<th width=""17%"">Working software over comprehensive documentation</th>
		<th width=""17%"">Customer collaboration over contract negotiation</th>
		<th width=""17%"">Responding to change over following a plan</th>
	</tr>
</table> 

If Agile offers -- as I believe it does -- an approach to software development that is essentially different from others, then we owe it to ourselves to draw the line between Agile and non-Agile in such a way that the two cannot easily be confused. From my perspective, the practices I've listed above are all essential: if any one of them is missing, then I would suggest that a project's approach would be better described using some other terminology.  

[agile-manifesto]: http://agilemanifesto.org/
"
Lean and Agile	Process, Projects and Customers -- The Unholy Trinity	2009-07-27	9 - Closed	Lean and Agile	"<p>One of the statements I regularly hear from IT developers that always surprises me is the assertion that: &#8220;Our customers dictate our process to us.&#8221;</p><br><br><p>I&#8217;m even further astonished when I hear developers justify this position by quoting an alleged lean principle to the effect that &#8220;if our customer is not willing to pay for something [an activity or interim deliverable], then it is waste, and should be eliminated.&#8221;</p><br><br><p>Really&#8230;?</p><br><br><p>I was under the impression that lean principles got their start at Toyota, and that Toyota was in the business of building cars. Now I&#8217;ve bought several cars in my lifetime, and I recall talking to auto dealers about things like price, quality, features, performance and warranties, but I honestly can&#8217;t recall a conversation in which I quizzed the salesperson about the process Toyota used to build that car, or the number of drawings or other specifications they produced before they started stamping sheet metal. </p>
"	"One of the statements I regularly hear from IT developers that always surprises me is the assertion that: ""Our customers dictate our process to us.""

I'm even further astonished when I hear developers justify this position by quoting an alleged lean principle to the effect that ""if our customer is not willing to pay for something [an activity or interim deliverable], then it is waste, and should be eliminated.""

Really...?

I was under the impression that lean principles got their start at Toyota, and that Toyota was in the business of building cars. Now I've bought several cars in my lifetime, and I recall talking to auto dealers about things like price, quality, features, performance and warranties, but I honestly can't recall a conversation in which I quizzed the salesperson about the process Toyota used to build that car, or the number of drawings or other specifications they produced before they started stamping sheet metal. 

And frankly, if I walked into an auto showroom, and the dealer pulled me into his office, showed me a process flow diagram, pointed to a bubble on it, and asked me how I felt about paying for that step in their process, I would no doubt run, not walk, to the nearest exit, and immediately sell my shares in that company if I happened to own any. For while I don't know a lot about designing and building automobiles, I do know that it's a complicated business, and if a company is asking me for advice on how to do it, then they must be pretty clueless.

I don't imagine that many people would take issue with my reported stance as an auto buyer in the scenario described above. And yet I regularly see people assert a very different position about customers of IT software development without so much as blinking an eye. So how do we end up in this position, actually believing that our customers are in a position to tell us how our software development processes should work?

I see several contributing factors that lead us down this slippery slope. 

* IT software developers are generally in a somewhat different position than automakers, in that they are building one item (an application system) for one customer. Further, the customer is often an internal one, so there is no corporate veil between producer and customer. In this situation, it is natural for the customer to have more visibility into the producer's process, and for their voice to carry more weight. 

* IT customers are often required participants in the development process, and so if they don't understand or accept their prescribed role in the process, then they may well balk, or refuse to participate, or simply not show up when needed. 

* Historically, IT process improvement efforts have often tried to increase the amount of documentation produced, and the number of steps in the process, and customers have often had difficulty understanding how any of this was going to increase the speed of delivery or quality of the product, or decrease the project's cost. 

* If the customer's trust level in IT is low to begin with, then it may well be difficult for an app development team to make a convincing case that complex process changes will contribute to better results for the customer. 

* Certain steps in the development process -- definition of requirements or of acceptance test cases, let's say -- are sometimes portrayed by IT as being primarily, or even exclusively, the responsibility of the customer. In this case, the customer may feel, with some justification, that IT is simply trying to shift some of their responsibilities onto their customer's shoulders. 

* Finally, IT developers are often themselves skeptical about the value of changes in their development process, and so may be all too willing to lend legitimacy to any reservations their customers might have about such efforts.

So what do I recommend in this area?

1. IT customers of course have a role and a legitimate voice in any software development process used, and so they should be included in any dialogue about potential process improvements. 

2. If customers are not starting with high levels of trust in IT, then IT must be open and honest about whatever failures have led to this situation, and must focus their improvement efforts on earning their customers' confidence. 

3. Ultimately, IT must accept responsibility for process expertise as well as technical expertise. Without accepting responsibility for process, it is hard to see how IT can maintain a long-term position as a credible supplier of products and services.  

And oh, by the way, here is how I would state the lean principles about value and waste so as to avoid the confusion indicated above. 

> An activity adds value if it influences the form, fit and/or function of a product or service in a way that the customer would be willing to pay for.

> Any other activity is a form of waste. 
"
Lean and Agile	Broken Field Running	2009-09-23	9 - Closed	Lean and Agile	"<p>Now that we&#8217;re in the thick of another US college football season, it occurs to me that IT application developers might benefit from having a different mental model to represent the work they do. </p><br><br><p>When I talk to architects, analysts and programmers about their projects, they often describe them as if they were heading in a straight line from some known starting point to a clearly defined end state &#8212; almost as if they were running at a track meet. </p><br><br><p>And yet, when I watch football on autumn Saturdays, I can&#8217;t help but notice&#8230; very few touchdowns get scored this way. This is because the ball carriers have to avoid obstacles on the way to the goal line. And so what you see is something described by the picturesque phrase, &#8220;broken field running,&#8221; meaning &#8220;varying in direction suddenly and frequently.&#8221;</p>
"	"Now that we're in the thick of another US college football season, it occurs to me that IT application developers might benefit from having a different mental model to represent the work they do. 

When I talk to architects, analysts and programmers about their projects, they often describe them as if they were heading in a straight line from some known starting point to a clearly defined end state -- almost as if they were running at a track meet. 

And yet, when I watch football on autumn Saturdays, I can't help but notice... very few touchdowns get scored this way. This is because the ball carriers have to avoid obstacles on the way to the goal line. And so what you see is something described by the picturesque phrase, ""broken field running,"" meaning ""varying in direction suddenly and frequently.""

<p><img src=""../images/mike-hart.jpg"" alt=""Mike Hart"" title=""""></p>

So which mental model is most appropriate for application developers? Many of us have been conditioned -- either through personal preference or education or some form of institutional indoctrination -- to think of application development as some sort of well-organized, relatively straightforward effort to coming up with technical solutions for well-defined business problems. 

But is this really the way that it works?

To some extent, yes. Just as a football player needs a mastery of the basic skills, and an understanding of his team's playbook, developers need to know the basics of their craft, and how they plan to work together with other team members. 

Beyond that, though, I tend to think that successful application developers need the skills of a running back: they need to understand where the goal line is, and need to quickly observe and take advantage of opportunities to advance as far as they can towards the goal as quickly as possible. 

How does this translate into app development?

* If we think of business value as the goal line, then developers need to actively look for opportunities to maximize business value while minimizing the investment necessary to achieve it.

* If there are multiple ways to achieve the same or comparable business value, then applications professionals need to consider alternate routes to the goal: things like purchased or open-source software or reuse of existing assets, as well as varying technical alternatives. 

* Since it is often the case that some paths forward are blocked by organizational politics, or technical difficulties, or excessive cost and schedule demands, developers need to consider other paths that will still allow them to advance towards the goal.

* If a development team is not sure of a safe way forward, it is generally better to try something quickly than to wait too long for an opening: otherwise they may get overrun, and even lose ground. 

* In some cases, when adversarial forces are rapidly closing in on them, developers may need to abandon their hopes of advancing at all, and just try to hang onto the ball so that they can have another better opportunity to add business value on a future play. 

* If a team is not making enough yards per play to score a first down, then they probably need to consider some alternatives before being forced to turn the ball over to someone who may be able to do more with it.

[Mike Gualtieri][mikeg] of [Forrester Research][forrester] seemed to have something similar in mind when writing a [recent blog post][excuses] on the Future of Application Development. Mike starts by saying:

> I have grown weary of hearing excuses (for 20 years) from application development professionals about why they are challenged when it comes to developing and delivering applications that meet the expectations of the business.

And he ends by saying:

> For years, app dev pros have been told to keep their heads down -- that all you need to do is follow the project plan and write your code. Wrong. Lift your head up, find your passion, understand the business and then use your technical creativity to make beautiful applications that users find useful, usable and desirable. 

Of course in all this discussion I have so far avoided use of any analogies to [foreign sports I really don't understand][scrum], and have resisted using the word *[agility][running-back-agility]* to describe one of the attributes needed by a successful running back. 

So, one might reasonably ask, what about [Scrum][scrum-dev] and [Agile][]? Don't these approaches already adequately address the problem I'm describing? If you're developing software in brief iterations, and using a scrum master, or otherwise making use of Agile methods, don't you have this problem nailed?

Well, frankly, I'm not so sure. My sense is that, when reading some of the early works of authors who later became part of the agile movement, there's a greater emphasis on agility in the sense that I'm describing it. When listening to many modern reports from agile development teams, though, they frankly sound like they have just timeboxed their traditional approach. And while this is a great improvement -- planning to proceed in short sprints rather than a single grand marathon -- this is not the same thing that I'm describing. Running in short sprints is not the same as broken field running. And until developers get the sense of this, they may well have trouble scoring touchdowns.

[scrum]: http://www.scrum.com/
[excuses]: http://blogs.forrester.com/mike_gualtieri/09-09-27-excuses_excuses_business_doesnt_know_what_it_wants
[mikeg]: http://www.linkedin.com/in/mgualtieri
[forrester]: http://www.forrester.com/
[scrum-dev]: http://en.wikipedia.org/wiki/Scrum_(development)
[running-back-agility]: http://www.wikihow.com/Improve-Agility-for-Running-Backs
[agile]: http://agilemanifesto.org/principles.html
"
Improvement	Getting Metrics Right	2009-09-24	9 - Closed	Improvement, Metrics	"<p>It unfortunately seems that there are many more ways to get software development metrics &#8220;wrong&#8221; than there are ways to get them &#8220;right,&#8221; so be forewarned that much of my advice here will be about what <strong>not</strong> to do rather than what <strong>to</strong> do. Nonetheless, here are a baker&#8217;s dozen worth of tips on how to avoid the worst metrics pitfalls and produce constructive numbers.</p>
"	"It unfortunately seems that there are many more ways to get software development metrics ""wrong"" than there are ways to get them ""right,"" so be forewarned that much of my advice here will be about what **not** to do rather than what **to** do. Nonetheless, here are a baker's dozen worth of tips on how to avoid the worst metrics pitfalls and produce constructive numbers.

1. **Don't Confuse Product Development with Manufacturing.** While there are similarities, product development processes are in some ways different from manufacturing processes: most fundamentally, the goal of product development is to develop something new (to create meaningful variation), while the goal of manufacturing is to build the same thing over and over again (to minimize or eliminate variation). If you approach metrics for software development expecting the process to be perfectly repeatable and mechanical, then you are very likely to end up looking for love in all the wrong places.

2. **Fudging the Numbers.** Robert D. Austin, in a revelatory little book titled <cite>[Measuring and Managing Performance in Organizations][austin96],</cite> points out that there is a difference between informational measures -- data collected to help analyze a situation -- and motivational measures -- data collected and reported in order to influence people's behavior or motivate them to achieve higher levels of performance. He also points out that this difference is especially important if the people whose performance is being measured are the same people being asked to report the data -- a frequent situation in software development. Austin talks about the fallacy of the ""dashboard"" analogy.

	> One frequent analogy casts the manager in the role of an airplane pilot guided by organizational measures that are like cockpit instruments.
	>
	> Mechanistic and organic analogies are flawed because they are too simplistic. Kaplan and Norton's cockpit analogy would be more accurate if it included a multitude of tiny gremlins controlling wing flaps, fuel flow, and so on of a plane being buffeted by winds and generally struggling against nature, but with the gremlins always controlling information flow back to the cockpit instruments, for fear that the pilot might find gremlin replacements. It would not be surprising if airplanes guided this way occasionally flew into mountainsides when they seemed to be progressing smoothly toward their destinations.

	In other words, if you devise a motivational metric (and don't kid yourself -- all metrics sponsored or endorsed by management are inherently motivational) that is dependent on accurate data entry and reporting from the people being ""motivated,"" don't be surprised or shocked when they are subtly or not-so-subtly influenced to fudge the numbers to make themselves look good. 

3. **Maintain Balance.** Austin also points out that, if you're not careful, you may end up with unbalanced measures that push your practitioners too far in one direction or another. Let's say, for example, that you launch a new Quality program with the laudable goal of achieving zero post-release defects of any kind or severity. Sounds like a perfect world, right? If that is your only metric, though, then you are likely to find over time that you have achieved this goal at the expense of customer satisfaction, productivity and cycle time, since some of the practical ways to achieve  zero defects are to become excessively risk-adverse, to test obsessively, and to haggle with customers over whether a particular problem should be classified as a defect or an enhancement. Whoops -- probably not what you intended.

4. **Measure Up.** Austin also advises -- and [Mary and Tom Poppendieck echo his recommendations][measure-up] -- that measurements be taken at a level *above* the level at which individuals can be directly held accountable for the numbers. Although this may seem counter-intuitive, or unfair, the beauty of this approach is that it encourages practitioners to collaborate to improve the performance of an overall system, rather than quickly figuring out the easiest way to improve their own numbers to make themselves look good. 

5. **Avoid a Metrics Monument.** If you build an expensive, inflexible metrics collection mechanism and/or repository, then you will tend to continue using it long after it has outlived whatever original usefulness it may have once had, and it will ultimately become a shrine in which you have thoroughly entombed your once lofty ambitions for your metrics program. However tempting it may sound, and even if some well-meaning executive supplies you with funds to build such a thing, avoid this particular siren call. 

6. **Natural Data Collection.** When information needs to be collected from practitioners, it is generally best to derive this data from sources already being populated as a natural result of process execution. The alternative -- to ask people to maintain special spreadsheets, to have them copy and transform data to feed into some special metrics repository -- often generates resentment from practitioners, and provides many opportunities for loss of data integrity.

7. **[The Medium is the Message][mcluhan64].** Carefully consider the messages -- intended or unintended -- that may be sent by your choice of metrics. If you measure lines of code produced per day, for example, you may be inadvertently sending the message that you are less interested in the quality of the work being performed than in its sheer quantity. If you measure customer satisfaction, on the other hand, you will be sending the message -- both to your developers and your customers -- that you are really concerned about how well your customers are pleased by your development efforts -- and sending this sort of message can be as important as the value you derive from the numbers you ultimately produce from the exercise.

8. **Improvement Goals without Plans.** Some leaders seem to believe that they can induce their organizations to improve just by setting incremental improvement goals year over year, without any plans on how those goals will be achieved. While these sorts of approaches may appear to have some success in the short-term, they rarely achieve any sort of meaningful, lasting improvements.   

9. **Grain of Salt.** There are a number of industry sources of software development metrics expertise available. They all have valuable information and opinions to offer, but I would recommend you take their advice with a grain of salt. It is in the nature of professional experts to over-sell their wares and to give you canned answers to complex problems. 

10. **Performance to Plan.** Since one of the biggest problems in software development is taking much more time and/or money to deliver a solution than was originally planned, there is a natural tendency to obsess about cost and schedule performance, and to over-react to the slightest deviations from budget or schedule. In most cases, however, the things that cause slight deviations are not the same things that cause catastrophic overruns, so this compulsion to flag slight deviations as ""condition red"" situations is generally misplaced. 

	[Jim Highsmith][highsmith07] has persuasively argued that project sponsors should establish acceptable *constraints* for cost and schedule performance -- rather than targets of perfect conformance to plan -- and then allow projects to vary from perfection without getting overly concerned. In most cases, he argues, a 5 - 10% deviation would be acceptable to the business, so long as they obtain the business benefits they are looking for. 

	The negative consequences of trying to drive plan conformance to zero are twofold: you encourage people to fudge the numbers, in order to avoid negative attention from management, and you send the message that plan conformance is more important than customer satisfaction or delivery of business value, focusing the team on less productive goals than you would like -- both of the outcomes that Austin warns us to avoid.

11. **Tell a Story.** Numbers by themselves have no meaning. Any good story has a beginning, a middle and an end, and your metrics should be part of such a progression. You had a problem/opportunity, you took certain actions, and you had these sorts of results. Even if your numbers show an improvement, without understanding the why and how of the improvement, it may be hard to make any good use of the numbers. 

  To this end, be sure to collect anecdotal evidence as well as the raw numbers. Real stories from actual practitioners in the field can help to provide background and context for your numbers, and help to fill in the ""inside story"" of what's actually going on out there. 

12. **Different Strokes for Different Folks.** To some extent, you will have different sets of stakeholders who want to see different metrics for different purposes. While a metrics purist might want to try to rationalize and unify all these into some sort of cohesive metrics program, it is often better to allow these different sets to each be developed and maintained with some independence. Consider the following variations on the metrics theme:

	1. *Annual Executive Goals.* These tend to get set yearly as part of some sort of executive goal-setting exercise, and often change from one year to the next. Don't over-think these, and try to accept them for what they are: communications mechanisms through which leadership identifies areas of particular importance, and temporary motivational measures intended to nudge organizational behavior in a certain direction.

	2. *Team Performance Measures.* These allow a team to gauge its own improvement over time. Team velocity is a great example often used by agile teams. The most important factors here are that the team feel ownership of the metric, and that it be aligned with organizational priorities. 

	3. *Organizational Performance Measures.* These allow a larger organization to determine if they are getting better over time. These are tricky, especially in IT organizations where many different teams, types of work, and customer sets may all get lumped together into a single number. 

	4. *CMMI Measures.* This is a null set, and a bogus category. You should not have any special metrics that exist only to please a [CMMI][] appraiser or consultant, or to help ""pass"" a [CMMI (aka SCAMPI) appraisal][scampi]. (And I say this, not out of any disrespect for the CMMI, but rather out of a deep respect for its underlying intentions.)

13. **Three Key Metrics.** The [Poppendiecks][ilsd] argue that you should really have metrics in three different areas: customer satisfaction, business value delivered, and the overall cycle time from the initiation of a request to its completion and delivery to the customer (from ""concept to cash,"" as they describe it). If you have specific metrics in each of these three areas, they you will tend to have a balanced set of metrics that will drive substantive, long-term improvements in development practices. 

	And isn't that what it's really all about?

[austin96]: http://www.amazon.com/gp/product/0932633366?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0932633366
[highsmith07]: http://www.stickyminds.com/BetterSoftware/magazine.asp?fn=cifea&id=102
[mcluhan64]: http://en.wikipedia.org/wiki/The_medium_is_the_message
[measure-up]: http://www.poppendieck.com/measureup.htm
[ilsd]: http://www.amazon.com/gp/product/0321437381?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0321437381
[cmmi]: http://www.sei.cmu.edu/cmmi/
[scampi]: http://www.sei.cmu.edu/cmmi/tools/appraisals/
"
Metrics	Getting Metrics Right	2009-09-24	9 - Closed	Improvement, Metrics	"<p>It unfortunately seems that there are many more ways to get software development metrics &#8220;wrong&#8221; than there are ways to get them &#8220;right,&#8221; so be forewarned that much of my advice here will be about what <strong>not</strong> to do rather than what <strong>to</strong> do. Nonetheless, here are a baker&#8217;s dozen worth of tips on how to avoid the worst metrics pitfalls and produce constructive numbers.</p>
"	"It unfortunately seems that there are many more ways to get software development metrics ""wrong"" than there are ways to get them ""right,"" so be forewarned that much of my advice here will be about what **not** to do rather than what **to** do. Nonetheless, here are a baker's dozen worth of tips on how to avoid the worst metrics pitfalls and produce constructive numbers.

1. **Don't Confuse Product Development with Manufacturing.** While there are similarities, product development processes are in some ways different from manufacturing processes: most fundamentally, the goal of product development is to develop something new (to create meaningful variation), while the goal of manufacturing is to build the same thing over and over again (to minimize or eliminate variation). If you approach metrics for software development expecting the process to be perfectly repeatable and mechanical, then you are very likely to end up looking for love in all the wrong places.

2. **Fudging the Numbers.** Robert D. Austin, in a revelatory little book titled <cite>[Measuring and Managing Performance in Organizations][austin96],</cite> points out that there is a difference between informational measures -- data collected to help analyze a situation -- and motivational measures -- data collected and reported in order to influence people's behavior or motivate them to achieve higher levels of performance. He also points out that this difference is especially important if the people whose performance is being measured are the same people being asked to report the data -- a frequent situation in software development. Austin talks about the fallacy of the ""dashboard"" analogy.

	> One frequent analogy casts the manager in the role of an airplane pilot guided by organizational measures that are like cockpit instruments.
	>
	> Mechanistic and organic analogies are flawed because they are too simplistic. Kaplan and Norton's cockpit analogy would be more accurate if it included a multitude of tiny gremlins controlling wing flaps, fuel flow, and so on of a plane being buffeted by winds and generally struggling against nature, but with the gremlins always controlling information flow back to the cockpit instruments, for fear that the pilot might find gremlin replacements. It would not be surprising if airplanes guided this way occasionally flew into mountainsides when they seemed to be progressing smoothly toward their destinations.

	In other words, if you devise a motivational metric (and don't kid yourself -- all metrics sponsored or endorsed by management are inherently motivational) that is dependent on accurate data entry and reporting from the people being ""motivated,"" don't be surprised or shocked when they are subtly or not-so-subtly influenced to fudge the numbers to make themselves look good. 

3. **Maintain Balance.** Austin also points out that, if you're not careful, you may end up with unbalanced measures that push your practitioners too far in one direction or another. Let's say, for example, that you launch a new Quality program with the laudable goal of achieving zero post-release defects of any kind or severity. Sounds like a perfect world, right? If that is your only metric, though, then you are likely to find over time that you have achieved this goal at the expense of customer satisfaction, productivity and cycle time, since some of the practical ways to achieve  zero defects are to become excessively risk-adverse, to test obsessively, and to haggle with customers over whether a particular problem should be classified as a defect or an enhancement. Whoops -- probably not what you intended.

4. **Measure Up.** Austin also advises -- and [Mary and Tom Poppendieck echo his recommendations][measure-up] -- that measurements be taken at a level *above* the level at which individuals can be directly held accountable for the numbers. Although this may seem counter-intuitive, or unfair, the beauty of this approach is that it encourages practitioners to collaborate to improve the performance of an overall system, rather than quickly figuring out the easiest way to improve their own numbers to make themselves look good. 

5. **Avoid a Metrics Monument.** If you build an expensive, inflexible metrics collection mechanism and/or repository, then you will tend to continue using it long after it has outlived whatever original usefulness it may have once had, and it will ultimately become a shrine in which you have thoroughly entombed your once lofty ambitions for your metrics program. However tempting it may sound, and even if some well-meaning executive supplies you with funds to build such a thing, avoid this particular siren call. 

6. **Natural Data Collection.** When information needs to be collected from practitioners, it is generally best to derive this data from sources already being populated as a natural result of process execution. The alternative -- to ask people to maintain special spreadsheets, to have them copy and transform data to feed into some special metrics repository -- often generates resentment from practitioners, and provides many opportunities for loss of data integrity.

7. **[The Medium is the Message][mcluhan64].** Carefully consider the messages -- intended or unintended -- that may be sent by your choice of metrics. If you measure lines of code produced per day, for example, you may be inadvertently sending the message that you are less interested in the quality of the work being performed than in its sheer quantity. If you measure customer satisfaction, on the other hand, you will be sending the message -- both to your developers and your customers -- that you are really concerned about how well your customers are pleased by your development efforts -- and sending this sort of message can be as important as the value you derive from the numbers you ultimately produce from the exercise.

8. **Improvement Goals without Plans.** Some leaders seem to believe that they can induce their organizations to improve just by setting incremental improvement goals year over year, without any plans on how those goals will be achieved. While these sorts of approaches may appear to have some success in the short-term, they rarely achieve any sort of meaningful, lasting improvements.   

9. **Grain of Salt.** There are a number of industry sources of software development metrics expertise available. They all have valuable information and opinions to offer, but I would recommend you take their advice with a grain of salt. It is in the nature of professional experts to over-sell their wares and to give you canned answers to complex problems. 

10. **Performance to Plan.** Since one of the biggest problems in software development is taking much more time and/or money to deliver a solution than was originally planned, there is a natural tendency to obsess about cost and schedule performance, and to over-react to the slightest deviations from budget or schedule. In most cases, however, the things that cause slight deviations are not the same things that cause catastrophic overruns, so this compulsion to flag slight deviations as ""condition red"" situations is generally misplaced. 

	[Jim Highsmith][highsmith07] has persuasively argued that project sponsors should establish acceptable *constraints* for cost and schedule performance -- rather than targets of perfect conformance to plan -- and then allow projects to vary from perfection without getting overly concerned. In most cases, he argues, a 5 - 10% deviation would be acceptable to the business, so long as they obtain the business benefits they are looking for. 

	The negative consequences of trying to drive plan conformance to zero are twofold: you encourage people to fudge the numbers, in order to avoid negative attention from management, and you send the message that plan conformance is more important than customer satisfaction or delivery of business value, focusing the team on less productive goals than you would like -- both of the outcomes that Austin warns us to avoid.

11. **Tell a Story.** Numbers by themselves have no meaning. Any good story has a beginning, a middle and an end, and your metrics should be part of such a progression. You had a problem/opportunity, you took certain actions, and you had these sorts of results. Even if your numbers show an improvement, without understanding the why and how of the improvement, it may be hard to make any good use of the numbers. 

  To this end, be sure to collect anecdotal evidence as well as the raw numbers. Real stories from actual practitioners in the field can help to provide background and context for your numbers, and help to fill in the ""inside story"" of what's actually going on out there. 

12. **Different Strokes for Different Folks.** To some extent, you will have different sets of stakeholders who want to see different metrics for different purposes. While a metrics purist might want to try to rationalize and unify all these into some sort of cohesive metrics program, it is often better to allow these different sets to each be developed and maintained with some independence. Consider the following variations on the metrics theme:

	1. *Annual Executive Goals.* These tend to get set yearly as part of some sort of executive goal-setting exercise, and often change from one year to the next. Don't over-think these, and try to accept them for what they are: communications mechanisms through which leadership identifies areas of particular importance, and temporary motivational measures intended to nudge organizational behavior in a certain direction.

	2. *Team Performance Measures.* These allow a team to gauge its own improvement over time. Team velocity is a great example often used by agile teams. The most important factors here are that the team feel ownership of the metric, and that it be aligned with organizational priorities. 

	3. *Organizational Performance Measures.* These allow a larger organization to determine if they are getting better over time. These are tricky, especially in IT organizations where many different teams, types of work, and customer sets may all get lumped together into a single number. 

	4. *CMMI Measures.* This is a null set, and a bogus category. You should not have any special metrics that exist only to please a [CMMI][] appraiser or consultant, or to help ""pass"" a [CMMI (aka SCAMPI) appraisal][scampi]. (And I say this, not out of any disrespect for the CMMI, but rather out of a deep respect for its underlying intentions.)

13. **Three Key Metrics.** The [Poppendiecks][ilsd] argue that you should really have metrics in three different areas: customer satisfaction, business value delivered, and the overall cycle time from the initiation of a request to its completion and delivery to the customer (from ""concept to cash,"" as they describe it). If you have specific metrics in each of these three areas, they you will tend to have a balanced set of metrics that will drive substantive, long-term improvements in development practices. 

	And isn't that what it's really all about?

[austin96]: http://www.amazon.com/gp/product/0932633366?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0932633366
[highsmith07]: http://www.stickyminds.com/BetterSoftware/magazine.asp?fn=cifea&id=102
[mcluhan64]: http://en.wikipedia.org/wiki/The_medium_is_the_message
[measure-up]: http://www.poppendieck.com/measureup.htm
[ilsd]: http://www.amazon.com/gp/product/0321437381?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0321437381
[cmmi]: http://www.sei.cmu.edu/cmmi/
[scampi]: http://www.sei.cmu.edu/cmmi/tools/appraisals/
"
Culture	Developmental Levels	2009-10-22	9 - Closed	Culture, Humanity, Philosophy, Practopian	"<p>A number of authors and systems of thought espouse one or another series of developmental levels, in fields of study as diverse as psychology, sociology, economics and organizational development. Ken Wilber was the first author I encountered who proposed an integration of these various developmental progressions into a single unifying scheme. However, much of Ken&#8217;s take  on these levels was heavily influenced by the Spiral Dynamics work done by Clare W. Graves, Don Beck and Chris Cowan. </p><br><br><p>The following reference table lists the levels in this general, unifying model, showing the color schemes used by both Integral Theory and Spiral Dynamics. </p>
"	"I was first introduced to the idea of developmental levels by Ken Wilber, in his book <cite>[A Brief History of Everything][bhoe]</cite>. I've also come across the concept in the book <cite>[Spiral Dynamics: Mastering Values, Leadership and Change][sd]</cite>, by Clare W. Graves, Don Beck and Chris Cowan. As with the Four Quadrants Model, which I discussed in my [last post][4Q], I've found the concept of developmental levels to be tremendously useful, and so wanted to share a brief introductory overview with others. 

These levels represent developments in human culture, as well as stages of development within individuals. Individuals cannot develop to a stage that is not yet present in their surrounding culture; on the other hand, having a culture that has developed to a certain level does not guarantee that all individuals developing within that culture will continue to the same level. It is possible for individuals to stop development at a certain level, or perhaps to favor a certain level over others. 

Each successive level should be understood, not as a replacement for preceding levels, but as a complement to them. Later levels are not inherently better than ""lower"" levels (one reason why colors instead of numbers are often used to represent the levels), but it is better to have higher levels available, both for a culture and for an individual.

One attribute of the levels is that they build on one another. It is not possible to completely skip one level and proceed to a later one. 

Note that, from a cultural perspective, we can be referring to a level as it applies to a society within a certain geopolitical boundary, or to a culture as it exists within an organization, such as a corporation. 

With these introductory concepts in place, let's now look at the levels. 

1. Archaic / Instinctual

An individual operating at this level is focused exclusively on immediate survival needs, and very physical pain / pleasure responses. 

Nothing wrong with this level; we all have such survival instincts, and primitive senses of pain and pleasure; on the other hand, this level doesn't get us very far. 

Newborn children are good examples of this level, as are the occasional ""wild child"" examples of humans growing up without benefit of human company.  

From a societal perspective, this is ground zero. Essentially no human culture exists at this level. In fact, there is nothing about this level that can be presumed to be exclusively human. 

2. Magical / Animistic


<td>Beginning to differentiate self from world, and elements of world from one another, and to intuit causal relationships, but no accurate understanding of these relationships; impulsive, possessing faith in magic and superheroes; tribal kinship bonds, ethnic tribes, ancestral stories, superstitious beliefs. </td>
<td class=""purple"">Purple </td>
<td class=""magenta"">Magenta </td> 

<table>	
  <caption align=""top"">
    Developmental Levels
	</caption>
  <tr>
    <th>#</th>
    <th>Name</th>
	<th>Characteristics</th>
    <th>Spiral Dynamics Color</th>
    <th>Integral Color</th>
  </tr>
  <tr>
    <td>A</td>
    <td>Archaic / Instinctual</td>
    <td>Focused solely on immediate survival needs; minimal sense of self; behavior based on natural instincts and reflexes; concern only for physical self and physical environment; nothing that we would recognize as human society or culture. </td>
    <td class=""beige"">Beige</td>
    <td class=""infrared"">Infrared </td>
  </tr>
  <tr>
    <td>B</td>
    <td>Magical / Animistic</td>
    <td>Beginning to differentiate self from world, and elements of world from one another, and to intuit causal relationships, but no accurate understanding of these relationships; impulsive, possessing faith in magic and superheroes; tribal kinship bonds, ethnic tribes, ancestral stories, superstitious beliefs. </td>
    <td class=""purple"">Purple </td>
    <td class=""magenta"">Magenta </td>
  </tr>
  <tr>
    <td>C</td>
    <td>Tribal / Power Gods </td>
    <td>Egocentric; asserting self for dominance, conquest and power; evident in feudal empires and criminal gangs; people organize themselves based on power hierarchies, with the most powerful individuals leading the weaker; might makes right. </td>
    <td class=""red"">Red </td>
    <td class=""red"">Red </td>
  </tr>
  <tr>
    <td>D</td>
    <td>Traditional / Mythic Order </td>
    <td>People organize themselves around mythic, fundamentalist principles of truth, with groups requiring close conformity to their particular principles, but with no reliable way to make value judgments comparing one group's ""truth"" to another's; group membership now based on professed allegiance and obedience to shared principles, rather than on family ties or geography; fundamental principles held to be absolute and unvarying; belief in the law and in an authoritarian hierarchy from which the law is passed down.         </td>
    <td class=""blue"">Blue </td>
    <td class=""amber"">Amber </td>
  </tr>
  <tr>
    <td>E</td>
    <td>Modern / Rational</td>
    <td>Society advances based on use of the scientific method; quantitative methods are introduced that allow people to make objective decisions about what is true and what is false; truth is determined based on the testing of a variety of hypotheses, rather than reference to an absolute authority; oriented towards achievement of results.  </td>
    <td class=""orange"">Orange </td>
    <td class=""orange"">Orange </td>
  </tr>
  <tr>
    <td>F</td>
    <td>Postmodern / Pluralistic</td>
    <td>Relativistic; situational; accepting of fluid affiliations; acknowledges that there are multiple, valid ways of perceiving reality, and tries to accept all people and life forms by placing value on diversity; may be seen as a means of accommodating multiple tribes, gangs and mythic orders within a single, overarching social order; consensus-based decision-making.   </td>
    <td class=""green"">Green </td>
    <td class=""green"">Green </td>
  </tr>
  <tr>
    <td>G</td>
    <td>Integral / Systemic </td>
    <td>Sees the importance of the earlier levels, and of the developmental model as a whole; while still acknowledging the value of diversity, also recognizes the validity of healthy value hierarchies. </td>
    <td class=""yellow"">Yellow </td>
    <td class=""teal"">Teal </td>
  </tr>
  <tr>
    <td>H</td>
    <td>Integral / Holistic </td>
    <td>Sort of like the prior level but with a more holistic sense of the kosmos.  </td>
    <td class=""turquoise"">Turquoise </td>
    <td class=""turquoise"">Turquoise </td>
  </tr>
  <tr>
    <td>I</td>
    <td>Post-Integral </td>
    <td>This is sort of a place-holder for higher levels, based on the belief that continued human evolution will continue to produce higher levels of consciousness.  </td>
    <td class=""coral"">Coral </td>
    <td class=""indigo"">Indigo </td>
  </tr>
</table>

These developmental levels can be seen in the fields of psychology, sociology, economics and organizational development, among others. 

I have found the basic concepts of these levels to be tremendously useful in terms of understanding any field of human interaction, including politics and organizational functioning, and so I present my own summaries of them here, described in the ways that I have found most useful. 

Note that Spiral Dynamics originally associated the colors with the levels. Ken Wilber initially used the same colors but, at some point, decided that some divergence of color schemes was necessary. Colors are generally used to avoid the implication that ""higher"" levels are ""better"" than ""lower"" levels. While I respect this intention, I have also added numbers, simply for ease of reference. 

It must be understood that boundaries between these levels may not be crisply defined, or may be defined in different ways, from different perspectives. It must also be understood that individuals and societies should not be thought of as occupying only one level: in general, they function at multiple levels. Higher levels also should not be thought of as superior to lower levels; on the other hand, the order of the levels is generally meant to convey the normal (or perhaps only) sequence of development, so one generally has to go through a lower level before reaching a higher level.  

Note also that what I am referring to as levels 1 - 6 are sometimes referred to as ""first tier"", while higher levels are ""second tier"" or ""third tier"". It seems to me that gradations of levels beyond 6 are sometimes based more on wishful thinking than on actual observation of human social behavior, so I am not entirely convinced that distinctions between levels above first tier are meaningful: of course, proponents of these higher levels would probably insist that my position is based on me being ""stuck"" at a lower level. I will leave it to the reader to make these sorts of judgments.

[4Q]: http://www.pagantuna.com/posts/the-four-quadrants-of-human-knowledge.html

[altitude]: http://holons-news.com/altitudes.html

[bhoe]: http://www.amazon.com/Brief-History-Everything-Ken-Wilber/dp/1570627401/ref=sr_1_3?s=books&ie=UTF8&qid=1351079735&sr=1-3&keywords=ken+wilber

[sd]: http://www.amazon.com/Spiral-Dynamics-Mastering-Values-Leadership/dp/1405133562

[spiraldynamics]: http://en.wikipedia.org/wiki/Spiral_Dynamics

[wilber]:  ../wisdom/authors/ken-wilber.html
"
Humanity	Developmental Levels	2009-10-22	9 - Closed	Culture, Humanity, Philosophy, Practopian	"<p>A number of authors and systems of thought espouse one or another series of developmental levels, in fields of study as diverse as psychology, sociology, economics and organizational development. Ken Wilber was the first author I encountered who proposed an integration of these various developmental progressions into a single unifying scheme. However, much of Ken&#8217;s take  on these levels was heavily influenced by the Spiral Dynamics work done by Clare W. Graves, Don Beck and Chris Cowan. </p><br><br><p>The following reference table lists the levels in this general, unifying model, showing the color schemes used by both Integral Theory and Spiral Dynamics. </p>
"	"I was first introduced to the idea of developmental levels by Ken Wilber, in his book <cite>[A Brief History of Everything][bhoe]</cite>. I've also come across the concept in the book <cite>[Spiral Dynamics: Mastering Values, Leadership and Change][sd]</cite>, by Clare W. Graves, Don Beck and Chris Cowan. As with the Four Quadrants Model, which I discussed in my [last post][4Q], I've found the concept of developmental levels to be tremendously useful, and so wanted to share a brief introductory overview with others. 

These levels represent developments in human culture, as well as stages of development within individuals. Individuals cannot develop to a stage that is not yet present in their surrounding culture; on the other hand, having a culture that has developed to a certain level does not guarantee that all individuals developing within that culture will continue to the same level. It is possible for individuals to stop development at a certain level, or perhaps to favor a certain level over others. 

Each successive level should be understood, not as a replacement for preceding levels, but as a complement to them. Later levels are not inherently better than ""lower"" levels (one reason why colors instead of numbers are often used to represent the levels), but it is better to have higher levels available, both for a culture and for an individual.

One attribute of the levels is that they build on one another. It is not possible to completely skip one level and proceed to a later one. 

Note that, from a cultural perspective, we can be referring to a level as it applies to a society within a certain geopolitical boundary, or to a culture as it exists within an organization, such as a corporation. 

With these introductory concepts in place, let's now look at the levels. 

1. Archaic / Instinctual

An individual operating at this level is focused exclusively on immediate survival needs, and very physical pain / pleasure responses. 

Nothing wrong with this level; we all have such survival instincts, and primitive senses of pain and pleasure; on the other hand, this level doesn't get us very far. 

Newborn children are good examples of this level, as are the occasional ""wild child"" examples of humans growing up without benefit of human company.  

From a societal perspective, this is ground zero. Essentially no human culture exists at this level. In fact, there is nothing about this level that can be presumed to be exclusively human. 

2. Magical / Animistic


<td>Beginning to differentiate self from world, and elements of world from one another, and to intuit causal relationships, but no accurate understanding of these relationships; impulsive, possessing faith in magic and superheroes; tribal kinship bonds, ethnic tribes, ancestral stories, superstitious beliefs. </td>
<td class=""purple"">Purple </td>
<td class=""magenta"">Magenta </td> 

<table>	
  <caption align=""top"">
    Developmental Levels
	</caption>
  <tr>
    <th>#</th>
    <th>Name</th>
	<th>Characteristics</th>
    <th>Spiral Dynamics Color</th>
    <th>Integral Color</th>
  </tr>
  <tr>
    <td>A</td>
    <td>Archaic / Instinctual</td>
    <td>Focused solely on immediate survival needs; minimal sense of self; behavior based on natural instincts and reflexes; concern only for physical self and physical environment; nothing that we would recognize as human society or culture. </td>
    <td class=""beige"">Beige</td>
    <td class=""infrared"">Infrared </td>
  </tr>
  <tr>
    <td>B</td>
    <td>Magical / Animistic</td>
    <td>Beginning to differentiate self from world, and elements of world from one another, and to intuit causal relationships, but no accurate understanding of these relationships; impulsive, possessing faith in magic and superheroes; tribal kinship bonds, ethnic tribes, ancestral stories, superstitious beliefs. </td>
    <td class=""purple"">Purple </td>
    <td class=""magenta"">Magenta </td>
  </tr>
  <tr>
    <td>C</td>
    <td>Tribal / Power Gods </td>
    <td>Egocentric; asserting self for dominance, conquest and power; evident in feudal empires and criminal gangs; people organize themselves based on power hierarchies, with the most powerful individuals leading the weaker; might makes right. </td>
    <td class=""red"">Red </td>
    <td class=""red"">Red </td>
  </tr>
  <tr>
    <td>D</td>
    <td>Traditional / Mythic Order </td>
    <td>People organize themselves around mythic, fundamentalist principles of truth, with groups requiring close conformity to their particular principles, but with no reliable way to make value judgments comparing one group's ""truth"" to another's; group membership now based on professed allegiance and obedience to shared principles, rather than on family ties or geography; fundamental principles held to be absolute and unvarying; belief in the law and in an authoritarian hierarchy from which the law is passed down.         </td>
    <td class=""blue"">Blue </td>
    <td class=""amber"">Amber </td>
  </tr>
  <tr>
    <td>E</td>
    <td>Modern / Rational</td>
    <td>Society advances based on use of the scientific method; quantitative methods are introduced that allow people to make objective decisions about what is true and what is false; truth is determined based on the testing of a variety of hypotheses, rather than reference to an absolute authority; oriented towards achievement of results.  </td>
    <td class=""orange"">Orange </td>
    <td class=""orange"">Orange </td>
  </tr>
  <tr>
    <td>F</td>
    <td>Postmodern / Pluralistic</td>
    <td>Relativistic; situational; accepting of fluid affiliations; acknowledges that there are multiple, valid ways of perceiving reality, and tries to accept all people and life forms by placing value on diversity; may be seen as a means of accommodating multiple tribes, gangs and mythic orders within a single, overarching social order; consensus-based decision-making.   </td>
    <td class=""green"">Green </td>
    <td class=""green"">Green </td>
  </tr>
  <tr>
    <td>G</td>
    <td>Integral / Systemic </td>
    <td>Sees the importance of the earlier levels, and of the developmental model as a whole; while still acknowledging the value of diversity, also recognizes the validity of healthy value hierarchies. </td>
    <td class=""yellow"">Yellow </td>
    <td class=""teal"">Teal </td>
  </tr>
  <tr>
    <td>H</td>
    <td>Integral / Holistic </td>
    <td>Sort of like the prior level but with a more holistic sense of the kosmos.  </td>
    <td class=""turquoise"">Turquoise </td>
    <td class=""turquoise"">Turquoise </td>
  </tr>
  <tr>
    <td>I</td>
    <td>Post-Integral </td>
    <td>This is sort of a place-holder for higher levels, based on the belief that continued human evolution will continue to produce higher levels of consciousness.  </td>
    <td class=""coral"">Coral </td>
    <td class=""indigo"">Indigo </td>
  </tr>
</table>

These developmental levels can be seen in the fields of psychology, sociology, economics and organizational development, among others. 

I have found the basic concepts of these levels to be tremendously useful in terms of understanding any field of human interaction, including politics and organizational functioning, and so I present my own summaries of them here, described in the ways that I have found most useful. 

Note that Spiral Dynamics originally associated the colors with the levels. Ken Wilber initially used the same colors but, at some point, decided that some divergence of color schemes was necessary. Colors are generally used to avoid the implication that ""higher"" levels are ""better"" than ""lower"" levels. While I respect this intention, I have also added numbers, simply for ease of reference. 

It must be understood that boundaries between these levels may not be crisply defined, or may be defined in different ways, from different perspectives. It must also be understood that individuals and societies should not be thought of as occupying only one level: in general, they function at multiple levels. Higher levels also should not be thought of as superior to lower levels; on the other hand, the order of the levels is generally meant to convey the normal (or perhaps only) sequence of development, so one generally has to go through a lower level before reaching a higher level.  

Note also that what I am referring to as levels 1 - 6 are sometimes referred to as ""first tier"", while higher levels are ""second tier"" or ""third tier"". It seems to me that gradations of levels beyond 6 are sometimes based more on wishful thinking than on actual observation of human social behavior, so I am not entirely convinced that distinctions between levels above first tier are meaningful: of course, proponents of these higher levels would probably insist that my position is based on me being ""stuck"" at a lower level. I will leave it to the reader to make these sorts of judgments.

[4Q]: http://www.pagantuna.com/posts/the-four-quadrants-of-human-knowledge.html

[altitude]: http://holons-news.com/altitudes.html

[bhoe]: http://www.amazon.com/Brief-History-Everything-Ken-Wilber/dp/1570627401/ref=sr_1_3?s=books&ie=UTF8&qid=1351079735&sr=1-3&keywords=ken+wilber

[sd]: http://www.amazon.com/Spiral-Dynamics-Mastering-Values-Leadership/dp/1405133562

[spiraldynamics]: http://en.wikipedia.org/wiki/Spiral_Dynamics

[wilber]:  ../wisdom/authors/ken-wilber.html
"
Philosophy	Developmental Levels	2009-10-22	9 - Closed	Culture, Humanity, Philosophy, Practopian	"<p>A number of authors and systems of thought espouse one or another series of developmental levels, in fields of study as diverse as psychology, sociology, economics and organizational development. Ken Wilber was the first author I encountered who proposed an integration of these various developmental progressions into a single unifying scheme. However, much of Ken&#8217;s take  on these levels was heavily influenced by the Spiral Dynamics work done by Clare W. Graves, Don Beck and Chris Cowan. </p><br><br><p>The following reference table lists the levels in this general, unifying model, showing the color schemes used by both Integral Theory and Spiral Dynamics. </p>
"	"I was first introduced to the idea of developmental levels by Ken Wilber, in his book <cite>[A Brief History of Everything][bhoe]</cite>. I've also come across the concept in the book <cite>[Spiral Dynamics: Mastering Values, Leadership and Change][sd]</cite>, by Clare W. Graves, Don Beck and Chris Cowan. As with the Four Quadrants Model, which I discussed in my [last post][4Q], I've found the concept of developmental levels to be tremendously useful, and so wanted to share a brief introductory overview with others. 

These levels represent developments in human culture, as well as stages of development within individuals. Individuals cannot develop to a stage that is not yet present in their surrounding culture; on the other hand, having a culture that has developed to a certain level does not guarantee that all individuals developing within that culture will continue to the same level. It is possible for individuals to stop development at a certain level, or perhaps to favor a certain level over others. 

Each successive level should be understood, not as a replacement for preceding levels, but as a complement to them. Later levels are not inherently better than ""lower"" levels (one reason why colors instead of numbers are often used to represent the levels), but it is better to have higher levels available, both for a culture and for an individual.

One attribute of the levels is that they build on one another. It is not possible to completely skip one level and proceed to a later one. 

Note that, from a cultural perspective, we can be referring to a level as it applies to a society within a certain geopolitical boundary, or to a culture as it exists within an organization, such as a corporation. 

With these introductory concepts in place, let's now look at the levels. 

1. Archaic / Instinctual

An individual operating at this level is focused exclusively on immediate survival needs, and very physical pain / pleasure responses. 

Nothing wrong with this level; we all have such survival instincts, and primitive senses of pain and pleasure; on the other hand, this level doesn't get us very far. 

Newborn children are good examples of this level, as are the occasional ""wild child"" examples of humans growing up without benefit of human company.  

From a societal perspective, this is ground zero. Essentially no human culture exists at this level. In fact, there is nothing about this level that can be presumed to be exclusively human. 

2. Magical / Animistic


<td>Beginning to differentiate self from world, and elements of world from one another, and to intuit causal relationships, but no accurate understanding of these relationships; impulsive, possessing faith in magic and superheroes; tribal kinship bonds, ethnic tribes, ancestral stories, superstitious beliefs. </td>
<td class=""purple"">Purple </td>
<td class=""magenta"">Magenta </td> 

<table>	
  <caption align=""top"">
    Developmental Levels
	</caption>
  <tr>
    <th>#</th>
    <th>Name</th>
	<th>Characteristics</th>
    <th>Spiral Dynamics Color</th>
    <th>Integral Color</th>
  </tr>
  <tr>
    <td>A</td>
    <td>Archaic / Instinctual</td>
    <td>Focused solely on immediate survival needs; minimal sense of self; behavior based on natural instincts and reflexes; concern only for physical self and physical environment; nothing that we would recognize as human society or culture. </td>
    <td class=""beige"">Beige</td>
    <td class=""infrared"">Infrared </td>
  </tr>
  <tr>
    <td>B</td>
    <td>Magical / Animistic</td>
    <td>Beginning to differentiate self from world, and elements of world from one another, and to intuit causal relationships, but no accurate understanding of these relationships; impulsive, possessing faith in magic and superheroes; tribal kinship bonds, ethnic tribes, ancestral stories, superstitious beliefs. </td>
    <td class=""purple"">Purple </td>
    <td class=""magenta"">Magenta </td>
  </tr>
  <tr>
    <td>C</td>
    <td>Tribal / Power Gods </td>
    <td>Egocentric; asserting self for dominance, conquest and power; evident in feudal empires and criminal gangs; people organize themselves based on power hierarchies, with the most powerful individuals leading the weaker; might makes right. </td>
    <td class=""red"">Red </td>
    <td class=""red"">Red </td>
  </tr>
  <tr>
    <td>D</td>
    <td>Traditional / Mythic Order </td>
    <td>People organize themselves around mythic, fundamentalist principles of truth, with groups requiring close conformity to their particular principles, but with no reliable way to make value judgments comparing one group's ""truth"" to another's; group membership now based on professed allegiance and obedience to shared principles, rather than on family ties or geography; fundamental principles held to be absolute and unvarying; belief in the law and in an authoritarian hierarchy from which the law is passed down.         </td>
    <td class=""blue"">Blue </td>
    <td class=""amber"">Amber </td>
  </tr>
  <tr>
    <td>E</td>
    <td>Modern / Rational</td>
    <td>Society advances based on use of the scientific method; quantitative methods are introduced that allow people to make objective decisions about what is true and what is false; truth is determined based on the testing of a variety of hypotheses, rather than reference to an absolute authority; oriented towards achievement of results.  </td>
    <td class=""orange"">Orange </td>
    <td class=""orange"">Orange </td>
  </tr>
  <tr>
    <td>F</td>
    <td>Postmodern / Pluralistic</td>
    <td>Relativistic; situational; accepting of fluid affiliations; acknowledges that there are multiple, valid ways of perceiving reality, and tries to accept all people and life forms by placing value on diversity; may be seen as a means of accommodating multiple tribes, gangs and mythic orders within a single, overarching social order; consensus-based decision-making.   </td>
    <td class=""green"">Green </td>
    <td class=""green"">Green </td>
  </tr>
  <tr>
    <td>G</td>
    <td>Integral / Systemic </td>
    <td>Sees the importance of the earlier levels, and of the developmental model as a whole; while still acknowledging the value of diversity, also recognizes the validity of healthy value hierarchies. </td>
    <td class=""yellow"">Yellow </td>
    <td class=""teal"">Teal </td>
  </tr>
  <tr>
    <td>H</td>
    <td>Integral / Holistic </td>
    <td>Sort of like the prior level but with a more holistic sense of the kosmos.  </td>
    <td class=""turquoise"">Turquoise </td>
    <td class=""turquoise"">Turquoise </td>
  </tr>
  <tr>
    <td>I</td>
    <td>Post-Integral </td>
    <td>This is sort of a place-holder for higher levels, based on the belief that continued human evolution will continue to produce higher levels of consciousness.  </td>
    <td class=""coral"">Coral </td>
    <td class=""indigo"">Indigo </td>
  </tr>
</table>

These developmental levels can be seen in the fields of psychology, sociology, economics and organizational development, among others. 

I have found the basic concepts of these levels to be tremendously useful in terms of understanding any field of human interaction, including politics and organizational functioning, and so I present my own summaries of them here, described in the ways that I have found most useful. 

Note that Spiral Dynamics originally associated the colors with the levels. Ken Wilber initially used the same colors but, at some point, decided that some divergence of color schemes was necessary. Colors are generally used to avoid the implication that ""higher"" levels are ""better"" than ""lower"" levels. While I respect this intention, I have also added numbers, simply for ease of reference. 

It must be understood that boundaries between these levels may not be crisply defined, or may be defined in different ways, from different perspectives. It must also be understood that individuals and societies should not be thought of as occupying only one level: in general, they function at multiple levels. Higher levels also should not be thought of as superior to lower levels; on the other hand, the order of the levels is generally meant to convey the normal (or perhaps only) sequence of development, so one generally has to go through a lower level before reaching a higher level.  

Note also that what I am referring to as levels 1 - 6 are sometimes referred to as ""first tier"", while higher levels are ""second tier"" or ""third tier"". It seems to me that gradations of levels beyond 6 are sometimes based more on wishful thinking than on actual observation of human social behavior, so I am not entirely convinced that distinctions between levels above first tier are meaningful: of course, proponents of these higher levels would probably insist that my position is based on me being ""stuck"" at a lower level. I will leave it to the reader to make these sorts of judgments.

[4Q]: http://www.pagantuna.com/posts/the-four-quadrants-of-human-knowledge.html

[altitude]: http://holons-news.com/altitudes.html

[bhoe]: http://www.amazon.com/Brief-History-Everything-Ken-Wilber/dp/1570627401/ref=sr_1_3?s=books&ie=UTF8&qid=1351079735&sr=1-3&keywords=ken+wilber

[sd]: http://www.amazon.com/Spiral-Dynamics-Mastering-Values-Leadership/dp/1405133562

[spiraldynamics]: http://en.wikipedia.org/wiki/Spiral_Dynamics

[wilber]:  ../wisdom/authors/ken-wilber.html
"
Practopian	Developmental Levels	2009-10-22	9 - Closed	Culture, Humanity, Philosophy, Practopian	"<p>A number of authors and systems of thought espouse one or another series of developmental levels, in fields of study as diverse as psychology, sociology, economics and organizational development. Ken Wilber was the first author I encountered who proposed an integration of these various developmental progressions into a single unifying scheme. However, much of Ken&#8217;s take  on these levels was heavily influenced by the Spiral Dynamics work done by Clare W. Graves, Don Beck and Chris Cowan. </p><br><br><p>The following reference table lists the levels in this general, unifying model, showing the color schemes used by both Integral Theory and Spiral Dynamics. </p>
"	"I was first introduced to the idea of developmental levels by Ken Wilber, in his book <cite>[A Brief History of Everything][bhoe]</cite>. I've also come across the concept in the book <cite>[Spiral Dynamics: Mastering Values, Leadership and Change][sd]</cite>, by Clare W. Graves, Don Beck and Chris Cowan. As with the Four Quadrants Model, which I discussed in my [last post][4Q], I've found the concept of developmental levels to be tremendously useful, and so wanted to share a brief introductory overview with others. 

These levels represent developments in human culture, as well as stages of development within individuals. Individuals cannot develop to a stage that is not yet present in their surrounding culture; on the other hand, having a culture that has developed to a certain level does not guarantee that all individuals developing within that culture will continue to the same level. It is possible for individuals to stop development at a certain level, or perhaps to favor a certain level over others. 

Each successive level should be understood, not as a replacement for preceding levels, but as a complement to them. Later levels are not inherently better than ""lower"" levels (one reason why colors instead of numbers are often used to represent the levels), but it is better to have higher levels available, both for a culture and for an individual.

One attribute of the levels is that they build on one another. It is not possible to completely skip one level and proceed to a later one. 

Note that, from a cultural perspective, we can be referring to a level as it applies to a society within a certain geopolitical boundary, or to a culture as it exists within an organization, such as a corporation. 

With these introductory concepts in place, let's now look at the levels. 

1. Archaic / Instinctual

An individual operating at this level is focused exclusively on immediate survival needs, and very physical pain / pleasure responses. 

Nothing wrong with this level; we all have such survival instincts, and primitive senses of pain and pleasure; on the other hand, this level doesn't get us very far. 

Newborn children are good examples of this level, as are the occasional ""wild child"" examples of humans growing up without benefit of human company.  

From a societal perspective, this is ground zero. Essentially no human culture exists at this level. In fact, there is nothing about this level that can be presumed to be exclusively human. 

2. Magical / Animistic


<td>Beginning to differentiate self from world, and elements of world from one another, and to intuit causal relationships, but no accurate understanding of these relationships; impulsive, possessing faith in magic and superheroes; tribal kinship bonds, ethnic tribes, ancestral stories, superstitious beliefs. </td>
<td class=""purple"">Purple </td>
<td class=""magenta"">Magenta </td> 

<table>	
  <caption align=""top"">
    Developmental Levels
	</caption>
  <tr>
    <th>#</th>
    <th>Name</th>
	<th>Characteristics</th>
    <th>Spiral Dynamics Color</th>
    <th>Integral Color</th>
  </tr>
  <tr>
    <td>A</td>
    <td>Archaic / Instinctual</td>
    <td>Focused solely on immediate survival needs; minimal sense of self; behavior based on natural instincts and reflexes; concern only for physical self and physical environment; nothing that we would recognize as human society or culture. </td>
    <td class=""beige"">Beige</td>
    <td class=""infrared"">Infrared </td>
  </tr>
  <tr>
    <td>B</td>
    <td>Magical / Animistic</td>
    <td>Beginning to differentiate self from world, and elements of world from one another, and to intuit causal relationships, but no accurate understanding of these relationships; impulsive, possessing faith in magic and superheroes; tribal kinship bonds, ethnic tribes, ancestral stories, superstitious beliefs. </td>
    <td class=""purple"">Purple </td>
    <td class=""magenta"">Magenta </td>
  </tr>
  <tr>
    <td>C</td>
    <td>Tribal / Power Gods </td>
    <td>Egocentric; asserting self for dominance, conquest and power; evident in feudal empires and criminal gangs; people organize themselves based on power hierarchies, with the most powerful individuals leading the weaker; might makes right. </td>
    <td class=""red"">Red </td>
    <td class=""red"">Red </td>
  </tr>
  <tr>
    <td>D</td>
    <td>Traditional / Mythic Order </td>
    <td>People organize themselves around mythic, fundamentalist principles of truth, with groups requiring close conformity to their particular principles, but with no reliable way to make value judgments comparing one group's ""truth"" to another's; group membership now based on professed allegiance and obedience to shared principles, rather than on family ties or geography; fundamental principles held to be absolute and unvarying; belief in the law and in an authoritarian hierarchy from which the law is passed down.         </td>
    <td class=""blue"">Blue </td>
    <td class=""amber"">Amber </td>
  </tr>
  <tr>
    <td>E</td>
    <td>Modern / Rational</td>
    <td>Society advances based on use of the scientific method; quantitative methods are introduced that allow people to make objective decisions about what is true and what is false; truth is determined based on the testing of a variety of hypotheses, rather than reference to an absolute authority; oriented towards achievement of results.  </td>
    <td class=""orange"">Orange </td>
    <td class=""orange"">Orange </td>
  </tr>
  <tr>
    <td>F</td>
    <td>Postmodern / Pluralistic</td>
    <td>Relativistic; situational; accepting of fluid affiliations; acknowledges that there are multiple, valid ways of perceiving reality, and tries to accept all people and life forms by placing value on diversity; may be seen as a means of accommodating multiple tribes, gangs and mythic orders within a single, overarching social order; consensus-based decision-making.   </td>
    <td class=""green"">Green </td>
    <td class=""green"">Green </td>
  </tr>
  <tr>
    <td>G</td>
    <td>Integral / Systemic </td>
    <td>Sees the importance of the earlier levels, and of the developmental model as a whole; while still acknowledging the value of diversity, also recognizes the validity of healthy value hierarchies. </td>
    <td class=""yellow"">Yellow </td>
    <td class=""teal"">Teal </td>
  </tr>
  <tr>
    <td>H</td>
    <td>Integral / Holistic </td>
    <td>Sort of like the prior level but with a more holistic sense of the kosmos.  </td>
    <td class=""turquoise"">Turquoise </td>
    <td class=""turquoise"">Turquoise </td>
  </tr>
  <tr>
    <td>I</td>
    <td>Post-Integral </td>
    <td>This is sort of a place-holder for higher levels, based on the belief that continued human evolution will continue to produce higher levels of consciousness.  </td>
    <td class=""coral"">Coral </td>
    <td class=""indigo"">Indigo </td>
  </tr>
</table>

These developmental levels can be seen in the fields of psychology, sociology, economics and organizational development, among others. 

I have found the basic concepts of these levels to be tremendously useful in terms of understanding any field of human interaction, including politics and organizational functioning, and so I present my own summaries of them here, described in the ways that I have found most useful. 

Note that Spiral Dynamics originally associated the colors with the levels. Ken Wilber initially used the same colors but, at some point, decided that some divergence of color schemes was necessary. Colors are generally used to avoid the implication that ""higher"" levels are ""better"" than ""lower"" levels. While I respect this intention, I have also added numbers, simply for ease of reference. 

It must be understood that boundaries between these levels may not be crisply defined, or may be defined in different ways, from different perspectives. It must also be understood that individuals and societies should not be thought of as occupying only one level: in general, they function at multiple levels. Higher levels also should not be thought of as superior to lower levels; on the other hand, the order of the levels is generally meant to convey the normal (or perhaps only) sequence of development, so one generally has to go through a lower level before reaching a higher level.  

Note also that what I am referring to as levels 1 - 6 are sometimes referred to as ""first tier"", while higher levels are ""second tier"" or ""third tier"". It seems to me that gradations of levels beyond 6 are sometimes based more on wishful thinking than on actual observation of human social behavior, so I am not entirely convinced that distinctions between levels above first tier are meaningful: of course, proponents of these higher levels would probably insist that my position is based on me being ""stuck"" at a lower level. I will leave it to the reader to make these sorts of judgments.

[4Q]: http://www.pagantuna.com/posts/the-four-quadrants-of-human-knowledge.html

[altitude]: http://holons-news.com/altitudes.html

[bhoe]: http://www.amazon.com/Brief-History-Everything-Ken-Wilber/dp/1570627401/ref=sr_1_3?s=books&ie=UTF8&qid=1351079735&sr=1-3&keywords=ken+wilber

[sd]: http://www.amazon.com/Spiral-Dynamics-Mastering-Values-Leadership/dp/1405133562

[spiraldynamics]: http://en.wikipedia.org/wiki/Spiral_Dynamics

[wilber]:  ../wisdom/authors/ken-wilber.html
"
Improvement	Model Mania	2009-11-06	9 - Closed	Improvement	"<p>I just finished an interesting new book by Rob Austin, Richard Nolan and Shannon O&#8217;Donnell, called <cite>Adventures of an IT Leader</cite>. The authors offer a fictionalized account of a business executive&#8217;s ups and downs after being assigned the job of CIO for his company. The book does a good job of describing the dilemmas faced by Information Technology leaders, and offers some helpful (although not always simple) advice on how to confront these issues. </p><br><br><p>At the end of the book, just as our hero is starting to feel like he has a handle on this whole CIO thing, he meets up with a shadowy, wizardly character who has been offering cryptic, sometimes zen-like advice over the course of the tale, and this guy proceeds to burst our hero&#8217;s bubble. </p>
"	"<img src=""http://hbr.org/products/11990-HBK-ENG/thumbnail/thumbnail.gif"" alt=""Adventures of an IT Leader Book Cover"" title="""" class=""pic-right""> I just finished an interesting new book by Rob Austin, Richard Nolan and Shannon O'Donnell, called <cite>[Adventures of an IT Leader][adventures]</cite>. The authors offer a fictionalized account of a business executive's ups and downs after being assigned the job of CIO for his company. The book does a good job of describing the dilemmas faced by Information Technology leaders, and offers some helpful (although not always simple) advice on how to confront these issues. 

At the end of the book, just as our hero is starting to feel like he has a handle on this whole CIO thing, he meets up with a shadowy, wizardly character who has been offering cryptic, sometimes zen-like advice over the course of the tale, and this guy proceeds to burst our hero's bubble. 

> ...you said you think you know some things. What you *mean* is, you've constructed simplified representations of how those things work. But don't confuse yourself by thinking your simplified mental constructions are *realistic*, or worse yet, *true* ... Nothing useful is real. If it's complicated enough to be realistic, it's too complicated to be useful. That's why we build models. Representations. When we say we know things, we just mean we have mental models of those things that we like. Often we like them because they've been useful. But let's not confuse having a useful model with actual knowing. 
>
> Managers have a problem ... when they fall in love with a particular model of how something works. When they become convinced that a mental model they have of how something works is the *right* one. When they decide that they *know* something. ... when we become too wedded to a model, we lose our ability to deal with new situations.

And while some elements of the above description might sound a bit perverse -- the model-makers giveth, and the model-makers taketh away -- eerily similar words appear in a recent white paper from the [Software Engineering Institute][sei] called ""[CMMI(r) or Agile: Why Not Embrace Both!][cmmi-or-agile]""

> In some important ways, CMMI is an ‚Äúivory tower‚Äù of theoretical concepts ... CMMI is not and never was meant to be a replacement or a definition of anything in the real world. That is what a model is.

Over the course of my career I've had occasion to become acquainted with a number of different models that attempt to represent some aspects of business reality. To name a few:

* The Software Capability Maturity Model, or [CMM][sw-cmm]
* The Capability Maturity Model Integration, or [CMMI][]
* Configuration Management II, or [CMII][]
* A Quality Management System, or [QMS][], as defined by  ISO 9001 
* The [Malcolm Baldrige National Quality Award][baldrige]
* The [Information Technology Infrastructure Library][itil]
* The Project Management Body of Knowledge, or [PMBOK][]

<img src=""../images/frankenstein.jpg"" alt=""Frankenstein Movie Poster"" title="""" class=""pic-right""> And while all of these models have proven useful at times, I have noticed that there is a disturbing tendency for all of these creations of ours to eventually grow beyond our original intentions, to assume lives of their own, and to eventually turn on their masters, like Frankenstein's monster. 

More specifically, all such models seem to bring with them the following associated problems. 

1. They become more complex over time. The original CMM was 437 pages long. The CMMI for Development, Second Edition, now weighs in at 676 pages. ITIL has [grown in a similar fashion][itil-vs-mof]. And while the increased size of these models makes them more comprehensive and complete and accurate, one may well wonder, in line with the characterizations of models above, whether these attributes actually make them more *useful*. As the character from <cite>The Adventures of an IT Leader</cite> says, ""If it's complicated enough to be realistic, it's too complicated to be useful.""

2. They tend to grow beyond their original scopes and exhibit megalomaniacal tendencies to represent all of reality, as in the utopian quest for a [unified field theory][uft]. As examples, the Quality movement gradually evolved to a comprehensive Quality Management System that encompasses almost every aspect of business management. CMII has evolved to the point where it claims the ability to solve almost all business problems through the proper application of configuration management. And the CMM, originally conceived as a solution to the software crisis, eventually grew into the CMMI, a comprehensive maturity model for all forms of product and service development. And ITIL, initially a model for IT infrastructure management, now has ambitions to describe all of Information Technology. 

3. They become authoritarian. In order to motivate changes in behavior, these models are often offered up as officially sanctioned documents, or referred to as collections of industry best practices. And while such efforts are well-intentioned, and are often helpful in that they can short-circuit endless and ill-informed internal debate, such attitudes ultimately have the unhealthy effect of making these models seem like unquestionable, authoritative bibles. 

4. They exert a hypnotic effect on their followers. Because of their size and complexity, many of these models seem to demand monk-like devotion from those who would seek to understand them. Because of their ambitions, many of their followers seem to actually come to believe that they offer the complete and unadulterated Truth, and not just a single, necessarily imperfect, view of reality. And because they are used as authoritarian instruments, their followers feel compelled to regard them as official versions of reality. 

5. They tend to encourage exclusivity. Let's face it: if you are going to invest enough time and effort to become reasonably well-versed in a model that runs to over 500 pages in length, then you are not likely to immediately put that aside and turn to the next model in order to study that. No. You are going to stick with what you know and try to get some return on your already sizable investment in the model you started with.

6. They form the foundations for businesses of various sorts. Authoring organizations begin to see their models, and continuing improvements to these models, and training on these models, as revenue streams. Authors and consultants spring up and see allegiance to these models as their retirement plans. Vendors build products around these models and sell them to followers at annual conferences. Businesses sink investments into these models and so become committed to them. All of these various forms of financial incentives tend to exacerbate the other problems described here. 

None of which is to suggest that we should avoid models altogether. A well-made model is a wondrous thing, and a good one can help us to understand the world around us and provide helpful guidance for our actions. 

But let's keep them off the pedestals and on their leashes, please, to remind us all which is the servant and which the master. 

-- Herb Bowie (the Model whisperer)

[adventures]: http://www.amazon.com/gp/product/142214660X?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=142214660X
[cmii]: http://www.icmhq.com/
[sw-cmm]: http://en.wikipedia.org/wiki/Capability_Maturity_Model
[cmmi]: http://en.wikipedia.org/wiki/Capability_Maturity_Model_Integration
[qms]: http://en.wikipedia.org/wiki/Quality_management_system
[baldrige]: http://en.wikipedia.org/wiki/Malcolm_Baldrige_National_Quality_Award
[itil]: http://en.wikipedia.org/wiki/Information_Technology_Infrastructure_Library_Version_3
[sei]: http://www.sei.cmu.edu/
[cmmi-or-agile]: http://www.sei.cmu.edu/reports/08tn003.pdf
[uft]: http://en.wikipedia.org/wiki/Unified_field_theory
[itil-vs-mof]: http://www.smbworldasia.com/en/content/itil-vs-mof-find-best-it-framework-option-midmarket
[pmbok]: http://en.wikipedia.org/wiki/A_Guide_to_the_Project_Management_Body_of_Knowledge
"
Improvement	Service Overload	2009-11-23	9 - Closed	Improvement, Technology		"The term ""service"" seems to be popping all over IT these days, so I thought it might be helpful to talk a little about the different ways in which the term is being used by different communities, as well as some potential concerns about taking ""services"" a bit too far. 

<p><img src=""http://media.eremedia.com/uploads/2011/10/22011422/CustomerService.jpg"" alt=""Customer Service"" class=""pic-left"">
<img src=""http://www.w3.org/TR/2003/WD-ws-arch-20030808/images/SOM.png"" alt=""Service-Oriented Model"" class=""pic-right""></p>
<br clear=""all"">

I am aware of four different ways in which this seemingly innocuous term is currently being used. 

1. **[Software-as-a-Service][saas]**.  This is a software delivery model in which customers purchase access to software on a pay-as-you-go basis, and access the software over the Internet. This is in contrast to the more traditional model of buying a license that allows you to install a software package on your own local computing equipment, and then use it for as long as you like. 

2. **[Software-Module-as-a-Service][soa]**. These sorts of services form the basis for what is known as a Service-Oriented Architecture (SOA). This is a reuse model in which applications are built on top of reusable business services, with the services being defined abstractly, and then instantiated typically as software that is loosely coupled via network connections. These types of services are often called [Web services][websvc]. 

	In some ways, SOA is just the most technically up-to-date manifestation of the idea that developers should think of their software in terms of reusable modules, rather than a series of unique applications that inevitably seem to involve the production of a lot of code that ends up looking an awful lot like the code written for the last project. 

3. **[Everything-as-a-Service][itsm]**. The latest version of the [Information Technology Infrastructure Library][itil] (ITIL) takes the position that IT is best thought of as a service management operation in which everything IT delivers to a customer can be thought of as a service. This sort of approach tries to encourage us to take a more customer-focused view of IT work, and to reduce our tendency to consider IT as the job of finding a never-ending series of shiny new toys to bring back to the businesses we support.  

4. **[Service-as-a-Service][service]**. In the midst of all this service frenzy, we should not forget that IT has typically used the term ""service"" in a more traditional sense to describe work that does not provide the customer with any tangible product. Transportation and installation of computing hardware might be one such example; a help desk might be another.    

So, now that we're clear on these varying usages of the term, here are a few points about services worth keeping in mind. 

1. The common thread here is that, over the long term, neither IT customers nor IT want to be encumbered by  long-term commitments to specific pieces of software and hardware -- commitments that are usually associated with the ownership of such technology.

2. The rise of the World-Wide Web has been a key enabler for this sort of service orientation. In essence, the ubiquitous presence of a Web browser and a network connection, alongside the more traditional electrical outlets and telephone jacks, has made it possible to think of everything obtained through the Web as an abstract service, and allowed us to distance ourselves from the actual hardware and software providing the information and interfaces that we are using. 

3. Using the term ""service"" in this many specialized contexts is bound to cause confusion, so we should be careful not to insist that listeners and readers automatically understand the sense in which we want to use the term. 

4. In some ways, the idea that everything IT delivers is a service is a useful conceptual abstraction, but a tough idea for customers to relate to in the real world. I'm reminded of a typical [bill-of-material system][bms], in which everything in the bill of materials is represented by a part or item master. While this makes for a nice, neat data model, when you start using the term ""part"" to talk to your customers about raw materials, or end items, or final assembly operations, you are forcing them to enter your world, rather than meeting them in theirs. 

5. The idea of treating everything as a service is not likely to be met with a warm reception by either customers or workers. 

	Remember the digital music services that were around before Apple entered the market? They offered deals that allowed customers to pay a monthly membership fee, and then listen to as much music as they wanted from the service's libraries. Everybody in the industry thought that such services represented the wave of the future. 

	Then Apple came along. They sold iPods, which were products, not services. Customers paid once to download a particular product from an artist -- a track or an album -- and then had the right to play that piece of music forever. iTunes is the product that plays the music, and connects the iTunes store to your computer and in turn to your iPod. And, of course, this product-based model has been wildly successful. Why? _Because customers tend to become attached to products in a way that they never do to services._ 

	Workers tend to feel the same way. They tend to take pride in the creation of a product to a much greater degree than in the delivery of a service. For example, when Edward Weiler, chief scientist for the Hubble telescope, recently saw the telescope's camera again at the Smithsonian, he said it was like ""[seeing a long-lost brother or sister][hubble].""

So while services in all their many forms are here to stay, it's best to remember to use the term in moderation: a little bit of ""service"" goes a long way.  

[saas]: http://en.wikipedia.org/wiki/Software_as_a_service
[soa]: http://en.wikipedia.org/wiki/Service-oriented_architecture
[websvc]: http://en.wikipedia.org/wiki/Web_service
[itsm]: http://en.wikipedia.org/wiki/ITSM
[itil]: http://en.wikipedia.org/wiki/Information_Technology_Infrastructure_Library
[hubble]: http://www.npr.org/templates/story/story.php?storyId=120539846
[service]: http://en.wikipedia.org/wiki/Service_(economics)
[bms]: http://en.wikipedia.org/wiki/Product_Structure_Modeling
[som]: http://www.w3.org/TR/2003/WD-ws-arch-20030808/images/SOM.png
"
Technology	Service Overload	2009-11-23	9 - Closed	Improvement, Technology		"The term ""service"" seems to be popping all over IT these days, so I thought it might be helpful to talk a little about the different ways in which the term is being used by different communities, as well as some potential concerns about taking ""services"" a bit too far. 

<p><img src=""http://media.eremedia.com/uploads/2011/10/22011422/CustomerService.jpg"" alt=""Customer Service"" class=""pic-left"">
<img src=""http://www.w3.org/TR/2003/WD-ws-arch-20030808/images/SOM.png"" alt=""Service-Oriented Model"" class=""pic-right""></p>
<br clear=""all"">

I am aware of four different ways in which this seemingly innocuous term is currently being used. 

1. **[Software-as-a-Service][saas]**.  This is a software delivery model in which customers purchase access to software on a pay-as-you-go basis, and access the software over the Internet. This is in contrast to the more traditional model of buying a license that allows you to install a software package on your own local computing equipment, and then use it for as long as you like. 

2. **[Software-Module-as-a-Service][soa]**. These sorts of services form the basis for what is known as a Service-Oriented Architecture (SOA). This is a reuse model in which applications are built on top of reusable business services, with the services being defined abstractly, and then instantiated typically as software that is loosely coupled via network connections. These types of services are often called [Web services][websvc]. 

	In some ways, SOA is just the most technically up-to-date manifestation of the idea that developers should think of their software in terms of reusable modules, rather than a series of unique applications that inevitably seem to involve the production of a lot of code that ends up looking an awful lot like the code written for the last project. 

3. **[Everything-as-a-Service][itsm]**. The latest version of the [Information Technology Infrastructure Library][itil] (ITIL) takes the position that IT is best thought of as a service management operation in which everything IT delivers to a customer can be thought of as a service. This sort of approach tries to encourage us to take a more customer-focused view of IT work, and to reduce our tendency to consider IT as the job of finding a never-ending series of shiny new toys to bring back to the businesses we support.  

4. **[Service-as-a-Service][service]**. In the midst of all this service frenzy, we should not forget that IT has typically used the term ""service"" in a more traditional sense to describe work that does not provide the customer with any tangible product. Transportation and installation of computing hardware might be one such example; a help desk might be another.    

So, now that we're clear on these varying usages of the term, here are a few points about services worth keeping in mind. 

1. The common thread here is that, over the long term, neither IT customers nor IT want to be encumbered by  long-term commitments to specific pieces of software and hardware -- commitments that are usually associated with the ownership of such technology.

2. The rise of the World-Wide Web has been a key enabler for this sort of service orientation. In essence, the ubiquitous presence of a Web browser and a network connection, alongside the more traditional electrical outlets and telephone jacks, has made it possible to think of everything obtained through the Web as an abstract service, and allowed us to distance ourselves from the actual hardware and software providing the information and interfaces that we are using. 

3. Using the term ""service"" in this many specialized contexts is bound to cause confusion, so we should be careful not to insist that listeners and readers automatically understand the sense in which we want to use the term. 

4. In some ways, the idea that everything IT delivers is a service is a useful conceptual abstraction, but a tough idea for customers to relate to in the real world. I'm reminded of a typical [bill-of-material system][bms], in which everything in the bill of materials is represented by a part or item master. While this makes for a nice, neat data model, when you start using the term ""part"" to talk to your customers about raw materials, or end items, or final assembly operations, you are forcing them to enter your world, rather than meeting them in theirs. 

5. The idea of treating everything as a service is not likely to be met with a warm reception by either customers or workers. 

	Remember the digital music services that were around before Apple entered the market? They offered deals that allowed customers to pay a monthly membership fee, and then listen to as much music as they wanted from the service's libraries. Everybody in the industry thought that such services represented the wave of the future. 

	Then Apple came along. They sold iPods, which were products, not services. Customers paid once to download a particular product from an artist -- a track or an album -- and then had the right to play that piece of music forever. iTunes is the product that plays the music, and connects the iTunes store to your computer and in turn to your iPod. And, of course, this product-based model has been wildly successful. Why? _Because customers tend to become attached to products in a way that they never do to services._ 

	Workers tend to feel the same way. They tend to take pride in the creation of a product to a much greater degree than in the delivery of a service. For example, when Edward Weiler, chief scientist for the Hubble telescope, recently saw the telescope's camera again at the Smithsonian, he said it was like ""[seeing a long-lost brother or sister][hubble].""

So while services in all their many forms are here to stay, it's best to remember to use the term in moderation: a little bit of ""service"" goes a long way.  

[saas]: http://en.wikipedia.org/wiki/Software_as_a_service
[soa]: http://en.wikipedia.org/wiki/Service-oriented_architecture
[websvc]: http://en.wikipedia.org/wiki/Web_service
[itsm]: http://en.wikipedia.org/wiki/ITSM
[itil]: http://en.wikipedia.org/wiki/Information_Technology_Infrastructure_Library
[hubble]: http://www.npr.org/templates/story/story.php?storyId=120539846
[service]: http://en.wikipedia.org/wiki/Service_(economics)
[bms]: http://en.wikipedia.org/wiki/Product_Structure_Modeling
[som]: http://www.w3.org/TR/2003/WD-ws-arch-20030808/images/SOM.png
"
Education	The Dreyfus Model of Skill Acquisition	2009-12-01	9 - Closed	Education, Improvement, Software Development	"<p>I&#8217;m taking a Mac programming course this semester, and as I wade into the strange world of Objective-C and the Cocoa frameworks, I&#8217;ve been forcibly reminded of the Dreyfus Model of Skill Acquisition. </p><br><br><p>First proposed by Stuart and Hubert Dreyfus in 1980, the model suggests that people go through roughly five stages as they acquire new skills.</p>
"	"I'm taking a Mac programming course this semester, and as I wade into the strange world of Objective-C and the Cocoa frameworks, I've been forcibly reminded of the [Dreyfus Model of Skill Acquisition][dreyfus-model]. 

First proposed by Stuart and Hubert Dreyfus in 1980, the model suggests that people go through roughly five stages as they acquire new skills.

1. Novice

	* rigid adherence to rules
	* no discretional judgment
	* does not feel responsible for outcomes

2. Advanced beginner

	* situational perception still limited
	* all aspects of work are treated separately and given equal importance
	* does not feel responsible for outcomes

3. Competent

	* coping with crowdedness (multiple activity, information)
	* now partially sees action as part of longer term goals
	* conscious, deliberate planning
	* starts to feel accountability for outcomes

4. Proficient

	* holistic view of situation, rather than in terms of aspects
	* sees what is most important in a situation
	* uses maxims for guidance, meaning of maxims may vary according to situation
	* feels responsible for results

5. Expert

	* no longer reliant on rules, guidelines, maxims
	* intuitive grasp of situation, based on tacit knowledge
	* vision of what is possible
	* accepts responsibility for results

For anyone deliverings training, or peddling processes or methodologies or sets of best practices, the Dreyfus model has a number of important implications.

1. When learning something new, everyone starts out as a novice, no matter how much they know in other fields. 

2. The goal of education should be to gradually move people up the scale, towards expertise. There is no way to do this overnight: it takes time. 

3. The most training can do is provide the rules that will help people achieve novice status. Experience is required in order for people to move up the scale in the direction of expertise. 

4. Note that, at lower levels on this scale, people only feel accountable for following the rules they've been given -- not for the actual results achieved! While this is reasonable, this is one excellent reason why you want to move people up the scale as quickly as possible, especially in complex fields such as software development where simple rules are rarely sufficient to achieve success. 

5. If you cannot create teams composed entirely of experts, then it is wise to have at least one expert on each team, and have them act as a lead who can mentor and oversee the work of others. And, of course, if such a lead is given sufficient authority and support, then they will feel a sense of accountability for the success of the team. 

6. It is entirely possible for a novice to follow the rules they've been given and -- when facing a complex problem, without help from an expert -- to fail miserably. Note that, according to the model, such a person will feel no great discomfort, since they only felt accountable for following the rules, and not for the results. In fact, if their organizational environment allows this to happen, such a novice can have this experience repeatedly! However, it is not likely that a succession of such failures will help someone advance up the scale towards expertise very quickly, if at all. 

7. At lower levels of this model, people want and need specific rules to follow. At higher levels, though, experts will have internalized such rules, will no longer need to refer to them in explicit written form, and will often bend or break those rules in response to the specifics of their situation. This is why it is often only [the new guy][new-guy] who actually follows the letter of the law in terms of departmental procedures. 

8. When the rules change, the experts will often give you the most trouble, because they will tend to assume that their tacit knowledge still applies, and will want to continue to operate at the level of expertise they have grown used to. 

9. It is essential to provide written rules, since those at the lower level of this scale will be lost without them. 

10. Beginners will often demand more and better rules since -- from their perspective -- that is all they have and, if they experience failure, they will tend to think that more and better rules are the answer. Beyond a certain point, though, additional and more complex rule sets provide rapidly diminishing returns and, in fact, may simply make it more difficult for novices to advance up the scale towards expertise, since all their efforts will go towards retaining some knowledge of the latest rules. 

11. Your best, most valuable performers will be frustrated, and have their performance inhibited, by an organizational approach that is overly insistent on strict adherence to very detailed, prescriptive sets of rules. 

12. The best rule makers tend to come from the middle of this scale, at the competent level. Those operating at the higher levels tend not to have enough awareness of the rules to be able to document them. 

By the way, thanks to [Dan North][north], who first made me aware of the Dreyfus model and some of its implications in the field of software development. 

[dreyfus-model]: http://en.wikipedia.org/wiki/Dreyfus_model_of_skill_acquisition
[north]: http://www.infoq.com/articles/better-best-practices
[new-guy]: the-documentation-dilemma.html
"
Improvement	The Dreyfus Model of Skill Acquisition	2009-12-01	9 - Closed	Education, Improvement, Software Development	"<p>I&#8217;m taking a Mac programming course this semester, and as I wade into the strange world of Objective-C and the Cocoa frameworks, I&#8217;ve been forcibly reminded of the Dreyfus Model of Skill Acquisition. </p><br><br><p>First proposed by Stuart and Hubert Dreyfus in 1980, the model suggests that people go through roughly five stages as they acquire new skills.</p>
"	"I'm taking a Mac programming course this semester, and as I wade into the strange world of Objective-C and the Cocoa frameworks, I've been forcibly reminded of the [Dreyfus Model of Skill Acquisition][dreyfus-model]. 

First proposed by Stuart and Hubert Dreyfus in 1980, the model suggests that people go through roughly five stages as they acquire new skills.

1. Novice

	* rigid adherence to rules
	* no discretional judgment
	* does not feel responsible for outcomes

2. Advanced beginner

	* situational perception still limited
	* all aspects of work are treated separately and given equal importance
	* does not feel responsible for outcomes

3. Competent

	* coping with crowdedness (multiple activity, information)
	* now partially sees action as part of longer term goals
	* conscious, deliberate planning
	* starts to feel accountability for outcomes

4. Proficient

	* holistic view of situation, rather than in terms of aspects
	* sees what is most important in a situation
	* uses maxims for guidance, meaning of maxims may vary according to situation
	* feels responsible for results

5. Expert

	* no longer reliant on rules, guidelines, maxims
	* intuitive grasp of situation, based on tacit knowledge
	* vision of what is possible
	* accepts responsibility for results

For anyone deliverings training, or peddling processes or methodologies or sets of best practices, the Dreyfus model has a number of important implications.

1. When learning something new, everyone starts out as a novice, no matter how much they know in other fields. 

2. The goal of education should be to gradually move people up the scale, towards expertise. There is no way to do this overnight: it takes time. 

3. The most training can do is provide the rules that will help people achieve novice status. Experience is required in order for people to move up the scale in the direction of expertise. 

4. Note that, at lower levels on this scale, people only feel accountable for following the rules they've been given -- not for the actual results achieved! While this is reasonable, this is one excellent reason why you want to move people up the scale as quickly as possible, especially in complex fields such as software development where simple rules are rarely sufficient to achieve success. 

5. If you cannot create teams composed entirely of experts, then it is wise to have at least one expert on each team, and have them act as a lead who can mentor and oversee the work of others. And, of course, if such a lead is given sufficient authority and support, then they will feel a sense of accountability for the success of the team. 

6. It is entirely possible for a novice to follow the rules they've been given and -- when facing a complex problem, without help from an expert -- to fail miserably. Note that, according to the model, such a person will feel no great discomfort, since they only felt accountable for following the rules, and not for the results. In fact, if their organizational environment allows this to happen, such a novice can have this experience repeatedly! However, it is not likely that a succession of such failures will help someone advance up the scale towards expertise very quickly, if at all. 

7. At lower levels of this model, people want and need specific rules to follow. At higher levels, though, experts will have internalized such rules, will no longer need to refer to them in explicit written form, and will often bend or break those rules in response to the specifics of their situation. This is why it is often only [the new guy][new-guy] who actually follows the letter of the law in terms of departmental procedures. 

8. When the rules change, the experts will often give you the most trouble, because they will tend to assume that their tacit knowledge still applies, and will want to continue to operate at the level of expertise they have grown used to. 

9. It is essential to provide written rules, since those at the lower level of this scale will be lost without them. 

10. Beginners will often demand more and better rules since -- from their perspective -- that is all they have and, if they experience failure, they will tend to think that more and better rules are the answer. Beyond a certain point, though, additional and more complex rule sets provide rapidly diminishing returns and, in fact, may simply make it more difficult for novices to advance up the scale towards expertise, since all their efforts will go towards retaining some knowledge of the latest rules. 

11. Your best, most valuable performers will be frustrated, and have their performance inhibited, by an organizational approach that is overly insistent on strict adherence to very detailed, prescriptive sets of rules. 

12. The best rule makers tend to come from the middle of this scale, at the competent level. Those operating at the higher levels tend not to have enough awareness of the rules to be able to document them. 

By the way, thanks to [Dan North][north], who first made me aware of the Dreyfus model and some of its implications in the field of software development. 

[dreyfus-model]: http://en.wikipedia.org/wiki/Dreyfus_model_of_skill_acquisition
[north]: http://www.infoq.com/articles/better-best-practices
[new-guy]: the-documentation-dilemma.html
"
Software Development	The Dreyfus Model of Skill Acquisition	2009-12-01	9 - Closed	Education, Improvement, Software Development	"<p>I&#8217;m taking a Mac programming course this semester, and as I wade into the strange world of Objective-C and the Cocoa frameworks, I&#8217;ve been forcibly reminded of the Dreyfus Model of Skill Acquisition. </p><br><br><p>First proposed by Stuart and Hubert Dreyfus in 1980, the model suggests that people go through roughly five stages as they acquire new skills.</p>
"	"I'm taking a Mac programming course this semester, and as I wade into the strange world of Objective-C and the Cocoa frameworks, I've been forcibly reminded of the [Dreyfus Model of Skill Acquisition][dreyfus-model]. 

First proposed by Stuart and Hubert Dreyfus in 1980, the model suggests that people go through roughly five stages as they acquire new skills.

1. Novice

	* rigid adherence to rules
	* no discretional judgment
	* does not feel responsible for outcomes

2. Advanced beginner

	* situational perception still limited
	* all aspects of work are treated separately and given equal importance
	* does not feel responsible for outcomes

3. Competent

	* coping with crowdedness (multiple activity, information)
	* now partially sees action as part of longer term goals
	* conscious, deliberate planning
	* starts to feel accountability for outcomes

4. Proficient

	* holistic view of situation, rather than in terms of aspects
	* sees what is most important in a situation
	* uses maxims for guidance, meaning of maxims may vary according to situation
	* feels responsible for results

5. Expert

	* no longer reliant on rules, guidelines, maxims
	* intuitive grasp of situation, based on tacit knowledge
	* vision of what is possible
	* accepts responsibility for results

For anyone deliverings training, or peddling processes or methodologies or sets of best practices, the Dreyfus model has a number of important implications.

1. When learning something new, everyone starts out as a novice, no matter how much they know in other fields. 

2. The goal of education should be to gradually move people up the scale, towards expertise. There is no way to do this overnight: it takes time. 

3. The most training can do is provide the rules that will help people achieve novice status. Experience is required in order for people to move up the scale in the direction of expertise. 

4. Note that, at lower levels on this scale, people only feel accountable for following the rules they've been given -- not for the actual results achieved! While this is reasonable, this is one excellent reason why you want to move people up the scale as quickly as possible, especially in complex fields such as software development where simple rules are rarely sufficient to achieve success. 

5. If you cannot create teams composed entirely of experts, then it is wise to have at least one expert on each team, and have them act as a lead who can mentor and oversee the work of others. And, of course, if such a lead is given sufficient authority and support, then they will feel a sense of accountability for the success of the team. 

6. It is entirely possible for a novice to follow the rules they've been given and -- when facing a complex problem, without help from an expert -- to fail miserably. Note that, according to the model, such a person will feel no great discomfort, since they only felt accountable for following the rules, and not for the results. In fact, if their organizational environment allows this to happen, such a novice can have this experience repeatedly! However, it is not likely that a succession of such failures will help someone advance up the scale towards expertise very quickly, if at all. 

7. At lower levels of this model, people want and need specific rules to follow. At higher levels, though, experts will have internalized such rules, will no longer need to refer to them in explicit written form, and will often bend or break those rules in response to the specifics of their situation. This is why it is often only [the new guy][new-guy] who actually follows the letter of the law in terms of departmental procedures. 

8. When the rules change, the experts will often give you the most trouble, because they will tend to assume that their tacit knowledge still applies, and will want to continue to operate at the level of expertise they have grown used to. 

9. It is essential to provide written rules, since those at the lower level of this scale will be lost without them. 

10. Beginners will often demand more and better rules since -- from their perspective -- that is all they have and, if they experience failure, they will tend to think that more and better rules are the answer. Beyond a certain point, though, additional and more complex rule sets provide rapidly diminishing returns and, in fact, may simply make it more difficult for novices to advance up the scale towards expertise, since all their efforts will go towards retaining some knowledge of the latest rules. 

11. Your best, most valuable performers will be frustrated, and have their performance inhibited, by an organizational approach that is overly insistent on strict adherence to very detailed, prescriptive sets of rules. 

12. The best rule makers tend to come from the middle of this scale, at the competent level. Those operating at the higher levels tend not to have enough awareness of the rules to be able to document them. 

By the way, thanks to [Dan North][north], who first made me aware of the Dreyfus model and some of its implications in the field of software development. 

[dreyfus-model]: http://en.wikipedia.org/wiki/Dreyfus_model_of_skill_acquisition
[north]: http://www.infoq.com/articles/better-best-practices
[new-guy]: the-documentation-dilemma.html
"
CMMI	Process QA	2010-01-17	9 - Closed	CMMI, Improvement	"<p>Process Quality Assurance seems to be one of the most often misunderstood elements of the CMMI. </p>
"	"Process Quality Assurance seems to be one of the most often misunderstood elements of the [CMMI][]. 

I think there a number of strictly semantic reasons for this widespread lack of understanding. 

* The software industry's terminology works against us, since most software development professionals equate quality assurance with testing (part of what the CMMI would categorize as ""product QA""). 

* Industry at large uses a number of different terms to describe roughly similar practices: process surveillance, process monitoring, process audits, process quality assurance, quality gates, etc. 

* The CMM community itself has changed its language over the years. In <cite>Managing the Software Process,</cite> and the original CMM, the term ""Software Quality Assurance"" is used to include process QA, but in the CMMI the phrase becomes ""Process and Product Quality Assurance."" 

* In many QA discussions that talk about more than just testing, the meanings of ""[Quality][]"" and ""[Quality Assurance][qa]"" become so [broad and amorphous as to appear almost mystical to the uninitiated][what-is-quality]. 

And then, of course, there is the whole stigma about audits and auditors, which somehow manages to suggest all the worst aspects of Stalinist Russia, without any of the [corresponding benefits][stalin-benefits]. 

This situation is unfortunate, because all of my experience indicates that -- whatever we call it -- some sort of independent audit of project teams to ensure process discipline -- when done well -- is almost always of significant benefit to an organization. 

In order to understand what kind of value this sort of process QA can deliver, it may help to ask ourselves the following questions.

1. **Do the actions of our project teams have both short- and long-term consequences of some significance?**

	The issue here, of course, is that it is human nature to pay more attention to short-term consequences than long-term ones. The fact that the cookie tastes good today sways us more than the fact that it will add to our growing waistline tomorrow. And the chain of causality linking our actions today to long-term consequences often seems murky, further decreasing the likelihood that we will take the necessary actions today to achieve our desired ends. 

	Interestingly, much of the benefit of Agile arguably comes from moving many of these consequences from the long-term to the short-term: continuous integration, for example, means that the build is broken today, not at some far distant point in the future when integration happens. 

	Some would probably argue that Agile effectively moves *all* significant consequences into the short term, but I don't believe this to be the case. Some attributes of software -- scalability, reliability, the ability to adequately protect sensitive information, compliance with organizational architecture standards, some aspects of usability, and others -- tend not to be as immediately apparent as other attributes, no matter how many agile practices you implement.

2. **Are project teams under significant pressure to maximize short-term consequences -- to meet their delivery dates, to come in under budget, to squeeze a few extra features into the next release, to increase their productivity/velocity, etc.?**

	If so, then of course they will tend to sacrifice long-term consequences for the sake of the short-term ones. (And I've never seen a development team that wasn't under this sort of pressure.)

3. **Is there some relatively simple way to ensure that teams have not skipped any process steps that might be important to achieve the desired long-term consequences?**

	Of course, this is not always the case. In some cases, finding out whether a team has done the ""right"" thing may be exceedingly difficult, and require lots of expert scrutiny. 

	But the question is not whether *everything* is amenable to correction through such process surveillance, but whether *anything* is. Because if anything is, then process QA can pay big benefits. 

	And the fact is that just asking people whether they have done something, or asking them to fill out a form attesting that they have done something, or asking for evidence that they have done something, often has an almost magical ability to influence behavior. Because, as much as we hate to admit it, **if management does not invest the time and effort to perform such oversight, the implicit message is that they don't really want people to take the time to do these things.** This impression is not the result of some vast conspiracy, or a colossal misunderstanding of management's true intentions. It is simply the case that *all the very real pressures to maximize short-term benefits will inevitably influence practitioners to reduce long-term benefits, unless there is some effective counterweight in the form of process QA.*  

I think that the logic of the argument above, accompanied by any sort of understanding of human behavior, will inevitably lead an organization to implement some form of process QA. But now we have further evidence. Much of what I'm saying here is confirmed by a fascinating new book by Atul Gawande called <cite>[The Checklist Manifesto: How to Get Things Right][checklist-manifesto]</cite>. (A [recent interview][npr-gawande] with Gawande on the subject of his new book is available from NPR.) Gawande is a surgeon, and his book is based on data from doctors and hospitals, but it turns out that surgeons are a lot like software developers: highly trained, highly experienced, and performing highly complex work in which no two problems turn out to be exactly alike. 

When asked to consider the use of simple checklists, Gawande reports that most surgeons felt that such things were beneath them, constituted meaningless paperwork, and were a waste of time. 

When they actually used them, though, amazing things happened. In one study, a hospital implemented a simple checklist to perform a series of steps to reduce the chances of patients becoming infected by insertion of central lines to supply intravenous fluids. None of the individual steps were remarkable, and all the surgeons were already familiar with all of the steps. Nonetheless, when the checklist was used consistently over a two-year period -- and when nurses were given the authority to stop doctors if they observed them to be skipping any of the steps -- the hospital calculated that, as a direct result, *use of the checklists had prevented forty-three infections and eight deaths and saved two million dollars*. 

So it turns out that [Watts Humphrey][watts] summarized the situation pretty well back in 1989, in <cite>Managing the Software Process</cite>:

> It is hard for anyone to be objective about auditors. We generally do our own jobs pretty carefully and resent any contrary implication. The need for ""outside"" review, however, is a matter of perspective. Suppose you had just packed a parachute and were about to take a jump. The odds are you would be happy to have a qualified inspector monitor your every step to make sure you did it just right. When quality is vital, some independent checks are necessary, not because people are untrustworthy but because they are human. The issues with software are not whether checks are needed, but who does them and how.

Gawande's book confirms Humphrey's analysis. Before running his tests, most surgeons thought the checklists were a waste of time. After having a chance to use them and see the results, 80% of the doctors thought they were something they wanted to continue to use. The other 20%, though, remained strongly against it. 

But then they asked one more question. ""If you were to have an operation, would you want the checklist?"" Ninety-four percent answered in the affirmative.


[cmmi]: http://en.wikipedia.org/wiki/Capability_Maturity_Model_Integration
[stalin-benefits]: http://www.associatedcontent.com/article/1398771/benefits_of_stalins_rule.html
[quality]: http://en.wikipedia.org/wiki/Quality_(business)
[qa]: http://en.wikipedia.org/wiki/Quality_assurance
[what-is-quality]: http://syque.com/articles/what_is_quality/what_is_quality_1.htm
[checklist-manifesto]: http://www.amazon.com/gp/product/0805091742?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0805091742
[npr-gawande]: http://www.npr.org/templates/story/story.php?storyId=122226184
[watts]: http://en.wikipedia.org/wiki/Watts_Humphrey
"
Improvement	Process QA	2010-01-17	9 - Closed	CMMI, Improvement	"<p>Process Quality Assurance seems to be one of the most often misunderstood elements of the CMMI. </p>
"	"Process Quality Assurance seems to be one of the most often misunderstood elements of the [CMMI][]. 

I think there a number of strictly semantic reasons for this widespread lack of understanding. 

* The software industry's terminology works against us, since most software development professionals equate quality assurance with testing (part of what the CMMI would categorize as ""product QA""). 

* Industry at large uses a number of different terms to describe roughly similar practices: process surveillance, process monitoring, process audits, process quality assurance, quality gates, etc. 

* The CMM community itself has changed its language over the years. In <cite>Managing the Software Process,</cite> and the original CMM, the term ""Software Quality Assurance"" is used to include process QA, but in the CMMI the phrase becomes ""Process and Product Quality Assurance."" 

* In many QA discussions that talk about more than just testing, the meanings of ""[Quality][]"" and ""[Quality Assurance][qa]"" become so [broad and amorphous as to appear almost mystical to the uninitiated][what-is-quality]. 

And then, of course, there is the whole stigma about audits and auditors, which somehow manages to suggest all the worst aspects of Stalinist Russia, without any of the [corresponding benefits][stalin-benefits]. 

This situation is unfortunate, because all of my experience indicates that -- whatever we call it -- some sort of independent audit of project teams to ensure process discipline -- when done well -- is almost always of significant benefit to an organization. 

In order to understand what kind of value this sort of process QA can deliver, it may help to ask ourselves the following questions.

1. **Do the actions of our project teams have both short- and long-term consequences of some significance?**

	The issue here, of course, is that it is human nature to pay more attention to short-term consequences than long-term ones. The fact that the cookie tastes good today sways us more than the fact that it will add to our growing waistline tomorrow. And the chain of causality linking our actions today to long-term consequences often seems murky, further decreasing the likelihood that we will take the necessary actions today to achieve our desired ends. 

	Interestingly, much of the benefit of Agile arguably comes from moving many of these consequences from the long-term to the short-term: continuous integration, for example, means that the build is broken today, not at some far distant point in the future when integration happens. 

	Some would probably argue that Agile effectively moves *all* significant consequences into the short term, but I don't believe this to be the case. Some attributes of software -- scalability, reliability, the ability to adequately protect sensitive information, compliance with organizational architecture standards, some aspects of usability, and others -- tend not to be as immediately apparent as other attributes, no matter how many agile practices you implement.

2. **Are project teams under significant pressure to maximize short-term consequences -- to meet their delivery dates, to come in under budget, to squeeze a few extra features into the next release, to increase their productivity/velocity, etc.?**

	If so, then of course they will tend to sacrifice long-term consequences for the sake of the short-term ones. (And I've never seen a development team that wasn't under this sort of pressure.)

3. **Is there some relatively simple way to ensure that teams have not skipped any process steps that might be important to achieve the desired long-term consequences?**

	Of course, this is not always the case. In some cases, finding out whether a team has done the ""right"" thing may be exceedingly difficult, and require lots of expert scrutiny. 

	But the question is not whether *everything* is amenable to correction through such process surveillance, but whether *anything* is. Because if anything is, then process QA can pay big benefits. 

	And the fact is that just asking people whether they have done something, or asking them to fill out a form attesting that they have done something, or asking for evidence that they have done something, often has an almost magical ability to influence behavior. Because, as much as we hate to admit it, **if management does not invest the time and effort to perform such oversight, the implicit message is that they don't really want people to take the time to do these things.** This impression is not the result of some vast conspiracy, or a colossal misunderstanding of management's true intentions. It is simply the case that *all the very real pressures to maximize short-term benefits will inevitably influence practitioners to reduce long-term benefits, unless there is some effective counterweight in the form of process QA.*  

I think that the logic of the argument above, accompanied by any sort of understanding of human behavior, will inevitably lead an organization to implement some form of process QA. But now we have further evidence. Much of what I'm saying here is confirmed by a fascinating new book by Atul Gawande called <cite>[The Checklist Manifesto: How to Get Things Right][checklist-manifesto]</cite>. (A [recent interview][npr-gawande] with Gawande on the subject of his new book is available from NPR.) Gawande is a surgeon, and his book is based on data from doctors and hospitals, but it turns out that surgeons are a lot like software developers: highly trained, highly experienced, and performing highly complex work in which no two problems turn out to be exactly alike. 

When asked to consider the use of simple checklists, Gawande reports that most surgeons felt that such things were beneath them, constituted meaningless paperwork, and were a waste of time. 

When they actually used them, though, amazing things happened. In one study, a hospital implemented a simple checklist to perform a series of steps to reduce the chances of patients becoming infected by insertion of central lines to supply intravenous fluids. None of the individual steps were remarkable, and all the surgeons were already familiar with all of the steps. Nonetheless, when the checklist was used consistently over a two-year period -- and when nurses were given the authority to stop doctors if they observed them to be skipping any of the steps -- the hospital calculated that, as a direct result, *use of the checklists had prevented forty-three infections and eight deaths and saved two million dollars*. 

So it turns out that [Watts Humphrey][watts] summarized the situation pretty well back in 1989, in <cite>Managing the Software Process</cite>:

> It is hard for anyone to be objective about auditors. We generally do our own jobs pretty carefully and resent any contrary implication. The need for ""outside"" review, however, is a matter of perspective. Suppose you had just packed a parachute and were about to take a jump. The odds are you would be happy to have a qualified inspector monitor your every step to make sure you did it just right. When quality is vital, some independent checks are necessary, not because people are untrustworthy but because they are human. The issues with software are not whether checks are needed, but who does them and how.

Gawande's book confirms Humphrey's analysis. Before running his tests, most surgeons thought the checklists were a waste of time. After having a chance to use them and see the results, 80% of the doctors thought they were something they wanted to continue to use. The other 20%, though, remained strongly against it. 

But then they asked one more question. ""If you were to have an operation, would you want the checklist?"" Ninety-four percent answered in the affirmative.


[cmmi]: http://en.wikipedia.org/wiki/Capability_Maturity_Model_Integration
[stalin-benefits]: http://www.associatedcontent.com/article/1398771/benefits_of_stalins_rule.html
[quality]: http://en.wikipedia.org/wiki/Quality_(business)
[qa]: http://en.wikipedia.org/wiki/Quality_assurance
[what-is-quality]: http://syque.com/articles/what_is_quality/what_is_quality_1.htm
[checklist-manifesto]: http://www.amazon.com/gp/product/0805091742?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0805091742
[npr-gawande]: http://www.npr.org/templates/story/story.php?storyId=122226184
[watts]: http://en.wikipedia.org/wiki/Watts_Humphrey
"
Leadership	Manage Different	2010-02-23	9 - Closed	Leadership	"<p>Perhaps it is time for modern corporations to begin consideration of a different model for management excellence. I&#8217;ve recently made note of three items that might lead one to this conclusion.</p>
"	"<img src=""http://media.wwnorton.com/cms/books/9780393065534_300.jpg"" alt=""The Management Myth Book Cover"" class=""pic-right""> Perhaps it is time for modern corporations to begin consideration of a different model for management excellence. I've recently made note of three items that might lead one to this conclusion.

The first comes from Jim Womack, author of <cite>[Lean Thinking][lean-thinking]</cite>, and Chairman of the [Lean Enterprise Institute][lei], who recently shared via e-mail the summarized responses he received from over 300 correspondents about ""where we go from here in the Lean Community."" What he called Theme Number Three was that ""most of you suggested failures of management at the top, middle, and bottom of your organization as the most important challenge you face in creating a sustainable lean enterprise."" Wow. So, in the quest to ""create ever more value for customers with ever fewer resources,"" (Womack's definition of lean), most improvement professionals state that management is not their ally, not passive bystanders, but their biggest challenge. And they find this to be true whether they are talking about executives, line managers, or middle management. 

The second item is the recent selection of Steve Jobs as ""[CEO of the Decade][ceo-of-decade]"" by <cite>Fortune Magazine</cite>. Such a choice seems an implicit insult to management gurus, pundits, academics and corporate leadership professionals who make their various livings by claiming the ability to describe good management practices in any sort of abstract sense. Jobs, after all, has never claimed to be a good all-purpose executive. He's never attended a business school. He's never exhibited any general ability to turn around failing businesses. He's never authored a best seller purporting to tell the masses how they too can achieve management success. To my knowledge, he's never even claimed any special skill at, or interest in, management as some special discipline unto itself. So if he is CEO of the decade, then this result seems more a repudiation of traditional management practices than an endorsement of them. 

And then there is the new book, <cite>[The Management Myth: Why the Experts Keep Getting it Wrong][management-myth]</cite>, by Matthew Stewart, which very explicitly insults the alleged management experts, by pointing out that the basis for most modern consulting practice and academic management theory is completely unfounded at best, and terribly misguided at worst. For example, Stewart says about self-appointed management gurus:

> The more important lesson to draw from the gurus' underwhelming record is not that they fail to see into the future, but that they are in a certain sense <em>behind</em> the times. If there is one idea that unites the gurus, paradoxically, it is that the conventional wisdom is dead wrong. If you want to succeed, they howl in unison, you must break with the pack. But the guru literature itself <em>is</em> the pack. True to their calling as mass entertainers, they are followers rather than leaders. 

Steve Jobs would seem to agree with this view, since he has said:

> There's an old Wayne Gretzky quote that I love. ""I skate to where the puck is going to be, not where it has been."" And we've always tried to do that at Apple. 

All of this seems consistent with a [previous post][lean-culture] of mine in which I observed that the key cultural shift in lean thinking requires leaders to be trained, coached and motivated ""to solve problems, to analyze alternatives, and to resolve issues,"" rather than to conform to existing structures, as so commonly seems to be the case.  

What, then, are we to say about good management practice? Perhaps, to paraphrase [Raymond Chandler talking about the detective story][chandler-quote], we should conclude that:

> Nor is it any part of my thesis to maintain that we can teach a vital and significant theory of management. There are no vital and significant theories of management; there is only good management, and precious little of that. The growth of corporations and MBA programs has in no way increased the amount; it has merely increased the adeptness with which substitutes can be produced and packaged.

[lean-thinking]: http://www.amazon.com/gp/product/0684810352?ie=UTF8&tag=pagantuna-20

[lei]: http://www.lean.org/

[lean-culture]: a-new-model-for-lean-culture.html

[ceo-of-decade]: http://money.cnn.com/magazines/fortune/steve_jobs/2009/

[management-myth]: http://www.amazon.com/gp/product/0393065537?ie=UTF8&tag=pagantuna-20

[chandler-quote]: ../wisdom/vital-and-significant-forms-of-art.html
"
Leadership	Schembechler, Bacon and Leadership	2010-03-12	9 - Closed	Leadership	"<p>I have a leadership video I&#8217;d like to share with you.</p><br><br><p>First, some explanation. Every year at the University of Michigan the students select their favorite professors and present them with a &#8220;Golden Apple Award.&#8221; The recipients are then invited to deliver their &#8220;ideal last lecture.&#8221;</p><br><br><p>John U. Bacon was a recipient of this award for 2009. Bacon is the co-author, with the late Michigan Football coach Bo Schembechler, of the recent business book, <cite>Bo&#8217;s Lasting Lessons: The Legendary Coach Teaches the Fundamentals of Leadership</cite>.</p><br><br><p>The video clip I&#8217;d like to share is an excerpt from Bacon&#8217;s Ideal Last Lecture. In it, he recounts a story about Schembechler. Now, if you&#8217;re a fan of Wolverine football, then you probably need no further recommendation. But even if you&#8217;re not, I think it&#8217;s a great leadership tale, and Bacon&#8217;s telling of the story is a work of art all its own.</p>
"	"<img src=""http://www.johnubacon.com/images/books/bo.gif"" alt=""Bo's Lasting Lessons"" title="""" class=""pic-right""> 

I have a leadership video I'd like to share with you.

First, some explanation. Every year at the University of Michigan the students select their favorite professors and present them with a ""Golden Apple Award."" The recipients are then invited to deliver their ""ideal last lecture.""

John U. Bacon was a recipient of this award for 2009. Bacon is the co-author, with the late Michigan Football coach Bo Schembechler, of the recent business book, <cite>[Bo's Lasting Lessons: The Legendary Coach Teaches the Fundamentals of Leadership][bo-bacon]</cite>.

The video clip I'd like to share is an excerpt from Bacon's Ideal Last Lecture. In it, he recounts a story about Schembechler. Now, if you're a fan of Wolverine football, then you probably need no further recommendation. But even if you're not, I think it's a great leadership tale, and Bacon's telling of the story is a work of art all its own.

<iframe width=""420"" height=""315"" src=""http://www.youtube.com/embed/4Dux4ugCoXM"" frameborder=""0"" allowfullscreen></iframe>

Now it's obvious that many elements of Bo's leadership style would not translate well into today's corporate environment. For me, though, there are a number of take-aways here that can apply to any leadership role.

1. **Real leadership isn't always as neat and clean as it appears to be from the examples found in textbooks.**

2. **Be memorable.** Different leaders will do this in different ways, but if others can't remember what you told them, then your leadership probably won't be terribly effective.

3. **Be real.** Ultimately, as a leader, all you have to offer is yourself, and if you stop short of giving that 100%, then you cheat yourself and those around you.

4. **Talk straight.** Call things as you see them. Others may not agree with you, but it is your being willing to take a position and tell people how you feel that in turn gives others the freedom to agree or disagree.

5. **Always serve a higher cause.** Note that Bo never asked Andy Cannavino to do anything because Bo had directed him to, or because of Bo's position of authority: instead, he cited the great Michigan football players who had come before them, and the importance of preserving, respecting and extending that tradition.

6. **Focus on natural consequences.** Again, note that Bo never threatened Cannavino with disciplinary action, or with consequences that would be brought on by Bo or his coaching staff: instead, he talked about the losses their football team would suffer and the sense of responsibility that Cannavino would be left with.

7. **Don't wait for assurances that others will follow before you begin to lead.** Note that Bo honestly did not know how Cannavino would respond to their confrontation, and that his coaching staff feared that he was provoking an out-and-out mutiny by his players; these factors, however, did not cause Bo the slightest hesitation.

8. **The highest calling for a leader is not to command others, but to awaken others to their own potential for greatness.** Note that Bo never told Cannavino what to do; he never commanded him or directed him to take any specific, finite actions. And the response Bo got from Cannavino was more than he could have directed: instead of compliance, he got a team captain and a defense that was on fire, delivering 24 quarters of football in which not one touchdown was scored against them.

9. **Leadership is sometimes, of necessity, an incendiary act**: acquisition of fuel and construction of the engine are important, but it still takes a spark of ignition to set things in motion. 

-- Herb Bowie, [U-M College of Literature, Science & the Arts](http://www.lsa.umich.edu/), B.A in English, 1973

[bo-bacon]: http://www.amazon.com/gp/product/044658200X?ie=UTF8&tag=pagantuna-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=044658200X
"
Technology	What does it mean to be World Class IT	2010-05-21	9 - Closed	Technology	"<p>Someone recently asked me the question, &#8220;What does it mean for us to be a &#8216;World Class IT&#8217; organization?&#8221; and I thought it might be worthwhile to share my thoughts on this with others as well. </p><br><br><p>First of all, in my experience, this phrase is often used more as a carrot to motivate organizations than a meaningful description of any sort of specific end state. In particular, its appearance may be a signal that someone thinks an IT organization has become too inwardly focused and complacent about the way they do business, and use of this expression may be a way to get them to consider what&#8217;s going on in the rest of the industry and to think about constructive ways they could improve.</p><br><br><p>That being said, in order to be &#8220;World Class IT,&#8221; I think you have to be effectively doing a delicate balancing act between all of the following, usually opposing, forces:</p>
"	"Someone recently asked me the question, ""What does it mean for us to be a 'World Class IT' organization?"" and I thought it might be worthwhile to share my thoughts on this with others as well. 

First of all, in my experience, this phrase is often used more as a carrot to motivate organizations than a meaningful description of any sort of specific end state. In particular, its appearance may be a signal that someone thinks an IT organization has become too inwardly focused and complacent about the way they do business, and use of this expression may be a way to get them to consider what's going on in the rest of the industry and to think about constructive ways they could improve.

That being said, in order to be ""World Class IT,"" I think you have to be effectively doing a delicate balancing act between all of the following, usually opposing, forces:

1. A desire from the business for new and innovative technical solutions vs. a desire to hold overall IT spending to reasonable levels;

2. A desire to minimize the chances of some sort of catastrophic technology/security/compliance failure vs. a desire to focus investments on projects that can help increase revenues and productivity;

3. A desire to be on the ""leading edge"" of the IT industry vs. a desire to avoid the ""bleeding edge"";

4. A desire to be innovative vs. a desire to seek the safety of the herd;

5. A desire to maintain in-house expertise vs. a desire to source work appropriately in order to achieve greater efficiencies;

6. A desire to effectively prune and maintain your application portfolio vs. a desire to rapidly implement new and innovative functionality;

7. A desire to optimize business processes and applications for specific business segments and functions, vs. a desire to use less expensive, more generic, ""off-the-shelf"" solutions;

8. A desire to use robust, repeatable, stable IT processes vs. a desire to be nimble, adaptive and customer-focused;

9. A desire to be business focused vs. a desire to pursue technical excellence;

10. A desire to be open and transparent with the business vs. a desire to shield customers from at least some of the complexities of the IT problem space;

11. Rigorous integrity in using objective data, metrics and benchmarks to validate your success vs. a willingness to do what seems right before you have all the evidence to prove you're on the best course; 

12. Being open to the opinions of consultants, industry experts and vendors vs. a healthy skepticism of the latest snake oil that's being peddled on the street. 

One might argue that, for some specific situation, there is at least theoretically some perfect ""sweet spot"" where you are achieving the appropriate balance between all these, and call that ""world class IT."" But that is a very tenuous, fragile, delicate balance between constantly shifting forces, and so, rather than it being some place you finally arrive at, ""World Class IT"" is a constant rebalancing act with occasional positive feedback that are getting it right more often than not. 
"
Communication	Ten Reasons to Ditch Your Word Documents	2010-06-07	9 - Closed	Communication, Documentation, Web	"<p>My first word processor was WordStar, running on an Osborne computer sporting the CP/M Operating System. Back in 1982, it seemed an amazing feat to be able to type a document, format it, save it to disk, modify it, and print it, all with a computer sitting on my desktop. Considering that the technology being replaced was a typewriter, this was a brilliant leap forward.</p><br><br><p>Since that time, of course, computing technology has evolved considerably. Computing networks, the Internet, the World Wide Web, Google, Wikipedia, cloud computing, PDAs, smart phones, tablet computers and more have all changed the way we think about computers and communication. </p><br><br><p>And yet, somehow, especially in business and organizational life, the word processor and its output &#8212; a stand-alone textual document, formatted for printing &#8212; have survived to this day substantially unchanged, with word processing and collections of words being treated essentially the same way they were thirty years ago. </p><br><br><p>Is this because such documents and the conventions of traditional word processors are still as useful as ever and continue to make modern businesses more productive?</p><br><br><p>No. Quite to the contrary, I will argue that such office documents are millstones around the necks of otherwise contemporary organizations, quaint anachronisms whose continuing usage is dragging down  productivity and gumming up the works of organizational life. </p>
"	"<img src=""http://www.pcmuseum.ca/images/DOSWordstar4upd-1-200.jpg"" alt=""WordStar"" title=""WordStar"" class=""pic-right"">

My first word processor was [WordStar][], running on an [Osborne computer][Osborne] sporting the [CP/M Operating System][cpm]. Back in 1982, it seemed an amazing feat to be able to type a document, format it, save it to disk, modify it, and print it, all with a computer sitting on my desktop. Considering that the technology being replaced was a [typewriter][], this was a brilliant leap forward.

Since that time, of course, computing technology has evolved considerably. Computing networks, the Internet, the World Wide Web, Google, Wikipedia, cloud computing, PDAs, smart phones, tablet computers and more have all changed the way we think about computers and communication. 

And yet, somehow, especially in business and organizational life, the word processor and its output -- a stand-alone textual document, formatted for printing -- have survived to this day substantially unchanged, with word processing and collections of words being treated essentially the same way they were thirty years ago. 

Is this because such documents and the conventions of traditional word processors are still as useful as ever and continue to make modern businesses more productive?

No. Quite to the contrary, I will argue that such office documents are millstones around the necks of otherwise contemporary organizations, quaint anachronisms whose continuing usage is dragging down  productivity and gumming up the works of organizational life. 

## The Problems ##

Here are the reasons why traditional word processors should be abandoned. 

### 1. Formatting a document for a single output device no longer makes much sense. ###

Back in 1982, when printing a document on a piece of paper was about the only useful way to share it with someone else, formatting a document for printing was eminently practical. But in today's world, when a document might be published as a Web page, a PDF document, a chapter in an e-book, or a smart phone app, it makes little sense for the specific details of margins, typefaces, font sizes, paragraph justification and page breaks to be so visibly part of a document editing interface. 

### 2. The appearance of a document should be separated from its structure. ###

Directly manipulating the specific appearance of an individual chunk of text within a document is a terrible idea. Authors should be focused on the content of their work, not on the details of how each letter, word, heading or paragraph will be formatted in its final presentation. And while tweaking the formatting details of a document until it looks just the way you want it may provide some satisfaction, such embedded details make a document very difficult to maintain, since all this formatting information needs to be individually re-tweaked in order to make any significant changes in the overall appearance of the document.  

### 3. WYSIWYG is an idea whose time has come and gone. ###

One of the main features of modern word processors is an editing interface that presents the author with a visual representation of his document that appears very similar to the final output to be produced. Such [WYSIWYG][] interfaces -- ""What You See Is What You Get"" -- first became popular in the 1980's and early nineties. WYSIWYG seemed like a great idea when it first appeared, because it allowed for a very intuitive, graphical interface that freed the author from having to memorize a number of obscure formatting codes whose effects would only be apparent once the document was printed. 

In today's world, though, WYSIWYG is increasingly meaningless, since what you see will depend on what sort of device the document is ultimately viewed on, and how the reader chooses to configure their document viewing software. Further, WYSIWYG encourages authors to obsess over formatting details as intrinsic elements of the documents they produce, and actually hides the structural details of their documents, since these structural details are typically implicit -- but not actually visible -- in the final output. 

In other words, a WYSIWYG interface runs exactly counter to points 1 and 2 above. 

### 4. Document file formats are needlessly bloated, complex and obtuse. ###

I just opened a new document using a modern word processor, entered the text ""Hello World,"" and saved it to my hard drive. The resulting document takes up 25k. Since disk space is unbelievably cheap these days, this might seem like no big deal, but all that bloat implies needless complexity that makes it difficult to find other software that might do useful things to my document. And so I am stuck with using the same software I used to create it -- or one of a few other pieces of software that seem remarkably similar -- when I want to do other things with or to my writings. 

### 5. Documents lack meaningful identifiers. ###

Documents are identified by their operating system file names. Back in my WordStar days, when I was saving a document onto a floppy disk, that was probably sufficient. But in today's world of ubiquitous networks, superabundant disk storage and e-mail, it is woefully insufficient. Let's say I save several different versions of my document. And I save them in different folders. And I save them with different names and naming conventions, as the mood strikes me. And I save them on a variety of file shares on a network. And I e-mail some of these versions of my document to different people at different times. And the recipients of my e-mails save my attached documents in various places and with various names. And these same recipients also store my e-mail, with my document attached, in various dark recesses of their mail filing system.  

OK, at this point, where is my document? Even more fundamentally, *what* is my document? Is it a single thing, residing in various locations and at various version levels? Or is each storage name and location a different document? And when someone goes to use the document, for whatever purpose it was originally intended, what will they actually see?

Unfortunately, when using a traditional word processor, these are unanswerable questions. 

### 6. A document is an outdated concept. ###

One of the fundamental attributes of a document is that it is meant to stand alone, to be relatively complete and self-contained. Another fundamental attribute of a document is that it is meant to be consumed in a linear fashion, from front to back. 

Both of these attributes make a lot of sense if you consider a document as something intended to be read from a series of printed pages. 

But in today's digitized, hyperlinked, time-sliced world, these attributes seem increasingly dated. I'm going to print something out in order to read it? Rather than read it on my laptop computer, my tablet or my smart phone? And I'm going to read the entire thing through, from front to back, in one sitting? Rather than going to the specific section I want just when I need it? And this document is going to stand alone, rather than being a smaller unit within a larger collection? And I'm going to consider this one document the last word on its particular subject, and not hyperlink to, or Google, other sources while I'm reading this one? 

The answer to all these questions is increasingly the same: ""Not bloody likely."" 

### 7. Hyperlinks are fragile and difficult to maintain. ###

What if I want to create a link within my document, so that an interested reader can view related material? Of course, using any modern word processor, I can select a run of text in a document, and attach a hyperlink to it. And if I'm linking to a Web page, then this works reasonably well. But what if I want to link to another document I created using the same software? How do I identify the document I want to link to? Only by using the file's disk location and file name -- both subject to all the same variations I described above, which means that, before long, the link will probably stop working or take me to an out-of-date version of the document. And when my links stop working, how do I fix them, since my word processing software gives me no way to manage these links other than viewing and editing them one-by-one? Especially since the document file format is so peculiar and inscrutable that no other software exists that will let me manage my hyperlinks in any more meaningful way.

### 8. [Version Control][vc] is missing. ###

Almost all documents of any value change over time. So it is natural to want to inspect a document's version history. It is helpful, when doing so, to have some automatically maintained identifier that can be used to distinguish one version from another. It is useful to be able to see when each version was created, and by whom. And, of course, it is sometimes vitally important to be able to determine what changed going from one version to another. 

None of this is readily available from typical word processing software. As a result, entire corporations make decent profits selling expensive [document management systems][dms] to other corporations, partly in order to provide such basic version control functionality. 

### 9. Collaborative authoring is awkward at best. ###

Much of the meaningful work done today is increasingly team-based. No one person may be the authority on all aspects of a particular subject, and a single document may need to include the expertise of several team members, or may benefit from several sets of eyes having a chance to review and revise its content. While some word processing software makes minor concessions to such a reality, none of them fully embrace it, so real document collaboration is still the exception rather than the rule. 

### 10. Documents don't work well with Web browsers. 

Increasingly, users open documents as a result of following links from other documents, or from Web pages. Unfortunately, when a user has to open a document from a Web browser -- or, even worse, ends up opening a series of documents -- navigation proves tedious and confusing, going something like this. 

* Click on a link.
* Wait for word processing software to load. 
* Respond to a dialog box asking if you want to open the document or save it to your hard drive. 
* View the document using your word processing software. 
* Possibly click on other links, perhaps opening other types of office software. 
* Now try to find a way back to the place that you started from. 
* At some point, deal with all of these applications and windows that are now still open, even though you are no longer using them. 

## The Defense ##

Let me deal with some potential objections to my arguments at this point. Some readers may suspect that I've overstated my case. After all, word processing software has continued to grow and evolve over the years, and in many respects has made attempts to address many of the issues listed above. Is the situation really as bad as all that?

Well, first of all, let me admit that word processing software still has one pretty good use case: production of papers for publication in academic journals. This is a relatively isolated backwater of document production that has not changed appreciably over the years, and word processing software is still a good fit for this particular task. (Unfortunately, this may be a significant contributing factor to the software's broader popularity, since it is after all the academics who teach the courses in which students learn to write class papers using this same software). 

Other than that, though, all of my experience bears out the theoretical criticisms listed above. I've seen people struggle time and time again from the problems I've identified, and recent additions to word processing software and extensions of the document production model seem to be like the proverbial lipstick on the porcine barnyard animal, doing little if anything to address the underlying issues. 

As a matter of fact, in many ways I think I've understated the problem, since other types of ""office"" documents -- such as presentations, spreadsheets and e-mail messages -- suffer from many of these same problems. Even worse, as makers of these traditional software packages have moved into [groupware][], they have carried many of these same problems with them into what would otherwise be a new space. 

## The Alternatives ##

So now what? If the stuff we've been using is no good, what do we do now? Throw it all out and start over?

Luckily, that's not necessary. Because, as organizations have continued using traditional software, a whole new set of tools have emerged and evolved, and are perfectly capable of solving all the problems above, when taken together. All businesses need to do is to use them more extensively. 

Here are the tools that solve the problems above.

1.	[Hypertext Markup Language][html] (HTML) 

	This is the basic language understood by Web browsers. HTML has a nice clean document structure, and a single HTML document can be easily output to multiple device types. Users can typically choose from a number of available browsers, and can configure their browser as it suits them, adjusting things like font sizes and window sizes to their liking. HTML files are small, simple, and relatively easy for mere mortals to understand. Hyperlinks are an innate part of the language, rather than being bolted on as an afterthought. And a whole host of HTML editing tools and assistants are available to choose from.  

2.	[Cascading Style Sheets][css] (CSS)

	A CSS file encapsulates all of the desired formatting information into a separate, compact, simple file that can be shared across a whole set of documents. Many different CSS editing tools are available. 

3.	[Uniform Resource Identifiers][uri] (URIs) and [Universal Resource Locators][url] (URLs)

	These strings of characters are used to identify Web pages and other resources, with each such resource being assigned a unique identifier.

4.	Web Sites

	A Web site offers a set of related pages as an alternative to a stand-alone document. Such an organizational scheme offers a relatively flat, networked structure that allows a user to access what they need when they need it, rather than forcing her to navigate through all the content in a linear fashion.  

5.	[Lightweight Markup Languages][lightweight] 

	HTML is relatively simple, especially when using it for document composition, but the recent appearance of languages such as [Markdown][] and [Textile][] have made it even easier and more natural for authors to create documents in HTML. This blog post, for example, was composed using Markdown. 

6.	Version Control systems

	Version Control software is relatively available, inexpensive and easy to use for plain text files such as those used to store HTML and CSS. And version control is often available as a baked-in function of web content management systems, including wikis. 

7.	[Web Content Management Systems][wcms] (WCMS)

	Many such systems have emerged over the last few years, including several good open source solutions. Such systems make it relatively easy to organize, serve and administer Web sites of any size,  typically incorporating all of the items above: HTML, CSS, URLs/URIs, lightweight markup and version control. Such systems also help to separate the duties associated with Web site creation, allowing content contributors to do so easily, while shielding them from associated complexities having to do with administration and ""look and feel"" issues. 

8.	[Wikis][]

	A wiki is a particular type of Web content management system, with a particular focus on the ease and speed of content creation and organization. Wikis also make it easy to author content collaboratively, and reduce the risk of errors or vandalism, since any past version of any page can be easily restored. The extraordinary success of [Wikipedia][] has given many people the impression that wikis are used solely for encyclopedias, but wiki software can be used to create any sort of Web or [intranet][] site. 

## In Summary ##

So that's it. There are still good reasons to use word processing software, when creating legal documents or preparing printed materials. But for the great majority of informal written communication within large organizations, there are much better choices available today that can help improve productivity and decrease the possibilities of errors due to miscommunication. 

All it will take to realize these gains is for office workers of the world to unite, throw off the chains of their anachronistic word processing packages, and enter the modern age of Web publishing!

*The author, in addition to using a typewriter and WordStar, has prepared text for print using a combination of [Microsoft Word][ms-word] and [PageMaker][], and has published text on the Web and corporate intranets using HTML, CSS, Textile, Markdown, [BBEdit][], [TextMate][], [Drupal][] and [Confluence][].* 

[bbEdit]:     	http://www.barebones.com/products/bbedit/
[confluence]:	http://www.atlassian.com/software/confluence/
[cpm]:		  	http://en.wikipedia.org/wiki/CP/M_operating_system
[css]:		  	http://en.wikipedia.org/wiki/Css
[dms]:		  	http://en.wikipedia.org/wiki/Document_management_system
[drupal]:		http://drupal.org/
[groupware]:  	http://en.wikipedia.org/wiki/Collaborative_software
[html]:       	http://en.wikipedia.org/wiki/Html
[intranet]:   	http://en.wikipedia.org/wiki/Intranet
[lightweight]: 	http://en.wikipedia.org/wiki/Lightweight_markup_language
[markdown]:   	http://daringfireball.net/projects/markdown/
[ms-word]:	  	http://en.wikipedia.org/wiki/Microsoft_Word
[navigator]:  	http://en.wikipedia.org/wiki/Netscape_Navigator
[Osborne]:	  	http://en.wikipedia.org/wiki/Osborne_1
[PageMaker]:  	http://en.wikipedia.org/wiki/Adobe_PageMaker
[textile]:    	http://www.textism.com/tools/textile/
[textmate]:   	http://macromates.com/
[typewriter]: 	http://en.wikipedia.org/wiki/Typewriter
[uri]: 		  	http://en.wikipedia.org/wiki/Uniform_Resource_Identifier
[url]:		  	http://en.wikipedia.org/wiki/Url
[vc]:         	http://en.wikipedia.org/wiki/Revision_control
[wcms]:		  	http://en.wikipedia.org/wiki/Web_content_management_system
[wikipedia]:  	http://en.wikipedia.org/wiki/Wikipedia
[wikis]:      	http://en.wikipedia.org/wiki/Wiki
[WordStar]:   	http://en.wikipedia.org/wiki/WordStar
[www]:        	http://en.wikipedia.org/wiki/World_Wide_Web
[wysiwyg]:    	http://en.wikipedia.org/wiki/WYSIWYG
"
Documentation	Ten Reasons to Ditch Your Word Documents	2010-06-07	9 - Closed	Communication, Documentation, Web	"<p>My first word processor was WordStar, running on an Osborne computer sporting the CP/M Operating System. Back in 1982, it seemed an amazing feat to be able to type a document, format it, save it to disk, modify it, and print it, all with a computer sitting on my desktop. Considering that the technology being replaced was a typewriter, this was a brilliant leap forward.</p><br><br><p>Since that time, of course, computing technology has evolved considerably. Computing networks, the Internet, the World Wide Web, Google, Wikipedia, cloud computing, PDAs, smart phones, tablet computers and more have all changed the way we think about computers and communication. </p><br><br><p>And yet, somehow, especially in business and organizational life, the word processor and its output &#8212; a stand-alone textual document, formatted for printing &#8212; have survived to this day substantially unchanged, with word processing and collections of words being treated essentially the same way they were thirty years ago. </p><br><br><p>Is this because such documents and the conventions of traditional word processors are still as useful as ever and continue to make modern businesses more productive?</p><br><br><p>No. Quite to the contrary, I will argue that such office documents are millstones around the necks of otherwise contemporary organizations, quaint anachronisms whose continuing usage is dragging down  productivity and gumming up the works of organizational life. </p>
"	"<img src=""http://www.pcmuseum.ca/images/DOSWordstar4upd-1-200.jpg"" alt=""WordStar"" title=""WordStar"" class=""pic-right"">

My first word processor was [WordStar][], running on an [Osborne computer][Osborne] sporting the [CP/M Operating System][cpm]. Back in 1982, it seemed an amazing feat to be able to type a document, format it, save it to disk, modify it, and print it, all with a computer sitting on my desktop. Considering that the technology being replaced was a [typewriter][], this was a brilliant leap forward.

Since that time, of course, computing technology has evolved considerably. Computing networks, the Internet, the World Wide Web, Google, Wikipedia, cloud computing, PDAs, smart phones, tablet computers and more have all changed the way we think about computers and communication. 

And yet, somehow, especially in business and organizational life, the word processor and its output -- a stand-alone textual document, formatted for printing -- have survived to this day substantially unchanged, with word processing and collections of words being treated essentially the same way they were thirty years ago. 

Is this because such documents and the conventions of traditional word processors are still as useful as ever and continue to make modern businesses more productive?

No. Quite to the contrary, I will argue that such office documents are millstones around the necks of otherwise contemporary organizations, quaint anachronisms whose continuing usage is dragging down  productivity and gumming up the works of organizational life. 

## The Problems ##

Here are the reasons why traditional word processors should be abandoned. 

### 1. Formatting a document for a single output device no longer makes much sense. ###

Back in 1982, when printing a document on a piece of paper was about the only useful way to share it with someone else, formatting a document for printing was eminently practical. But in today's world, when a document might be published as a Web page, a PDF document, a chapter in an e-book, or a smart phone app, it makes little sense for the specific details of margins, typefaces, font sizes, paragraph justification and page breaks to be so visibly part of a document editing interface. 

### 2. The appearance of a document should be separated from its structure. ###

Directly manipulating the specific appearance of an individual chunk of text within a document is a terrible idea. Authors should be focused on the content of their work, not on the details of how each letter, word, heading or paragraph will be formatted in its final presentation. And while tweaking the formatting details of a document until it looks just the way you want it may provide some satisfaction, such embedded details make a document very difficult to maintain, since all this formatting information needs to be individually re-tweaked in order to make any significant changes in the overall appearance of the document.  

### 3. WYSIWYG is an idea whose time has come and gone. ###

One of the main features of modern word processors is an editing interface that presents the author with a visual representation of his document that appears very similar to the final output to be produced. Such [WYSIWYG][] interfaces -- ""What You See Is What You Get"" -- first became popular in the 1980's and early nineties. WYSIWYG seemed like a great idea when it first appeared, because it allowed for a very intuitive, graphical interface that freed the author from having to memorize a number of obscure formatting codes whose effects would only be apparent once the document was printed. 

In today's world, though, WYSIWYG is increasingly meaningless, since what you see will depend on what sort of device the document is ultimately viewed on, and how the reader chooses to configure their document viewing software. Further, WYSIWYG encourages authors to obsess over formatting details as intrinsic elements of the documents they produce, and actually hides the structural details of their documents, since these structural details are typically implicit -- but not actually visible -- in the final output. 

In other words, a WYSIWYG interface runs exactly counter to points 1 and 2 above. 

### 4. Document file formats are needlessly bloated, complex and obtuse. ###

I just opened a new document using a modern word processor, entered the text ""Hello World,"" and saved it to my hard drive. The resulting document takes up 25k. Since disk space is unbelievably cheap these days, this might seem like no big deal, but all that bloat implies needless complexity that makes it difficult to find other software that might do useful things to my document. And so I am stuck with using the same software I used to create it -- or one of a few other pieces of software that seem remarkably similar -- when I want to do other things with or to my writings. 

### 5. Documents lack meaningful identifiers. ###

Documents are identified by their operating system file names. Back in my WordStar days, when I was saving a document onto a floppy disk, that was probably sufficient. But in today's world of ubiquitous networks, superabundant disk storage and e-mail, it is woefully insufficient. Let's say I save several different versions of my document. And I save them in different folders. And I save them with different names and naming conventions, as the mood strikes me. And I save them on a variety of file shares on a network. And I e-mail some of these versions of my document to different people at different times. And the recipients of my e-mails save my attached documents in various places and with various names. And these same recipients also store my e-mail, with my document attached, in various dark recesses of their mail filing system.  

OK, at this point, where is my document? Even more fundamentally, *what* is my document? Is it a single thing, residing in various locations and at various version levels? Or is each storage name and location a different document? And when someone goes to use the document, for whatever purpose it was originally intended, what will they actually see?

Unfortunately, when using a traditional word processor, these are unanswerable questions. 

### 6. A document is an outdated concept. ###

One of the fundamental attributes of a document is that it is meant to stand alone, to be relatively complete and self-contained. Another fundamental attribute of a document is that it is meant to be consumed in a linear fashion, from front to back. 

Both of these attributes make a lot of sense if you consider a document as something intended to be read from a series of printed pages. 

But in today's digitized, hyperlinked, time-sliced world, these attributes seem increasingly dated. I'm going to print something out in order to read it? Rather than read it on my laptop computer, my tablet or my smart phone? And I'm going to read the entire thing through, from front to back, in one sitting? Rather than going to the specific section I want just when I need it? And this document is going to stand alone, rather than being a smaller unit within a larger collection? And I'm going to consider this one document the last word on its particular subject, and not hyperlink to, or Google, other sources while I'm reading this one? 

The answer to all these questions is increasingly the same: ""Not bloody likely."" 

### 7. Hyperlinks are fragile and difficult to maintain. ###

What if I want to create a link within my document, so that an interested reader can view related material? Of course, using any modern word processor, I can select a run of text in a document, and attach a hyperlink to it. And if I'm linking to a Web page, then this works reasonably well. But what if I want to link to another document I created using the same software? How do I identify the document I want to link to? Only by using the file's disk location and file name -- both subject to all the same variations I described above, which means that, before long, the link will probably stop working or take me to an out-of-date version of the document. And when my links stop working, how do I fix them, since my word processing software gives me no way to manage these links other than viewing and editing them one-by-one? Especially since the document file format is so peculiar and inscrutable that no other software exists that will let me manage my hyperlinks in any more meaningful way.

### 8. [Version Control][vc] is missing. ###

Almost all documents of any value change over time. So it is natural to want to inspect a document's version history. It is helpful, when doing so, to have some automatically maintained identifier that can be used to distinguish one version from another. It is useful to be able to see when each version was created, and by whom. And, of course, it is sometimes vitally important to be able to determine what changed going from one version to another. 

None of this is readily available from typical word processing software. As a result, entire corporations make decent profits selling expensive [document management systems][dms] to other corporations, partly in order to provide such basic version control functionality. 

### 9. Collaborative authoring is awkward at best. ###

Much of the meaningful work done today is increasingly team-based. No one person may be the authority on all aspects of a particular subject, and a single document may need to include the expertise of several team members, or may benefit from several sets of eyes having a chance to review and revise its content. While some word processing software makes minor concessions to such a reality, none of them fully embrace it, so real document collaboration is still the exception rather than the rule. 

### 10. Documents don't work well with Web browsers. 

Increasingly, users open documents as a result of following links from other documents, or from Web pages. Unfortunately, when a user has to open a document from a Web browser -- or, even worse, ends up opening a series of documents -- navigation proves tedious and confusing, going something like this. 

* Click on a link.
* Wait for word processing software to load. 
* Respond to a dialog box asking if you want to open the document or save it to your hard drive. 
* View the document using your word processing software. 
* Possibly click on other links, perhaps opening other types of office software. 
* Now try to find a way back to the place that you started from. 
* At some point, deal with all of these applications and windows that are now still open, even though you are no longer using them. 

## The Defense ##

Let me deal with some potential objections to my arguments at this point. Some readers may suspect that I've overstated my case. After all, word processing software has continued to grow and evolve over the years, and in many respects has made attempts to address many of the issues listed above. Is the situation really as bad as all that?

Well, first of all, let me admit that word processing software still has one pretty good use case: production of papers for publication in academic journals. This is a relatively isolated backwater of document production that has not changed appreciably over the years, and word processing software is still a good fit for this particular task. (Unfortunately, this may be a significant contributing factor to the software's broader popularity, since it is after all the academics who teach the courses in which students learn to write class papers using this same software). 

Other than that, though, all of my experience bears out the theoretical criticisms listed above. I've seen people struggle time and time again from the problems I've identified, and recent additions to word processing software and extensions of the document production model seem to be like the proverbial lipstick on the porcine barnyard animal, doing little if anything to address the underlying issues. 

As a matter of fact, in many ways I think I've understated the problem, since other types of ""office"" documents -- such as presentations, spreadsheets and e-mail messages -- suffer from many of these same problems. Even worse, as makers of these traditional software packages have moved into [groupware][], they have carried many of these same problems with them into what would otherwise be a new space. 

## The Alternatives ##

So now what? If the stuff we've been using is no good, what do we do now? Throw it all out and start over?

Luckily, that's not necessary. Because, as organizations have continued using traditional software, a whole new set of tools have emerged and evolved, and are perfectly capable of solving all the problems above, when taken together. All businesses need to do is to use them more extensively. 

Here are the tools that solve the problems above.

1.	[Hypertext Markup Language][html] (HTML) 

	This is the basic language understood by Web browsers. HTML has a nice clean document structure, and a single HTML document can be easily output to multiple device types. Users can typically choose from a number of available browsers, and can configure their browser as it suits them, adjusting things like font sizes and window sizes to their liking. HTML files are small, simple, and relatively easy for mere mortals to understand. Hyperlinks are an innate part of the language, rather than being bolted on as an afterthought. And a whole host of HTML editing tools and assistants are available to choose from.  

2.	[Cascading Style Sheets][css] (CSS)

	A CSS file encapsulates all of the desired formatting information into a separate, compact, simple file that can be shared across a whole set of documents. Many different CSS editing tools are available. 

3.	[Uniform Resource Identifiers][uri] (URIs) and [Universal Resource Locators][url] (URLs)

	These strings of characters are used to identify Web pages and other resources, with each such resource being assigned a unique identifier.

4.	Web Sites

	A Web site offers a set of related pages as an alternative to a stand-alone document. Such an organizational scheme offers a relatively flat, networked structure that allows a user to access what they need when they need it, rather than forcing her to navigate through all the content in a linear fashion.  

5.	[Lightweight Markup Languages][lightweight] 

	HTML is relatively simple, especially when using it for document composition, but the recent appearance of languages such as [Markdown][] and [Textile][] have made it even easier and more natural for authors to create documents in HTML. This blog post, for example, was composed using Markdown. 

6.	Version Control systems

	Version Control software is relatively available, inexpensive and easy to use for plain text files such as those used to store HTML and CSS. And version control is often available as a baked-in function of web content management systems, including wikis. 

7.	[Web Content Management Systems][wcms] (WCMS)

	Many such systems have emerged over the last few years, including several good open source solutions. Such systems make it relatively easy to organize, serve and administer Web sites of any size,  typically incorporating all of the items above: HTML, CSS, URLs/URIs, lightweight markup and version control. Such systems also help to separate the duties associated with Web site creation, allowing content contributors to do so easily, while shielding them from associated complexities having to do with administration and ""look and feel"" issues. 

8.	[Wikis][]

	A wiki is a particular type of Web content management system, with a particular focus on the ease and speed of content creation and organization. Wikis also make it easy to author content collaboratively, and reduce the risk of errors or vandalism, since any past version of any page can be easily restored. The extraordinary success of [Wikipedia][] has given many people the impression that wikis are used solely for encyclopedias, but wiki software can be used to create any sort of Web or [intranet][] site. 

## In Summary ##

So that's it. There are still good reasons to use word processing software, when creating legal documents or preparing printed materials. But for the great majority of informal written communication within large organizations, there are much better choices available today that can help improve productivity and decrease the possibilities of errors due to miscommunication. 

All it will take to realize these gains is for office workers of the world to unite, throw off the chains of their anachronistic word processing packages, and enter the modern age of Web publishing!

*The author, in addition to using a typewriter and WordStar, has prepared text for print using a combination of [Microsoft Word][ms-word] and [PageMaker][], and has published text on the Web and corporate intranets using HTML, CSS, Textile, Markdown, [BBEdit][], [TextMate][], [Drupal][] and [Confluence][].* 

[bbEdit]:     	http://www.barebones.com/products/bbedit/
[confluence]:	http://www.atlassian.com/software/confluence/
[cpm]:		  	http://en.wikipedia.org/wiki/CP/M_operating_system
[css]:		  	http://en.wikipedia.org/wiki/Css
[dms]:		  	http://en.wikipedia.org/wiki/Document_management_system
[drupal]:		http://drupal.org/
[groupware]:  	http://en.wikipedia.org/wiki/Collaborative_software
[html]:       	http://en.wikipedia.org/wiki/Html
[intranet]:   	http://en.wikipedia.org/wiki/Intranet
[lightweight]: 	http://en.wikipedia.org/wiki/Lightweight_markup_language
[markdown]:   	http://daringfireball.net/projects/markdown/
[ms-word]:	  	http://en.wikipedia.org/wiki/Microsoft_Word
[navigator]:  	http://en.wikipedia.org/wiki/Netscape_Navigator
[Osborne]:	  	http://en.wikipedia.org/wiki/Osborne_1
[PageMaker]:  	http://en.wikipedia.org/wiki/Adobe_PageMaker
[textile]:    	http://www.textism.com/tools/textile/
[textmate]:   	http://macromates.com/
[typewriter]: 	http://en.wikipedia.org/wiki/Typewriter
[uri]: 		  	http://en.wikipedia.org/wiki/Uniform_Resource_Identifier
[url]:		  	http://en.wikipedia.org/wiki/Url
[vc]:         	http://en.wikipedia.org/wiki/Revision_control
[wcms]:		  	http://en.wikipedia.org/wiki/Web_content_management_system
[wikipedia]:  	http://en.wikipedia.org/wiki/Wikipedia
[wikis]:      	http://en.wikipedia.org/wiki/Wiki
[WordStar]:   	http://en.wikipedia.org/wiki/WordStar
[www]:        	http://en.wikipedia.org/wiki/World_Wide_Web
[wysiwyg]:    	http://en.wikipedia.org/wiki/WYSIWYG
"
Web	Ten Reasons to Ditch Your Word Documents	2010-06-07	9 - Closed	Communication, Documentation, Web	"<p>My first word processor was WordStar, running on an Osborne computer sporting the CP/M Operating System. Back in 1982, it seemed an amazing feat to be able to type a document, format it, save it to disk, modify it, and print it, all with a computer sitting on my desktop. Considering that the technology being replaced was a typewriter, this was a brilliant leap forward.</p><br><br><p>Since that time, of course, computing technology has evolved considerably. Computing networks, the Internet, the World Wide Web, Google, Wikipedia, cloud computing, PDAs, smart phones, tablet computers and more have all changed the way we think about computers and communication. </p><br><br><p>And yet, somehow, especially in business and organizational life, the word processor and its output &#8212; a stand-alone textual document, formatted for printing &#8212; have survived to this day substantially unchanged, with word processing and collections of words being treated essentially the same way they were thirty years ago. </p><br><br><p>Is this because such documents and the conventions of traditional word processors are still as useful as ever and continue to make modern businesses more productive?</p><br><br><p>No. Quite to the contrary, I will argue that such office documents are millstones around the necks of otherwise contemporary organizations, quaint anachronisms whose continuing usage is dragging down  productivity and gumming up the works of organizational life. </p>
"	"<img src=""http://www.pcmuseum.ca/images/DOSWordstar4upd-1-200.jpg"" alt=""WordStar"" title=""WordStar"" class=""pic-right"">

My first word processor was [WordStar][], running on an [Osborne computer][Osborne] sporting the [CP/M Operating System][cpm]. Back in 1982, it seemed an amazing feat to be able to type a document, format it, save it to disk, modify it, and print it, all with a computer sitting on my desktop. Considering that the technology being replaced was a [typewriter][], this was a brilliant leap forward.

Since that time, of course, computing technology has evolved considerably. Computing networks, the Internet, the World Wide Web, Google, Wikipedia, cloud computing, PDAs, smart phones, tablet computers and more have all changed the way we think about computers and communication. 

And yet, somehow, especially in business and organizational life, the word processor and its output -- a stand-alone textual document, formatted for printing -- have survived to this day substantially unchanged, with word processing and collections of words being treated essentially the same way they were thirty years ago. 

Is this because such documents and the conventions of traditional word processors are still as useful as ever and continue to make modern businesses more productive?

No. Quite to the contrary, I will argue that such office documents are millstones around the necks of otherwise contemporary organizations, quaint anachronisms whose continuing usage is dragging down  productivity and gumming up the works of organizational life. 

## The Problems ##

Here are the reasons why traditional word processors should be abandoned. 

### 1. Formatting a document for a single output device no longer makes much sense. ###

Back in 1982, when printing a document on a piece of paper was about the only useful way to share it with someone else, formatting a document for printing was eminently practical. But in today's world, when a document might be published as a Web page, a PDF document, a chapter in an e-book, or a smart phone app, it makes little sense for the specific details of margins, typefaces, font sizes, paragraph justification and page breaks to be so visibly part of a document editing interface. 

### 2. The appearance of a document should be separated from its structure. ###

Directly manipulating the specific appearance of an individual chunk of text within a document is a terrible idea. Authors should be focused on the content of their work, not on the details of how each letter, word, heading or paragraph will be formatted in its final presentation. And while tweaking the formatting details of a document until it looks just the way you want it may provide some satisfaction, such embedded details make a document very difficult to maintain, since all this formatting information needs to be individually re-tweaked in order to make any significant changes in the overall appearance of the document.  

### 3. WYSIWYG is an idea whose time has come and gone. ###

One of the main features of modern word processors is an editing interface that presents the author with a visual representation of his document that appears very similar to the final output to be produced. Such [WYSIWYG][] interfaces -- ""What You See Is What You Get"" -- first became popular in the 1980's and early nineties. WYSIWYG seemed like a great idea when it first appeared, because it allowed for a very intuitive, graphical interface that freed the author from having to memorize a number of obscure formatting codes whose effects would only be apparent once the document was printed. 

In today's world, though, WYSIWYG is increasingly meaningless, since what you see will depend on what sort of device the document is ultimately viewed on, and how the reader chooses to configure their document viewing software. Further, WYSIWYG encourages authors to obsess over formatting details as intrinsic elements of the documents they produce, and actually hides the structural details of their documents, since these structural details are typically implicit -- but not actually visible -- in the final output. 

In other words, a WYSIWYG interface runs exactly counter to points 1 and 2 above. 

### 4. Document file formats are needlessly bloated, complex and obtuse. ###

I just opened a new document using a modern word processor, entered the text ""Hello World,"" and saved it to my hard drive. The resulting document takes up 25k. Since disk space is unbelievably cheap these days, this might seem like no big deal, but all that bloat implies needless complexity that makes it difficult to find other software that might do useful things to my document. And so I am stuck with using the same software I used to create it -- or one of a few other pieces of software that seem remarkably similar -- when I want to do other things with or to my writings. 

### 5. Documents lack meaningful identifiers. ###

Documents are identified by their operating system file names. Back in my WordStar days, when I was saving a document onto a floppy disk, that was probably sufficient. But in today's world of ubiquitous networks, superabundant disk storage and e-mail, it is woefully insufficient. Let's say I save several different versions of my document. And I save them in different folders. And I save them with different names and naming conventions, as the mood strikes me. And I save them on a variety of file shares on a network. And I e-mail some of these versions of my document to different people at different times. And the recipients of my e-mails save my attached documents in various places and with various names. And these same recipients also store my e-mail, with my document attached, in various dark recesses of their mail filing system.  

OK, at this point, where is my document? Even more fundamentally, *what* is my document? Is it a single thing, residing in various locations and at various version levels? Or is each storage name and location a different document? And when someone goes to use the document, for whatever purpose it was originally intended, what will they actually see?

Unfortunately, when using a traditional word processor, these are unanswerable questions. 

### 6. A document is an outdated concept. ###

One of the fundamental attributes of a document is that it is meant to stand alone, to be relatively complete and self-contained. Another fundamental attribute of a document is that it is meant to be consumed in a linear fashion, from front to back. 

Both of these attributes make a lot of sense if you consider a document as something intended to be read from a series of printed pages. 

But in today's digitized, hyperlinked, time-sliced world, these attributes seem increasingly dated. I'm going to print something out in order to read it? Rather than read it on my laptop computer, my tablet or my smart phone? And I'm going to read the entire thing through, from front to back, in one sitting? Rather than going to the specific section I want just when I need it? And this document is going to stand alone, rather than being a smaller unit within a larger collection? And I'm going to consider this one document the last word on its particular subject, and not hyperlink to, or Google, other sources while I'm reading this one? 

The answer to all these questions is increasingly the same: ""Not bloody likely."" 

### 7. Hyperlinks are fragile and difficult to maintain. ###

What if I want to create a link within my document, so that an interested reader can view related material? Of course, using any modern word processor, I can select a run of text in a document, and attach a hyperlink to it. And if I'm linking to a Web page, then this works reasonably well. But what if I want to link to another document I created using the same software? How do I identify the document I want to link to? Only by using the file's disk location and file name -- both subject to all the same variations I described above, which means that, before long, the link will probably stop working or take me to an out-of-date version of the document. And when my links stop working, how do I fix them, since my word processing software gives me no way to manage these links other than viewing and editing them one-by-one? Especially since the document file format is so peculiar and inscrutable that no other software exists that will let me manage my hyperlinks in any more meaningful way.

### 8. [Version Control][vc] is missing. ###

Almost all documents of any value change over time. So it is natural to want to inspect a document's version history. It is helpful, when doing so, to have some automatically maintained identifier that can be used to distinguish one version from another. It is useful to be able to see when each version was created, and by whom. And, of course, it is sometimes vitally important to be able to determine what changed going from one version to another. 

None of this is readily available from typical word processing software. As a result, entire corporations make decent profits selling expensive [document management systems][dms] to other corporations, partly in order to provide such basic version control functionality. 

### 9. Collaborative authoring is awkward at best. ###

Much of the meaningful work done today is increasingly team-based. No one person may be the authority on all aspects of a particular subject, and a single document may need to include the expertise of several team members, or may benefit from several sets of eyes having a chance to review and revise its content. While some word processing software makes minor concessions to such a reality, none of them fully embrace it, so real document collaboration is still the exception rather than the rule. 

### 10. Documents don't work well with Web browsers. 

Increasingly, users open documents as a result of following links from other documents, or from Web pages. Unfortunately, when a user has to open a document from a Web browser -- or, even worse, ends up opening a series of documents -- navigation proves tedious and confusing, going something like this. 

* Click on a link.
* Wait for word processing software to load. 
* Respond to a dialog box asking if you want to open the document or save it to your hard drive. 
* View the document using your word processing software. 
* Possibly click on other links, perhaps opening other types of office software. 
* Now try to find a way back to the place that you started from. 
* At some point, deal with all of these applications and windows that are now still open, even though you are no longer using them. 

## The Defense ##

Let me deal with some potential objections to my arguments at this point. Some readers may suspect that I've overstated my case. After all, word processing software has continued to grow and evolve over the years, and in many respects has made attempts to address many of the issues listed above. Is the situation really as bad as all that?

Well, first of all, let me admit that word processing software still has one pretty good use case: production of papers for publication in academic journals. This is a relatively isolated backwater of document production that has not changed appreciably over the years, and word processing software is still a good fit for this particular task. (Unfortunately, this may be a significant contributing factor to the software's broader popularity, since it is after all the academics who teach the courses in which students learn to write class papers using this same software). 

Other than that, though, all of my experience bears out the theoretical criticisms listed above. I've seen people struggle time and time again from the problems I've identified, and recent additions to word processing software and extensions of the document production model seem to be like the proverbial lipstick on the porcine barnyard animal, doing little if anything to address the underlying issues. 

As a matter of fact, in many ways I think I've understated the problem, since other types of ""office"" documents -- such as presentations, spreadsheets and e-mail messages -- suffer from many of these same problems. Even worse, as makers of these traditional software packages have moved into [groupware][], they have carried many of these same problems with them into what would otherwise be a new space. 

## The Alternatives ##

So now what? If the stuff we've been using is no good, what do we do now? Throw it all out and start over?

Luckily, that's not necessary. Because, as organizations have continued using traditional software, a whole new set of tools have emerged and evolved, and are perfectly capable of solving all the problems above, when taken together. All businesses need to do is to use them more extensively. 

Here are the tools that solve the problems above.

1.	[Hypertext Markup Language][html] (HTML) 

	This is the basic language understood by Web browsers. HTML has a nice clean document structure, and a single HTML document can be easily output to multiple device types. Users can typically choose from a number of available browsers, and can configure their browser as it suits them, adjusting things like font sizes and window sizes to their liking. HTML files are small, simple, and relatively easy for mere mortals to understand. Hyperlinks are an innate part of the language, rather than being bolted on as an afterthought. And a whole host of HTML editing tools and assistants are available to choose from.  

2.	[Cascading Style Sheets][css] (CSS)

	A CSS file encapsulates all of the desired formatting information into a separate, compact, simple file that can be shared across a whole set of documents. Many different CSS editing tools are available. 

3.	[Uniform Resource Identifiers][uri] (URIs) and [Universal Resource Locators][url] (URLs)

	These strings of characters are used to identify Web pages and other resources, with each such resource being assigned a unique identifier.

4.	Web Sites

	A Web site offers a set of related pages as an alternative to a stand-alone document. Such an organizational scheme offers a relatively flat, networked structure that allows a user to access what they need when they need it, rather than forcing her to navigate through all the content in a linear fashion.  

5.	[Lightweight Markup Languages][lightweight] 

	HTML is relatively simple, especially when using it for document composition, but the recent appearance of languages such as [Markdown][] and [Textile][] have made it even easier and more natural for authors to create documents in HTML. This blog post, for example, was composed using Markdown. 

6.	Version Control systems

	Version Control software is relatively available, inexpensive and easy to use for plain text files such as those used to store HTML and CSS. And version control is often available as a baked-in function of web content management systems, including wikis. 

7.	[Web Content Management Systems][wcms] (WCMS)

	Many such systems have emerged over the last few years, including several good open source solutions. Such systems make it relatively easy to organize, serve and administer Web sites of any size,  typically incorporating all of the items above: HTML, CSS, URLs/URIs, lightweight markup and version control. Such systems also help to separate the duties associated with Web site creation, allowing content contributors to do so easily, while shielding them from associated complexities having to do with administration and ""look and feel"" issues. 

8.	[Wikis][]

	A wiki is a particular type of Web content management system, with a particular focus on the ease and speed of content creation and organization. Wikis also make it easy to author content collaboratively, and reduce the risk of errors or vandalism, since any past version of any page can be easily restored. The extraordinary success of [Wikipedia][] has given many people the impression that wikis are used solely for encyclopedias, but wiki software can be used to create any sort of Web or [intranet][] site. 

## In Summary ##

So that's it. There are still good reasons to use word processing software, when creating legal documents or preparing printed materials. But for the great majority of informal written communication within large organizations, there are much better choices available today that can help improve productivity and decrease the possibilities of errors due to miscommunication. 

All it will take to realize these gains is for office workers of the world to unite, throw off the chains of their anachronistic word processing packages, and enter the modern age of Web publishing!

*The author, in addition to using a typewriter and WordStar, has prepared text for print using a combination of [Microsoft Word][ms-word] and [PageMaker][], and has published text on the Web and corporate intranets using HTML, CSS, Textile, Markdown, [BBEdit][], [TextMate][], [Drupal][] and [Confluence][].* 

[bbEdit]:     	http://www.barebones.com/products/bbedit/
[confluence]:	http://www.atlassian.com/software/confluence/
[cpm]:		  	http://en.wikipedia.org/wiki/CP/M_operating_system
[css]:		  	http://en.wikipedia.org/wiki/Css
[dms]:		  	http://en.wikipedia.org/wiki/Document_management_system
[drupal]:		http://drupal.org/
[groupware]:  	http://en.wikipedia.org/wiki/Collaborative_software
[html]:       	http://en.wikipedia.org/wiki/Html
[intranet]:   	http://en.wikipedia.org/wiki/Intranet
[lightweight]: 	http://en.wikipedia.org/wiki/Lightweight_markup_language
[markdown]:   	http://daringfireball.net/projects/markdown/
[ms-word]:	  	http://en.wikipedia.org/wiki/Microsoft_Word
[navigator]:  	http://en.wikipedia.org/wiki/Netscape_Navigator
[Osborne]:	  	http://en.wikipedia.org/wiki/Osborne_1
[PageMaker]:  	http://en.wikipedia.org/wiki/Adobe_PageMaker
[textile]:    	http://www.textism.com/tools/textile/
[textmate]:   	http://macromates.com/
[typewriter]: 	http://en.wikipedia.org/wiki/Typewriter
[uri]: 		  	http://en.wikipedia.org/wiki/Uniform_Resource_Identifier
[url]:		  	http://en.wikipedia.org/wiki/Url
[vc]:         	http://en.wikipedia.org/wiki/Revision_control
[wcms]:		  	http://en.wikipedia.org/wiki/Web_content_management_system
[wikipedia]:  	http://en.wikipedia.org/wiki/Wikipedia
[wikis]:      	http://en.wikipedia.org/wiki/Wiki
[WordStar]:   	http://en.wikipedia.org/wiki/WordStar
[www]:        	http://en.wikipedia.org/wiki/World_Wide_Web
[wysiwyg]:    	http://en.wikipedia.org/wiki/WYSIWYG
"
Communication	Types of Web Sites	2010-12-24	9 - Closed	Communication, Technology, Web	"<p>Before designing, building and implementing a website &#8212; whether for the World Wide Web or a corporate intranet &#8212; it may be helpful to consider what type of site you are interested in.</p><br><br><p>Of course there is no single, universally accepted taxonomy of websites. The Web is constantly evolving, hybrids of various types are common, and different authors may categorize sites in different ways for different needs and different audiences.</p><br><br><p>With all that said, however, I think the following scheme can be useful, both for WWW and intranet users, to help steer them towards appropriate choices of the most useful resources needed, based on the site&#8217;s intended purpose.</p><br><br><p>So let&#8217;s take a look at the most common types of sites found on both the World Wide Web and corporate intranets.</p>
"	"Before designing, building and implementing a website -- whether for the World Wide Web or a corporate intranet -- it may be helpful to consider what type of site you are interested in.

Of course there is no single, universally accepted taxonomy of websites. The Web is constantly evolving, hybrids of various types are common, and different authors may categorize sites in different ways for different needs and different audiences.

With all that said, however, I think the following scheme can be useful, both for WWW and intranet users, to help steer them towards appropriate choices of the most useful resources needed, based on the site's intended purpose.

So let's take a look at the most common types of sites found on both the World Wide Web and corporate intranets.

<h3 id=""brochure"">1. Web Presence for a Business or Organization (aka ""Brochure"" sites)</h3>

A brochure site is typically fairly static, and tends to be primarily a graphic design effort. Value is delivered through a visually appealing site containing basic information about the business or organization. Static Web pages built using tools like <a href=""http://en.wikipedia.org/wiki/Adobe_Dreamweaver"">Adobe Dreamweaver</a> are often the best fit in a case like this. As an example, see the site for <a href=""http://www.rays.com/"">Ray's Boathouse</a>.

<h3 id=""personal"">2. Personal/Family Sites</h3>

A site like this allows an individual or family to post photos, travelogues and other items of personal interest to friends and family members. Visual appeal is important, but it isn't necessary for the site's appearance to be unique, so it can often be built from a set of pre-designed templates. A site like this is often best put together with an easy to use and inexpensive tool such as <a href=""http://www.apple.com/ilife/iweb/"">iWeb</a>.

<h3 id=""blog"">3. Blogs</h3>

A blog (short for ""web log"") features regular entries, usually from a single author, and generally on a specific topic. A blogging site can host a single blog, or a whole host of blogs. Depending on the aspirations of the blogger, an appearance created from a template may be sufficient, or a unique look may be designed to help promote the specific site. <a href=""http://wordpress.org/"">WordPress</a> is a popular software package used for blogging. Blogging software usually runs on the web server side of things, not on the author's computer. Such blogging packages often support lightweight markup languages such as <a href=""http://daringfireball.net/projects/markdown/"">markdown</a>, so that authors need not write their entries in full-blown HTML. As an example, see <a href=""http://www.daringfireball.net"">Daring Fireball</a>, written by John Gruber, the developer of markdown, or <a href=""http://www.huffingtonpost.com/"">The Huffington Post</a>.

<h3 id=""social"">4. Social Sharing Sites</h3>

A social sharing website publishes content from a number of contributors and is updated frequently. A site may focus on a particular topic, or on a particular interest group. The identities of the contributors, and the relationships between them, are often of as much interest as the site's informational content. Such sites may use bulletin board software or custom software that makes it easy for contributors to share content and communicate with each other. <a href=""http://www.facebook.com"">Facebook</a> is the ultimate site of this type.

<h3 id=""community"">5. Community Building Sites</h3>

These sites are similar to social sharing sites in many ways, but are generally more action-oriented, and help to rally interested parties around a common cause. <a href=""http://www.drupal.org"">Drupal</a> is a popular server-side software package for this sort of site. <a href=""http://www.gooverseas.com/volunteer-abroad"">Go Volunteer Abroad</a> is one example of such a site.

<h3 id=""office"">6. Office Sharing Sites</h3>

These sorts of sites allow coworkers to share word processing documents, spreadsheets and presentations, and to collaborate on the creation of these. <a href=""http://docs.google.com"">Google Docs</a> is a good example of such a site on the Public Internet. <a href=""http://sharepoint.microsoft.com"">SharePoint</a> is a popular package used to create these sorts of sites on corporate intranets.

<h3 id=""info"">7. Information Resource Sites</h3>

The focus here is more on the quality and accuracy of the content than on the identities of the contributors. Updates may happen frequently, but the intent is to improve the breadth, depth or accuracy of the content, not to post the latest news about the contributors. <a href=""http://en.wikipedia.org/wiki/Wiki_software"">Wiki software</a> is often a good fit for these sorts of sites, and <a href=""http://en.wikipedia.org"">Wikipedia</a> is the ultimate example of an information resource site.

<h3 id=""e-commerce"">8. E-Commerce Sites</h3>

If customers will actually be buying products straight from a Web site, then specialized e-commerce software is needed. <a href=""http://www.amazon.com"">Amazon.com</a> is the ultimate example in this category.

<h3 id=""portal"">9. Portals</h3>

A portal offers an entryway into a collection of content from a diverse set of providers. Portals tend to deliver value to customers in three ways: 1) by allowing each user to customize their personal pages to feature particular content of interest to them; 2) by combining small bits of content from disparate providers into a single Web page; 3) by providing updated views of very dynamic content on a near real-time basis. Specialized portal software is generally used for this sort of site. <a href=""http://my.yahoo.com"">Yahoo</a> is the classic example of a portal on the World Wide Web; <a href=""http://igoogle.com"">iGoogle</a> is another example.

Note that the content appearing within a portal need not come from within the same portal, or from another site also of the portal type: typically, a portal would include content from a number of other sites, of a variety of types.

<h3 id=""search"">10.	Search Engines</h3>

Search engines offer a different sort of entryway to disparate content, by allowing users to search for highly ranked pages on a particular topic, or containing a particular combination of words. <a href=""http://www.google.com"">Google</a> is the ultimate example of this sort of site.

<h3 id=""app"">11. Online Applications</h3>

Some Web sites are really just application user interfaces designed for use within a Web browser. Each of these sites uses custom software developed specifically for that site. Online banking and investment sites are examples of this type.


So there they are -- eleven different types of Web sites, and some general tips on resources needed for each!

One of the important considerations is the ease or difficulty of adding and maintaining content on a site. The software usually used for personal/family sites, blogs, social sharing sites, community building sites, office sharing sites and wikis all make it easy for content experts to add and update content directly. The remaining types often require the services of a Web professional to make changes to a site's content.

I'll talk more about wikis in a future post, but wanted to get this basic web site taxonomy defined first.
"
Technology	Types of Web Sites	2010-12-24	9 - Closed	Communication, Technology, Web	"<p>Before designing, building and implementing a website &#8212; whether for the World Wide Web or a corporate intranet &#8212; it may be helpful to consider what type of site you are interested in.</p><br><br><p>Of course there is no single, universally accepted taxonomy of websites. The Web is constantly evolving, hybrids of various types are common, and different authors may categorize sites in different ways for different needs and different audiences.</p><br><br><p>With all that said, however, I think the following scheme can be useful, both for WWW and intranet users, to help steer them towards appropriate choices of the most useful resources needed, based on the site&#8217;s intended purpose.</p><br><br><p>So let&#8217;s take a look at the most common types of sites found on both the World Wide Web and corporate intranets.</p>
"	"Before designing, building and implementing a website -- whether for the World Wide Web or a corporate intranet -- it may be helpful to consider what type of site you are interested in.

Of course there is no single, universally accepted taxonomy of websites. The Web is constantly evolving, hybrids of various types are common, and different authors may categorize sites in different ways for different needs and different audiences.

With all that said, however, I think the following scheme can be useful, both for WWW and intranet users, to help steer them towards appropriate choices of the most useful resources needed, based on the site's intended purpose.

So let's take a look at the most common types of sites found on both the World Wide Web and corporate intranets.

<h3 id=""brochure"">1. Web Presence for a Business or Organization (aka ""Brochure"" sites)</h3>

A brochure site is typically fairly static, and tends to be primarily a graphic design effort. Value is delivered through a visually appealing site containing basic information about the business or organization. Static Web pages built using tools like <a href=""http://en.wikipedia.org/wiki/Adobe_Dreamweaver"">Adobe Dreamweaver</a> are often the best fit in a case like this. As an example, see the site for <a href=""http://www.rays.com/"">Ray's Boathouse</a>.

<h3 id=""personal"">2. Personal/Family Sites</h3>

A site like this allows an individual or family to post photos, travelogues and other items of personal interest to friends and family members. Visual appeal is important, but it isn't necessary for the site's appearance to be unique, so it can often be built from a set of pre-designed templates. A site like this is often best put together with an easy to use and inexpensive tool such as <a href=""http://www.apple.com/ilife/iweb/"">iWeb</a>.

<h3 id=""blog"">3. Blogs</h3>

A blog (short for ""web log"") features regular entries, usually from a single author, and generally on a specific topic. A blogging site can host a single blog, or a whole host of blogs. Depending on the aspirations of the blogger, an appearance created from a template may be sufficient, or a unique look may be designed to help promote the specific site. <a href=""http://wordpress.org/"">WordPress</a> is a popular software package used for blogging. Blogging software usually runs on the web server side of things, not on the author's computer. Such blogging packages often support lightweight markup languages such as <a href=""http://daringfireball.net/projects/markdown/"">markdown</a>, so that authors need not write their entries in full-blown HTML. As an example, see <a href=""http://www.daringfireball.net"">Daring Fireball</a>, written by John Gruber, the developer of markdown, or <a href=""http://www.huffingtonpost.com/"">The Huffington Post</a>.

<h3 id=""social"">4. Social Sharing Sites</h3>

A social sharing website publishes content from a number of contributors and is updated frequently. A site may focus on a particular topic, or on a particular interest group. The identities of the contributors, and the relationships between them, are often of as much interest as the site's informational content. Such sites may use bulletin board software or custom software that makes it easy for contributors to share content and communicate with each other. <a href=""http://www.facebook.com"">Facebook</a> is the ultimate site of this type.

<h3 id=""community"">5. Community Building Sites</h3>

These sites are similar to social sharing sites in many ways, but are generally more action-oriented, and help to rally interested parties around a common cause. <a href=""http://www.drupal.org"">Drupal</a> is a popular server-side software package for this sort of site. <a href=""http://www.gooverseas.com/volunteer-abroad"">Go Volunteer Abroad</a> is one example of such a site.

<h3 id=""office"">6. Office Sharing Sites</h3>

These sorts of sites allow coworkers to share word processing documents, spreadsheets and presentations, and to collaborate on the creation of these. <a href=""http://docs.google.com"">Google Docs</a> is a good example of such a site on the Public Internet. <a href=""http://sharepoint.microsoft.com"">SharePoint</a> is a popular package used to create these sorts of sites on corporate intranets.

<h3 id=""info"">7. Information Resource Sites</h3>

The focus here is more on the quality and accuracy of the content than on the identities of the contributors. Updates may happen frequently, but the intent is to improve the breadth, depth or accuracy of the content, not to post the latest news about the contributors. <a href=""http://en.wikipedia.org/wiki/Wiki_software"">Wiki software</a> is often a good fit for these sorts of sites, and <a href=""http://en.wikipedia.org"">Wikipedia</a> is the ultimate example of an information resource site.

<h3 id=""e-commerce"">8. E-Commerce Sites</h3>

If customers will actually be buying products straight from a Web site, then specialized e-commerce software is needed. <a href=""http://www.amazon.com"">Amazon.com</a> is the ultimate example in this category.

<h3 id=""portal"">9. Portals</h3>

A portal offers an entryway into a collection of content from a diverse set of providers. Portals tend to deliver value to customers in three ways: 1) by allowing each user to customize their personal pages to feature particular content of interest to them; 2) by combining small bits of content from disparate providers into a single Web page; 3) by providing updated views of very dynamic content on a near real-time basis. Specialized portal software is generally used for this sort of site. <a href=""http://my.yahoo.com"">Yahoo</a> is the classic example of a portal on the World Wide Web; <a href=""http://igoogle.com"">iGoogle</a> is another example.

Note that the content appearing within a portal need not come from within the same portal, or from another site also of the portal type: typically, a portal would include content from a number of other sites, of a variety of types.

<h3 id=""search"">10.	Search Engines</h3>

Search engines offer a different sort of entryway to disparate content, by allowing users to search for highly ranked pages on a particular topic, or containing a particular combination of words. <a href=""http://www.google.com"">Google</a> is the ultimate example of this sort of site.

<h3 id=""app"">11. Online Applications</h3>

Some Web sites are really just application user interfaces designed for use within a Web browser. Each of these sites uses custom software developed specifically for that site. Online banking and investment sites are examples of this type.


So there they are -- eleven different types of Web sites, and some general tips on resources needed for each!

One of the important considerations is the ease or difficulty of adding and maintaining content on a site. The software usually used for personal/family sites, blogs, social sharing sites, community building sites, office sharing sites and wikis all make it easy for content experts to add and update content directly. The remaining types often require the services of a Web professional to make changes to a site's content.

I'll talk more about wikis in a future post, but wanted to get this basic web site taxonomy defined first.
"
Web	Types of Web Sites	2010-12-24	9 - Closed	Communication, Technology, Web	"<p>Before designing, building and implementing a website &#8212; whether for the World Wide Web or a corporate intranet &#8212; it may be helpful to consider what type of site you are interested in.</p><br><br><p>Of course there is no single, universally accepted taxonomy of websites. The Web is constantly evolving, hybrids of various types are common, and different authors may categorize sites in different ways for different needs and different audiences.</p><br><br><p>With all that said, however, I think the following scheme can be useful, both for WWW and intranet users, to help steer them towards appropriate choices of the most useful resources needed, based on the site&#8217;s intended purpose.</p><br><br><p>So let&#8217;s take a look at the most common types of sites found on both the World Wide Web and corporate intranets.</p>
"	"Before designing, building and implementing a website -- whether for the World Wide Web or a corporate intranet -- it may be helpful to consider what type of site you are interested in.

Of course there is no single, universally accepted taxonomy of websites. The Web is constantly evolving, hybrids of various types are common, and different authors may categorize sites in different ways for different needs and different audiences.

With all that said, however, I think the following scheme can be useful, both for WWW and intranet users, to help steer them towards appropriate choices of the most useful resources needed, based on the site's intended purpose.

So let's take a look at the most common types of sites found on both the World Wide Web and corporate intranets.

<h3 id=""brochure"">1. Web Presence for a Business or Organization (aka ""Brochure"" sites)</h3>

A brochure site is typically fairly static, and tends to be primarily a graphic design effort. Value is delivered through a visually appealing site containing basic information about the business or organization. Static Web pages built using tools like <a href=""http://en.wikipedia.org/wiki/Adobe_Dreamweaver"">Adobe Dreamweaver</a> are often the best fit in a case like this. As an example, see the site for <a href=""http://www.rays.com/"">Ray's Boathouse</a>.

<h3 id=""personal"">2. Personal/Family Sites</h3>

A site like this allows an individual or family to post photos, travelogues and other items of personal interest to friends and family members. Visual appeal is important, but it isn't necessary for the site's appearance to be unique, so it can often be built from a set of pre-designed templates. A site like this is often best put together with an easy to use and inexpensive tool such as <a href=""http://www.apple.com/ilife/iweb/"">iWeb</a>.

<h3 id=""blog"">3. Blogs</h3>

A blog (short for ""web log"") features regular entries, usually from a single author, and generally on a specific topic. A blogging site can host a single blog, or a whole host of blogs. Depending on the aspirations of the blogger, an appearance created from a template may be sufficient, or a unique look may be designed to help promote the specific site. <a href=""http://wordpress.org/"">WordPress</a> is a popular software package used for blogging. Blogging software usually runs on the web server side of things, not on the author's computer. Such blogging packages often support lightweight markup languages such as <a href=""http://daringfireball.net/projects/markdown/"">markdown</a>, so that authors need not write their entries in full-blown HTML. As an example, see <a href=""http://www.daringfireball.net"">Daring Fireball</a>, written by John Gruber, the developer of markdown, or <a href=""http://www.huffingtonpost.com/"">The Huffington Post</a>.

<h3 id=""social"">4. Social Sharing Sites</h3>

A social sharing website publishes content from a number of contributors and is updated frequently. A site may focus on a particular topic, or on a particular interest group. The identities of the contributors, and the relationships between them, are often of as much interest as the site's informational content. Such sites may use bulletin board software or custom software that makes it easy for contributors to share content and communicate with each other. <a href=""http://www.facebook.com"">Facebook</a> is the ultimate site of this type.

<h3 id=""community"">5. Community Building Sites</h3>

These sites are similar to social sharing sites in many ways, but are generally more action-oriented, and help to rally interested parties around a common cause. <a href=""http://www.drupal.org"">Drupal</a> is a popular server-side software package for this sort of site. <a href=""http://www.gooverseas.com/volunteer-abroad"">Go Volunteer Abroad</a> is one example of such a site.

<h3 id=""office"">6. Office Sharing Sites</h3>

These sorts of sites allow coworkers to share word processing documents, spreadsheets and presentations, and to collaborate on the creation of these. <a href=""http://docs.google.com"">Google Docs</a> is a good example of such a site on the Public Internet. <a href=""http://sharepoint.microsoft.com"">SharePoint</a> is a popular package used to create these sorts of sites on corporate intranets.

<h3 id=""info"">7. Information Resource Sites</h3>

The focus here is more on the quality and accuracy of the content than on the identities of the contributors. Updates may happen frequently, but the intent is to improve the breadth, depth or accuracy of the content, not to post the latest news about the contributors. <a href=""http://en.wikipedia.org/wiki/Wiki_software"">Wiki software</a> is often a good fit for these sorts of sites, and <a href=""http://en.wikipedia.org"">Wikipedia</a> is the ultimate example of an information resource site.

<h3 id=""e-commerce"">8. E-Commerce Sites</h3>

If customers will actually be buying products straight from a Web site, then specialized e-commerce software is needed. <a href=""http://www.amazon.com"">Amazon.com</a> is the ultimate example in this category.

<h3 id=""portal"">9. Portals</h3>

A portal offers an entryway into a collection of content from a diverse set of providers. Portals tend to deliver value to customers in three ways: 1) by allowing each user to customize their personal pages to feature particular content of interest to them; 2) by combining small bits of content from disparate providers into a single Web page; 3) by providing updated views of very dynamic content on a near real-time basis. Specialized portal software is generally used for this sort of site. <a href=""http://my.yahoo.com"">Yahoo</a> is the classic example of a portal on the World Wide Web; <a href=""http://igoogle.com"">iGoogle</a> is another example.

Note that the content appearing within a portal need not come from within the same portal, or from another site also of the portal type: typically, a portal would include content from a number of other sites, of a variety of types.

<h3 id=""search"">10.	Search Engines</h3>

Search engines offer a different sort of entryway to disparate content, by allowing users to search for highly ranked pages on a particular topic, or containing a particular combination of words. <a href=""http://www.google.com"">Google</a> is the ultimate example of this sort of site.

<h3 id=""app"">11. Online Applications</h3>

Some Web sites are really just application user interfaces designed for use within a Web browser. Each of these sites uses custom software developed specifically for that site. Online banking and investment sites are examples of this type.


So there they are -- eleven different types of Web sites, and some general tips on resources needed for each!

One of the important considerations is the ease or difficulty of adding and maintaining content on a site. The software usually used for personal/family sites, blogs, social sharing sites, community building sites, office sharing sites and wikis all make it easy for content experts to add and update content directly. The remaining types often require the services of a Web professional to make changes to a site's content.

I'll talk more about wikis in a future post, but wanted to get this basic web site taxonomy defined first.
"
Apple	Cell Phones and Sheet Metal	2011-05-04	9 - Closed	Apple, Technology	"<p>When I was growing up in the sixties, gas and steel were plentiful and cheap, and the major US automakers were unchallenged by foreign competitors. There was little real innovation in autos at the time &#8212; every car had its engine in the front, and drive wheels in the back, for example &#8212; yet the big three manufacturers seemed to produce an almost endless variation in makes and models, with a fresh batch appearing each year. In fact, it was common practice for both Ford and GM to take the same car and make it available as part of two different lines, with different model names and slightly different sheet metal. There was little real differentiation, but seemingly unlimited variation, all driven by market demand. All of these automobiles satisfied the basic requirements for transportation, but buyers craved variety, even if the differences were only superficial. Some owners even bought a new car every year or two, not because of any significant advances in the newer models, but simply because they were tired of their old models and ready for something new, something different.</p><br><br><p>I mention all of this now because the mobile phone market today reminds me of nothing so much as the automobile market of the sixties. Barriers to entry limit limit the number of major carriers in the market to less than a handful. There is little fundamental differentiation between the major providers, in that all of them satisfy a buyer&#8217;s basic requirements reasonably well. The purchase of a new device is not viewed as a major financial investment, nor as a commitment for more than a year or two. The devices in question reflect, to a significant degree, the public personas of their owners.</p>
"	"<p><img src=""http://www.pagantuna.com/images/affordable-android-phones.jpg"" alt=""Affordable Android phones""  title=""Affordable Android phones"" class=""pic-right"" /></p>

<img src=""http://www.fiftiesweb.com/cars/60.ford.falcon.jpg"" alt=""Ford Falcon"" title=""Ford Falcon"" class=""pic-left"" /> When I was growing up in the sixties, gas and steel were plentiful and cheap, and the major US automakers were unchallenged by foreign competitors. ¬†There was little real innovation in autos at the time -- every car had its engine in the front, and drive wheels in the back, for example -- yet the big three manufacturers seemed to produce an almost endless variation in makes and models, with a fresh batch appearing each year. In fact, it was common practice for both Ford and GM to take the same car and make it available as part of two different lines, with different model names and slightly different sheet metal. There was little real differentiation, but seemingly unlimited variation, all driven by market demand. All of these automobiles satisfied the basic requirements for transportation, but buyers craved variety, even if the differences were only superficial. Some owners even bought a new car every year or two, not because of any significant advances in the newer models, but simply because they were tired of their old models and ready for something new, something different.

I mention all of this now because the mobile phone market today reminds me of nothing so much as the automobile market of the sixties. Barriers to entry limit the number of major carriers in the market to less than a handful. There is little fundamental differentiation between the major providers, in that all of them satisfy a buyer's basic requirements reasonably well. The purchase of a new device is not viewed as a major financial investment, nor as a commitment for more than a year or two. The devices in question reflect, to a significant degree, the public personas of their owners.¬†

And so, perhaps, given the earlier example, it should come as no great surprise that a significant portion of the mobile phone market today simply craves variety: different makes, different models, different software, different visual themes. Critics may dismiss all this variation as entirely superficial, but that misses the point, for it is specifically a difference in surfaces, in appearance only, that these consumers want, and it is only the more or less exact functional equivalence of all these devices that enables buyers to indulge in this quest for endless visual variety.

This analogy is significant, I think, because it helps to explain the rapid uptake of Google's relatively new Android operating system, for the Android OS plays into this market segment beautifully. Android is new, smart, sophisticated. It can be tailored to run on a wide variety of different devices. It can be easily tweaked by different providers to provide minor variations in appearance and cosmetic functionality. And did I mention that it's free? It's hard to imagine a more perfect gift to carriers and phone manufacturers content to sell into this segment. No wonder, then, that Android has achieved significant smart phone market share so rapidly.

Viewed from this perspective, though, it is hard to see Android as any sort of threat to Apple and the iPhone, as some have suggested. Seen in this light, Android is not succeeding because it is in any sense better than Apple's iOS, but just because it is different, and because it allows rapid adaptation and variation by a large number of device manufacturers and carriers. Will this sort of superficial variation continue to appeal to a large portion of the smart phone market? In all likelihood, yes. But will there be a significant portion of the market that will continue to prefer a more refined and consistent user experience, a higher aesthetic standard, and the Apple brand? In all likelihood, yes. Can the two markets and their respective providers coexist more or less peacefully? It is hard to see, frankly, why one would threaten the other (except for the fact that Apple's approach seems so much more profitable).

In the long run, of course, there will be winners and losers, and the future is hard to predict. But it is hard to see why Android should pose any significant threat to the iPhone and its iOS in the foreseeable future.¬†
"
Technology	Cell Phones and Sheet Metal	2011-05-04	9 - Closed	Apple, Technology	"<p>When I was growing up in the sixties, gas and steel were plentiful and cheap, and the major US automakers were unchallenged by foreign competitors. There was little real innovation in autos at the time &#8212; every car had its engine in the front, and drive wheels in the back, for example &#8212; yet the big three manufacturers seemed to produce an almost endless variation in makes and models, with a fresh batch appearing each year. In fact, it was common practice for both Ford and GM to take the same car and make it available as part of two different lines, with different model names and slightly different sheet metal. There was little real differentiation, but seemingly unlimited variation, all driven by market demand. All of these automobiles satisfied the basic requirements for transportation, but buyers craved variety, even if the differences were only superficial. Some owners even bought a new car every year or two, not because of any significant advances in the newer models, but simply because they were tired of their old models and ready for something new, something different.</p><br><br><p>I mention all of this now because the mobile phone market today reminds me of nothing so much as the automobile market of the sixties. Barriers to entry limit limit the number of major carriers in the market to less than a handful. There is little fundamental differentiation between the major providers, in that all of them satisfy a buyer&#8217;s basic requirements reasonably well. The purchase of a new device is not viewed as a major financial investment, nor as a commitment for more than a year or two. The devices in question reflect, to a significant degree, the public personas of their owners.</p>
"	"<p><img src=""http://www.pagantuna.com/images/affordable-android-phones.jpg"" alt=""Affordable Android phones""  title=""Affordable Android phones"" class=""pic-right"" /></p>

<img src=""http://www.fiftiesweb.com/cars/60.ford.falcon.jpg"" alt=""Ford Falcon"" title=""Ford Falcon"" class=""pic-left"" /> When I was growing up in the sixties, gas and steel were plentiful and cheap, and the major US automakers were unchallenged by foreign competitors. ¬†There was little real innovation in autos at the time -- every car had its engine in the front, and drive wheels in the back, for example -- yet the big three manufacturers seemed to produce an almost endless variation in makes and models, with a fresh batch appearing each year. In fact, it was common practice for both Ford and GM to take the same car and make it available as part of two different lines, with different model names and slightly different sheet metal. There was little real differentiation, but seemingly unlimited variation, all driven by market demand. All of these automobiles satisfied the basic requirements for transportation, but buyers craved variety, even if the differences were only superficial. Some owners even bought a new car every year or two, not because of any significant advances in the newer models, but simply because they were tired of their old models and ready for something new, something different.

I mention all of this now because the mobile phone market today reminds me of nothing so much as the automobile market of the sixties. Barriers to entry limit the number of major carriers in the market to less than a handful. There is little fundamental differentiation between the major providers, in that all of them satisfy a buyer's basic requirements reasonably well. The purchase of a new device is not viewed as a major financial investment, nor as a commitment for more than a year or two. The devices in question reflect, to a significant degree, the public personas of their owners.¬†

And so, perhaps, given the earlier example, it should come as no great surprise that a significant portion of the mobile phone market today simply craves variety: different makes, different models, different software, different visual themes. Critics may dismiss all this variation as entirely superficial, but that misses the point, for it is specifically a difference in surfaces, in appearance only, that these consumers want, and it is only the more or less exact functional equivalence of all these devices that enables buyers to indulge in this quest for endless visual variety.

This analogy is significant, I think, because it helps to explain the rapid uptake of Google's relatively new Android operating system, for the Android OS plays into this market segment beautifully. Android is new, smart, sophisticated. It can be tailored to run on a wide variety of different devices. It can be easily tweaked by different providers to provide minor variations in appearance and cosmetic functionality. And did I mention that it's free? It's hard to imagine a more perfect gift to carriers and phone manufacturers content to sell into this segment. No wonder, then, that Android has achieved significant smart phone market share so rapidly.

Viewed from this perspective, though, it is hard to see Android as any sort of threat to Apple and the iPhone, as some have suggested. Seen in this light, Android is not succeeding because it is in any sense better than Apple's iOS, but just because it is different, and because it allows rapid adaptation and variation by a large number of device manufacturers and carriers. Will this sort of superficial variation continue to appeal to a large portion of the smart phone market? In all likelihood, yes. But will there be a significant portion of the market that will continue to prefer a more refined and consistent user experience, a higher aesthetic standard, and the Apple brand? In all likelihood, yes. Can the two markets and their respective providers coexist more or less peacefully? It is hard to see, frankly, why one would threaten the other (except for the fact that Apple's approach seems so much more profitable).

In the long run, of course, there will be winners and losers, and the future is hard to predict. But it is hard to see why Android should pose any significant threat to the iPhone and its iOS in the foreseeable future.¬†
"
Communication	Anatomy of a Web Site	2011-05-30	9 - Closed	Communication, Technology, Web	"<p>Many small businesses, non-profits and organizational users have a fairly simple mental model of what a Web site consists of. If they were to visualize it, such a model might look something like this....</p><br><br><p>While this model is sufficient for read-only users, it is probably overly simplistic for those interested in having a site built for them. In this case, we should at least consider the following.... </p>
"	"Many small businesses, non-profits and organizational users have a fairly simple mental model of what a Web site consists of. If they were to visualize it, such a model might look something like this.

![Web Site Diagram 1](../images/anatomy_of_web_site_diagram_1.jpg)

While this model is sufficient for read-only users, it is probably overly simplistic for those interested in having a site built for them. In this case, we should at least consider the following. 

![Web Site Diagram 2](../images/anatomy_of_web_site_diagram_2.jpg)

A **Domain Name Registrar** is the organization that registers, maintains and redirects the primary address for a Web site. Taking a site that I maintain as an example, [www.ReasonToRock.com](http://www.ReasonToRock.com), the domain name is ReasonToRock.com, and [directNIC](http://www.directnic.com/) is the registrar. The services offered by registrars are fairly standardized. Domain name owners generally pay a fairly modest ($5 - $20) annual fee to their registrars for each of their domain names. While the process for transferring a domain name from one registrar to another involves several steps (in order to ensure that it is not being done fraudulently), domain names are in fact portable, and there is no requirement to leave one with whatever organization happened to perform the original registration. 

A **Web Developer** is the person who actually creates the Web pages that will make up the site. HTML (HyperText Markup Language) is the language spoken by Web browsers, and all sites ultimately consist of a series of Web pages expressed in HTML. 

A **Web Hosting Provider** is the organization that provides the Web servers and disk space on which a Web site resides, as well as the Internet connectivity that makes a site available to the the World Wide Web. Large sites with lots of traffic will want to have dedicated hosting, but smaller, less active sites can usually get by with shared hosting, meaning that your site is only one of many residing on a particular piece of server hardware. For example, ReasonToRock.com is currently hosted by [Joyent](http://www.joyent.com), using one of their shared hosting plans. Shared hosting can cost as little as $100 per year. A hosting provider provides an IP (Internet Protocol) address that is the actual network address at which your site can be found. While moving a site from one hosting provider to another is a little more complex than moving a domain name, it is still very possible, and there is no reason to feel that you are stuck with a particular provider. 

Note that there are relatively few domain name registrars around, because they all have to be accredited through an international system. Web hosting providers are more common, but still somewhat limited, since they must purchase the necessary server hardware and software and Internet connectivity to perform hosting. Web developers are the most common of the three classes of providers, and vary significantly in terms of their knowledge, experience and cost. 

Note also that this second model is sufficient for building a [brochure site][]. For many other types of sites, though, we would need to consider the following. 

![Web Site Diagram 3](../images/anatomy_of_web_site_diagram_3.jpg)

A **Content Management System (CMS)** is a software package that stores a site's content in a database, and then generates HTML pages dynamically, as requested. The CMS and its database are maintained on the Web Hosting Provider's server, and such providers often make it easy to install such a software package. A CMS is more complex than a simple set of static Web pages, but offers some significant advantages:

* **Content** can be easily added, updated and deleted by anyone who has been given the proper authority, without the need to purchase any special software or learn any special language. 

* The site's **look and feel** can be easily changed by a knowledgeable Web designer, or even by an administrator using pre-existing themes, without any need to mess about with the content. 

* **Additional modules** can often be added to the base system, extending the functionality offered by the core software package. 

[Drupal][] is a popular example of a Content Management System. Such a system is appropriate for a much wider range of types of sites -- such as [blogs][], [community building sites][community] and [information resource sites][info] -- than is a Web site consisting only of static pages. 

Note that a [wiki][] is a particular type of content management system. 

And, to extend our last model just a little bit further, we offer the following.

![Web Site Diagram 4](../images/anatomy_of_web_site_diagram_4.jpg)

A sophisticated CMS such as Drupal allows a Web designer to identify particular **types of content** (such as individuals and events), as well as particular **ways of accessing content** (such as an address book or a calendar).

So there you have it! If you're in the market for a Web site for your business or organization, then an understanding of the various possible suppliers and the roles they play can help you make smarter decisions that will lead to a site that will better serve you not only on the day of the launch, but for years after. 


[brochure site]: types-of-web-sites.html#brochure
[blogs]: types-of-web-sites.html#blog
[community]: types-of-web-sites.html#community
[info]: types-of-web-sites.html#info
[Drupal]: http://www.drupal.org
[wiki]: why-wiki.html
"
Technology	Anatomy of a Web Site	2011-05-30	9 - Closed	Communication, Technology, Web	"<p>Many small businesses, non-profits and organizational users have a fairly simple mental model of what a Web site consists of. If they were to visualize it, such a model might look something like this....</p><br><br><p>While this model is sufficient for read-only users, it is probably overly simplistic for those interested in having a site built for them. In this case, we should at least consider the following.... </p>
"	"Many small businesses, non-profits and organizational users have a fairly simple mental model of what a Web site consists of. If they were to visualize it, such a model might look something like this.

![Web Site Diagram 1](../images/anatomy_of_web_site_diagram_1.jpg)

While this model is sufficient for read-only users, it is probably overly simplistic for those interested in having a site built for them. In this case, we should at least consider the following. 

![Web Site Diagram 2](../images/anatomy_of_web_site_diagram_2.jpg)

A **Domain Name Registrar** is the organization that registers, maintains and redirects the primary address for a Web site. Taking a site that I maintain as an example, [www.ReasonToRock.com](http://www.ReasonToRock.com), the domain name is ReasonToRock.com, and [directNIC](http://www.directnic.com/) is the registrar. The services offered by registrars are fairly standardized. Domain name owners generally pay a fairly modest ($5 - $20) annual fee to their registrars for each of their domain names. While the process for transferring a domain name from one registrar to another involves several steps (in order to ensure that it is not being done fraudulently), domain names are in fact portable, and there is no requirement to leave one with whatever organization happened to perform the original registration. 

A **Web Developer** is the person who actually creates the Web pages that will make up the site. HTML (HyperText Markup Language) is the language spoken by Web browsers, and all sites ultimately consist of a series of Web pages expressed in HTML. 

A **Web Hosting Provider** is the organization that provides the Web servers and disk space on which a Web site resides, as well as the Internet connectivity that makes a site available to the the World Wide Web. Large sites with lots of traffic will want to have dedicated hosting, but smaller, less active sites can usually get by with shared hosting, meaning that your site is only one of many residing on a particular piece of server hardware. For example, ReasonToRock.com is currently hosted by [Joyent](http://www.joyent.com), using one of their shared hosting plans. Shared hosting can cost as little as $100 per year. A hosting provider provides an IP (Internet Protocol) address that is the actual network address at which your site can be found. While moving a site from one hosting provider to another is a little more complex than moving a domain name, it is still very possible, and there is no reason to feel that you are stuck with a particular provider. 

Note that there are relatively few domain name registrars around, because they all have to be accredited through an international system. Web hosting providers are more common, but still somewhat limited, since they must purchase the necessary server hardware and software and Internet connectivity to perform hosting. Web developers are the most common of the three classes of providers, and vary significantly in terms of their knowledge, experience and cost. 

Note also that this second model is sufficient for building a [brochure site][]. For many other types of sites, though, we would need to consider the following. 

![Web Site Diagram 3](../images/anatomy_of_web_site_diagram_3.jpg)

A **Content Management System (CMS)** is a software package that stores a site's content in a database, and then generates HTML pages dynamically, as requested. The CMS and its database are maintained on the Web Hosting Provider's server, and such providers often make it easy to install such a software package. A CMS is more complex than a simple set of static Web pages, but offers some significant advantages:

* **Content** can be easily added, updated and deleted by anyone who has been given the proper authority, without the need to purchase any special software or learn any special language. 

* The site's **look and feel** can be easily changed by a knowledgeable Web designer, or even by an administrator using pre-existing themes, without any need to mess about with the content. 

* **Additional modules** can often be added to the base system, extending the functionality offered by the core software package. 

[Drupal][] is a popular example of a Content Management System. Such a system is appropriate for a much wider range of types of sites -- such as [blogs][], [community building sites][community] and [information resource sites][info] -- than is a Web site consisting only of static pages. 

Note that a [wiki][] is a particular type of content management system. 

And, to extend our last model just a little bit further, we offer the following.

![Web Site Diagram 4](../images/anatomy_of_web_site_diagram_4.jpg)

A sophisticated CMS such as Drupal allows a Web designer to identify particular **types of content** (such as individuals and events), as well as particular **ways of accessing content** (such as an address book or a calendar).

So there you have it! If you're in the market for a Web site for your business or organization, then an understanding of the various possible suppliers and the roles they play can help you make smarter decisions that will lead to a site that will better serve you not only on the day of the launch, but for years after. 


[brochure site]: types-of-web-sites.html#brochure
[blogs]: types-of-web-sites.html#blog
[community]: types-of-web-sites.html#community
[info]: types-of-web-sites.html#info
[Drupal]: http://www.drupal.org
[wiki]: why-wiki.html
"
Web	Anatomy of a Web Site	2011-05-30	9 - Closed	Communication, Technology, Web	"<p>Many small businesses, non-profits and organizational users have a fairly simple mental model of what a Web site consists of. If they were to visualize it, such a model might look something like this....</p><br><br><p>While this model is sufficient for read-only users, it is probably overly simplistic for those interested in having a site built for them. In this case, we should at least consider the following.... </p>
"	"Many small businesses, non-profits and organizational users have a fairly simple mental model of what a Web site consists of. If they were to visualize it, such a model might look something like this.

![Web Site Diagram 1](../images/anatomy_of_web_site_diagram_1.jpg)

While this model is sufficient for read-only users, it is probably overly simplistic for those interested in having a site built for them. In this case, we should at least consider the following. 

![Web Site Diagram 2](../images/anatomy_of_web_site_diagram_2.jpg)

A **Domain Name Registrar** is the organization that registers, maintains and redirects the primary address for a Web site. Taking a site that I maintain as an example, [www.ReasonToRock.com](http://www.ReasonToRock.com), the domain name is ReasonToRock.com, and [directNIC](http://www.directnic.com/) is the registrar. The services offered by registrars are fairly standardized. Domain name owners generally pay a fairly modest ($5 - $20) annual fee to their registrars for each of their domain names. While the process for transferring a domain name from one registrar to another involves several steps (in order to ensure that it is not being done fraudulently), domain names are in fact portable, and there is no requirement to leave one with whatever organization happened to perform the original registration. 

A **Web Developer** is the person who actually creates the Web pages that will make up the site. HTML (HyperText Markup Language) is the language spoken by Web browsers, and all sites ultimately consist of a series of Web pages expressed in HTML. 

A **Web Hosting Provider** is the organization that provides the Web servers and disk space on which a Web site resides, as well as the Internet connectivity that makes a site available to the the World Wide Web. Large sites with lots of traffic will want to have dedicated hosting, but smaller, less active sites can usually get by with shared hosting, meaning that your site is only one of many residing on a particular piece of server hardware. For example, ReasonToRock.com is currently hosted by [Joyent](http://www.joyent.com), using one of their shared hosting plans. Shared hosting can cost as little as $100 per year. A hosting provider provides an IP (Internet Protocol) address that is the actual network address at which your site can be found. While moving a site from one hosting provider to another is a little more complex than moving a domain name, it is still very possible, and there is no reason to feel that you are stuck with a particular provider. 

Note that there are relatively few domain name registrars around, because they all have to be accredited through an international system. Web hosting providers are more common, but still somewhat limited, since they must purchase the necessary server hardware and software and Internet connectivity to perform hosting. Web developers are the most common of the three classes of providers, and vary significantly in terms of their knowledge, experience and cost. 

Note also that this second model is sufficient for building a [brochure site][]. For many other types of sites, though, we would need to consider the following. 

![Web Site Diagram 3](../images/anatomy_of_web_site_diagram_3.jpg)

A **Content Management System (CMS)** is a software package that stores a site's content in a database, and then generates HTML pages dynamically, as requested. The CMS and its database are maintained on the Web Hosting Provider's server, and such providers often make it easy to install such a software package. A CMS is more complex than a simple set of static Web pages, but offers some significant advantages:

* **Content** can be easily added, updated and deleted by anyone who has been given the proper authority, without the need to purchase any special software or learn any special language. 

* The site's **look and feel** can be easily changed by a knowledgeable Web designer, or even by an administrator using pre-existing themes, without any need to mess about with the content. 

* **Additional modules** can often be added to the base system, extending the functionality offered by the core software package. 

[Drupal][] is a popular example of a Content Management System. Such a system is appropriate for a much wider range of types of sites -- such as [blogs][], [community building sites][community] and [information resource sites][info] -- than is a Web site consisting only of static pages. 

Note that a [wiki][] is a particular type of content management system. 

And, to extend our last model just a little bit further, we offer the following.

![Web Site Diagram 4](../images/anatomy_of_web_site_diagram_4.jpg)

A sophisticated CMS such as Drupal allows a Web designer to identify particular **types of content** (such as individuals and events), as well as particular **ways of accessing content** (such as an address book or a calendar).

So there you have it! If you're in the market for a Web site for your business or organization, then an understanding of the various possible suppliers and the roles they play can help you make smarter decisions that will lead to a site that will better serve you not only on the day of the launch, but for years after. 


[brochure site]: types-of-web-sites.html#brochure
[blogs]: types-of-web-sites.html#blog
[community]: types-of-web-sites.html#community
[info]: types-of-web-sites.html#info
[Drupal]: http://www.drupal.org
[wiki]: why-wiki.html
"
Apple	Thinking Differently about Perfectionism	2011-12-20	9 - Closed	Apple, Culture, Leadership	"<blockquote><br>  <p>Perfectionism (noun) &#8212; a disposition to regard anything short of perfection as unacceptable.  </p><br></blockquote><br><br><p>I find it peculiar that so many of the articles about Steve Jobs following his death have used the term &#8220;perfectionism&#8221; to describe one of his key traits, as if this were a bad thing. For example,  &#8220;Perfectionism is the disease that plagued Jobs,&#8221; from a piece in <em><a href=&quot;http://www.theatlanticwire.com/technology/2011/11/crazy-perfectionism-drove-steve-jobs/44623/&quot;>The Atlantic Wire</a></em>.</p><br><br><p>Really? I wonder what the more desirable &#8220;healthy&#8221; state might be? And what sort of slogans might these anti-perfectionists choose for their endeavors? </p>
"	"> Perfectionism (noun) -- a disposition to regard anything short of perfection as unacceptable.  

I find it peculiar that so many of the articles about Steve Jobs following his death have used the term ""perfectionism"" to describe one of his key traits, as if this were a bad thing. For example,  ""Perfectionism is the disease that plagued Jobs,"" from a piece in *[The Atlantic Wire](http://www.theatlanticwire.com/technology/2011/11/crazy-perfectionism-drove-steve-jobs/44623/)*.

Really? I wonder what the more desirable ""healthy"" state might be? And what sort of slogans might these anti-perfectionists choose for their endeavors? 

> ""A relentless pursuit of mediocrity.""

> ""About what you would expect, or a little bit less.""

> ""Not great, but good enough for the likes of you.""

Any modern computing device is a complex, integrated system based on millions of human design decisions, whose quality is based not just on the accumulation of all of those individual judgments, but also on the complex interplay between them. And in order to be anything other than very expensive failures, these products must be joyfully purchased and used by millions of consumers all over the globe.

Given all of this complexity and opportunities for error and poor design and business failure, would you really want to strive for something less than perfection? Granted, perfection can never be achieved, given the difficulty of the problems involved. But isn't that all the more reason why we should be setting our sights at this level? If we start with the intent to achieve something less than perfection, and are content to accept work that is obviously less than perfect, then what sort of end results can we expect?

Commentators complain that Jobs even let this crazy perfectionism spill over outside the boundaries of his professional career and into his personal life. In the same *Atlantic Wire* piece, for example, the following story about the selection of a new washing machine is offered as proof of his derangement. 

> We spent some time in our family talking about what‚Äôs the trade-off we want to make. We ended up talking a lot about design, but also about the values of our family. Did we care most about getting our wash done in an hour versus an hour and a half? Or did we care most about our clothes feeling really soft and lasting longer? Did we care about using a quarter of the water? We spent about two weeks talking about this every night at the dinner table.

Wow. What a nut job. Can you imagine? A guy who runs the most successful consumer products company on the planet, and he thinks it worth spending his evenings talking to his wife and kids about the design trade-offs of a washing machine before buying one. Sheesh! It's only a washing machine! Why can't he drink beer and watch football when he's not working, like the rest of us? 

Come off it. Let's get real. What are the possible reasons for *not* being a perfectionist?

1. You can't tell which end is up anyway. 

2. You really don't give a hoot. 

3. You're much more interested in fitting in than in standing out. 

4. You consider your brain to be an organ only slightly less superfluous than your tonsils and your gall bladder. 

I think I detect a certain degree of intellectual dishonesty in these criticisms of Jobs. I have read many of these articles carefully, and found no spelling errors, no grammatical gaffes. Could it be that these authors are themselves suffering from bouts of niggling perfectionism? Are these the sorts of people who might complain about spelling errors found in others' work, even after coming home from a hard day at the office? In short, might we find well-worn copies of <cite>[Eats, Shoots & Leaves](http://www.amazon.com/gp/product/1592400876/ref=as_li_ss_tl?ie=UTF8&tag=reasontorock-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=1592400876)</cite> at home in their closets?

In the same <cite>Atlantic Wire</cite> piece, another sign of Jobs' ""disease"" is offered up as a quote from a Malcolm Gladwell piece, itself based on the new [Isaacson biography](http://www.amazon.com/gp/product/1451648537/ref=as_li_ss_tl?ie=UTF8&tag=reasontorock-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=1451648537):

> He arrives at his hotel suite in New York for press interviews and decides, at 10 P.M., that the piano needs to be repositioned.

Hold on here a minute. This is not like you or me checking in to the Holiday Inn. This is the CEO of Apple taking a no doubt very expensive suite, not just so he has a place to sleep, but to have a suitable setting where he can meet with members of the media to talk about Apple's latest products, known for their elegant  design. What is so unreasonable about his wanting to arrange the room to make a suitable visual impact on his influential guests? If we were writing about a concert pianist, and he discovered at 10 P.M. that the piano in his suite was out of tune, and he was going to play on that instrument in front of the press the next morning, would his complaint be viewed as a sign of dysfunction? 

I think there are two truths here that say more about our culture than they do about Steve Jobs:

1. We tend to evaluate ""perfectionism"" as a social trait rather than as a business value. As a social trait, of course, it can be annoying -- even though, as a business value, it can be critical to an organization's success. 

2. We tend to use ""perfectionism"" as a derogatory term when someone else cares more about certain values than we do, or than we think they ought to. If we're the sort of person who is frequently unsure about spelling, for example, and let our word processing software correct our mistakes, then we will probably call our boss a perfectionist if he or she points out the spelling errors in our work. If we're a software developer writing documentation for internal use, then this sort of sensitivity to spelling errors may be inappropriate. But if we're writing copy for a marketing piece for our company's new product, then such sensitivity to spelling errors is a business necessity. 

The truth is that Steve Jobs had a refined design sense that made him sensitive to the slightest issues -- things that the rest of us might not notice at first, things that we might not be able to quite put our fingers on, but things that ultimately, and in accumulation, would cause us to be less than satisfied with a product.  

I, for one, am thankful for the perfectionism that pervades Apple every time I power up one of its products. I'm grateful for all the little touches, and all the grand design concepts, that reflect the seemingly infinite thoughtfulness and care that go into each of their works.

Perfectionism may be a demanding pursuit, but when it comes to getting the important things right, it sure beats all the alternatives that I've seen.  
"
Culture	Thinking Differently about Perfectionism	2011-12-20	9 - Closed	Apple, Culture, Leadership	"<blockquote><br>  <p>Perfectionism (noun) &#8212; a disposition to regard anything short of perfection as unacceptable.  </p><br></blockquote><br><br><p>I find it peculiar that so many of the articles about Steve Jobs following his death have used the term &#8220;perfectionism&#8221; to describe one of his key traits, as if this were a bad thing. For example,  &#8220;Perfectionism is the disease that plagued Jobs,&#8221; from a piece in <em><a href=&quot;http://www.theatlanticwire.com/technology/2011/11/crazy-perfectionism-drove-steve-jobs/44623/&quot;>The Atlantic Wire</a></em>.</p><br><br><p>Really? I wonder what the more desirable &#8220;healthy&#8221; state might be? And what sort of slogans might these anti-perfectionists choose for their endeavors? </p>
"	"> Perfectionism (noun) -- a disposition to regard anything short of perfection as unacceptable.  

I find it peculiar that so many of the articles about Steve Jobs following his death have used the term ""perfectionism"" to describe one of his key traits, as if this were a bad thing. For example,  ""Perfectionism is the disease that plagued Jobs,"" from a piece in *[The Atlantic Wire](http://www.theatlanticwire.com/technology/2011/11/crazy-perfectionism-drove-steve-jobs/44623/)*.

Really? I wonder what the more desirable ""healthy"" state might be? And what sort of slogans might these anti-perfectionists choose for their endeavors? 

> ""A relentless pursuit of mediocrity.""

> ""About what you would expect, or a little bit less.""

> ""Not great, but good enough for the likes of you.""

Any modern computing device is a complex, integrated system based on millions of human design decisions, whose quality is based not just on the accumulation of all of those individual judgments, but also on the complex interplay between them. And in order to be anything other than very expensive failures, these products must be joyfully purchased and used by millions of consumers all over the globe.

Given all of this complexity and opportunities for error and poor design and business failure, would you really want to strive for something less than perfection? Granted, perfection can never be achieved, given the difficulty of the problems involved. But isn't that all the more reason why we should be setting our sights at this level? If we start with the intent to achieve something less than perfection, and are content to accept work that is obviously less than perfect, then what sort of end results can we expect?

Commentators complain that Jobs even let this crazy perfectionism spill over outside the boundaries of his professional career and into his personal life. In the same *Atlantic Wire* piece, for example, the following story about the selection of a new washing machine is offered as proof of his derangement. 

> We spent some time in our family talking about what‚Äôs the trade-off we want to make. We ended up talking a lot about design, but also about the values of our family. Did we care most about getting our wash done in an hour versus an hour and a half? Or did we care most about our clothes feeling really soft and lasting longer? Did we care about using a quarter of the water? We spent about two weeks talking about this every night at the dinner table.

Wow. What a nut job. Can you imagine? A guy who runs the most successful consumer products company on the planet, and he thinks it worth spending his evenings talking to his wife and kids about the design trade-offs of a washing machine before buying one. Sheesh! It's only a washing machine! Why can't he drink beer and watch football when he's not working, like the rest of us? 

Come off it. Let's get real. What are the possible reasons for *not* being a perfectionist?

1. You can't tell which end is up anyway. 

2. You really don't give a hoot. 

3. You're much more interested in fitting in than in standing out. 

4. You consider your brain to be an organ only slightly less superfluous than your tonsils and your gall bladder. 

I think I detect a certain degree of intellectual dishonesty in these criticisms of Jobs. I have read many of these articles carefully, and found no spelling errors, no grammatical gaffes. Could it be that these authors are themselves suffering from bouts of niggling perfectionism? Are these the sorts of people who might complain about spelling errors found in others' work, even after coming home from a hard day at the office? In short, might we find well-worn copies of <cite>[Eats, Shoots & Leaves](http://www.amazon.com/gp/product/1592400876/ref=as_li_ss_tl?ie=UTF8&tag=reasontorock-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=1592400876)</cite> at home in their closets?

In the same <cite>Atlantic Wire</cite> piece, another sign of Jobs' ""disease"" is offered up as a quote from a Malcolm Gladwell piece, itself based on the new [Isaacson biography](http://www.amazon.com/gp/product/1451648537/ref=as_li_ss_tl?ie=UTF8&tag=reasontorock-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=1451648537):

> He arrives at his hotel suite in New York for press interviews and decides, at 10 P.M., that the piano needs to be repositioned.

Hold on here a minute. This is not like you or me checking in to the Holiday Inn. This is the CEO of Apple taking a no doubt very expensive suite, not just so he has a place to sleep, but to have a suitable setting where he can meet with members of the media to talk about Apple's latest products, known for their elegant  design. What is so unreasonable about his wanting to arrange the room to make a suitable visual impact on his influential guests? If we were writing about a concert pianist, and he discovered at 10 P.M. that the piano in his suite was out of tune, and he was going to play on that instrument in front of the press the next morning, would his complaint be viewed as a sign of dysfunction? 

I think there are two truths here that say more about our culture than they do about Steve Jobs:

1. We tend to evaluate ""perfectionism"" as a social trait rather than as a business value. As a social trait, of course, it can be annoying -- even though, as a business value, it can be critical to an organization's success. 

2. We tend to use ""perfectionism"" as a derogatory term when someone else cares more about certain values than we do, or than we think they ought to. If we're the sort of person who is frequently unsure about spelling, for example, and let our word processing software correct our mistakes, then we will probably call our boss a perfectionist if he or she points out the spelling errors in our work. If we're a software developer writing documentation for internal use, then this sort of sensitivity to spelling errors may be inappropriate. But if we're writing copy for a marketing piece for our company's new product, then such sensitivity to spelling errors is a business necessity. 

The truth is that Steve Jobs had a refined design sense that made him sensitive to the slightest issues -- things that the rest of us might not notice at first, things that we might not be able to quite put our fingers on, but things that ultimately, and in accumulation, would cause us to be less than satisfied with a product.  

I, for one, am thankful for the perfectionism that pervades Apple every time I power up one of its products. I'm grateful for all the little touches, and all the grand design concepts, that reflect the seemingly infinite thoughtfulness and care that go into each of their works.

Perfectionism may be a demanding pursuit, but when it comes to getting the important things right, it sure beats all the alternatives that I've seen.  
"
Leadership	Thinking Differently about Perfectionism	2011-12-20	9 - Closed	Apple, Culture, Leadership	"<blockquote><br>  <p>Perfectionism (noun) &#8212; a disposition to regard anything short of perfection as unacceptable.  </p><br></blockquote><br><br><p>I find it peculiar that so many of the articles about Steve Jobs following his death have used the term &#8220;perfectionism&#8221; to describe one of his key traits, as if this were a bad thing. For example,  &#8220;Perfectionism is the disease that plagued Jobs,&#8221; from a piece in <em><a href=&quot;http://www.theatlanticwire.com/technology/2011/11/crazy-perfectionism-drove-steve-jobs/44623/&quot;>The Atlantic Wire</a></em>.</p><br><br><p>Really? I wonder what the more desirable &#8220;healthy&#8221; state might be? And what sort of slogans might these anti-perfectionists choose for their endeavors? </p>
"	"> Perfectionism (noun) -- a disposition to regard anything short of perfection as unacceptable.  

I find it peculiar that so many of the articles about Steve Jobs following his death have used the term ""perfectionism"" to describe one of his key traits, as if this were a bad thing. For example,  ""Perfectionism is the disease that plagued Jobs,"" from a piece in *[The Atlantic Wire](http://www.theatlanticwire.com/technology/2011/11/crazy-perfectionism-drove-steve-jobs/44623/)*.

Really? I wonder what the more desirable ""healthy"" state might be? And what sort of slogans might these anti-perfectionists choose for their endeavors? 

> ""A relentless pursuit of mediocrity.""

> ""About what you would expect, or a little bit less.""

> ""Not great, but good enough for the likes of you.""

Any modern computing device is a complex, integrated system based on millions of human design decisions, whose quality is based not just on the accumulation of all of those individual judgments, but also on the complex interplay between them. And in order to be anything other than very expensive failures, these products must be joyfully purchased and used by millions of consumers all over the globe.

Given all of this complexity and opportunities for error and poor design and business failure, would you really want to strive for something less than perfection? Granted, perfection can never be achieved, given the difficulty of the problems involved. But isn't that all the more reason why we should be setting our sights at this level? If we start with the intent to achieve something less than perfection, and are content to accept work that is obviously less than perfect, then what sort of end results can we expect?

Commentators complain that Jobs even let this crazy perfectionism spill over outside the boundaries of his professional career and into his personal life. In the same *Atlantic Wire* piece, for example, the following story about the selection of a new washing machine is offered as proof of his derangement. 

> We spent some time in our family talking about what‚Äôs the trade-off we want to make. We ended up talking a lot about design, but also about the values of our family. Did we care most about getting our wash done in an hour versus an hour and a half? Or did we care most about our clothes feeling really soft and lasting longer? Did we care about using a quarter of the water? We spent about two weeks talking about this every night at the dinner table.

Wow. What a nut job. Can you imagine? A guy who runs the most successful consumer products company on the planet, and he thinks it worth spending his evenings talking to his wife and kids about the design trade-offs of a washing machine before buying one. Sheesh! It's only a washing machine! Why can't he drink beer and watch football when he's not working, like the rest of us? 

Come off it. Let's get real. What are the possible reasons for *not* being a perfectionist?

1. You can't tell which end is up anyway. 

2. You really don't give a hoot. 

3. You're much more interested in fitting in than in standing out. 

4. You consider your brain to be an organ only slightly less superfluous than your tonsils and your gall bladder. 

I think I detect a certain degree of intellectual dishonesty in these criticisms of Jobs. I have read many of these articles carefully, and found no spelling errors, no grammatical gaffes. Could it be that these authors are themselves suffering from bouts of niggling perfectionism? Are these the sorts of people who might complain about spelling errors found in others' work, even after coming home from a hard day at the office? In short, might we find well-worn copies of <cite>[Eats, Shoots & Leaves](http://www.amazon.com/gp/product/1592400876/ref=as_li_ss_tl?ie=UTF8&tag=reasontorock-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=1592400876)</cite> at home in their closets?

In the same <cite>Atlantic Wire</cite> piece, another sign of Jobs' ""disease"" is offered up as a quote from a Malcolm Gladwell piece, itself based on the new [Isaacson biography](http://www.amazon.com/gp/product/1451648537/ref=as_li_ss_tl?ie=UTF8&tag=reasontorock-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=1451648537):

> He arrives at his hotel suite in New York for press interviews and decides, at 10 P.M., that the piano needs to be repositioned.

Hold on here a minute. This is not like you or me checking in to the Holiday Inn. This is the CEO of Apple taking a no doubt very expensive suite, not just so he has a place to sleep, but to have a suitable setting where he can meet with members of the media to talk about Apple's latest products, known for their elegant  design. What is so unreasonable about his wanting to arrange the room to make a suitable visual impact on his influential guests? If we were writing about a concert pianist, and he discovered at 10 P.M. that the piano in his suite was out of tune, and he was going to play on that instrument in front of the press the next morning, would his complaint be viewed as a sign of dysfunction? 

I think there are two truths here that say more about our culture than they do about Steve Jobs:

1. We tend to evaluate ""perfectionism"" as a social trait rather than as a business value. As a social trait, of course, it can be annoying -- even though, as a business value, it can be critical to an organization's success. 

2. We tend to use ""perfectionism"" as a derogatory term when someone else cares more about certain values than we do, or than we think they ought to. If we're the sort of person who is frequently unsure about spelling, for example, and let our word processing software correct our mistakes, then we will probably call our boss a perfectionist if he or she points out the spelling errors in our work. If we're a software developer writing documentation for internal use, then this sort of sensitivity to spelling errors may be inappropriate. But if we're writing copy for a marketing piece for our company's new product, then such sensitivity to spelling errors is a business necessity. 

The truth is that Steve Jobs had a refined design sense that made him sensitive to the slightest issues -- things that the rest of us might not notice at first, things that we might not be able to quite put our fingers on, but things that ultimately, and in accumulation, would cause us to be less than satisfied with a product.  

I, for one, am thankful for the perfectionism that pervades Apple every time I power up one of its products. I'm grateful for all the little touches, and all the grand design concepts, that reflect the seemingly infinite thoughtfulness and care that go into each of their works.

Perfectionism may be a demanding pursuit, but when it comes to getting the important things right, it sure beats all the alternatives that I've seen.  
"
Communication	Taming the E-mail Monster	2012-02-11	9 - Closed	Communication	"<p>I can still remember a time when the IT Director where I worked issued an edict stating that no further external memoranda would leave our department without his approval. </p><br><br><p>A statement like this sounds terribly ancient to us today, at least partially because e-mail and other forms of electronic communication have become so common that it is hard to imagine a time when the current overwhelming flow of written text could have been staunched by such a simple, peremptory command. </p><br><br><p>Almost everyone I talk to today is suffering from e-mail overload to one degree or another: I know it&#8217;s gotten bad when people tell me that they are pleasantly surprised to see that I actually respond to their e-mails within a few hours!</p><br><br><p>It doesn&#8217;t have to be that way. The genie can be put back in the bottle, and e-mail can once again become a willing helpmeet, rather than a rampaging monster. All it takes is the discipline to follow the steps below. </p><br><br><p>Note that these tips involve all the various pieces of the e-mail process. My experience has been that it is only through this sort of systems thinking that the problem can be addressed. Local solutions (deleting everything in your inbox at the end of the week, for example) may bring temporary relief to one user in the short run, but only adds to the overall problem in the larger view.</p><br><br><p>So here they are &#8212; 15 steps to stopping the e-mail madness!</p>
"	"I can still remember a time when the IT Director where I worked issued an edict stating that no further external memoranda would leave our department without his approval. 

A statement like this sounds terribly ancient to us today, at least partially because e-mail and other forms of electronic communication have become so common that it is hard to imagine a time when the current overwhelming flow of written text could have been staunched by such a simple, peremptory command. 

Almost everyone I talk to today is suffering from e-mail overload to one degree or another: I know it's gotten bad when people tell me that they are pleasantly surprised to see that I actually respond to their e-mails within a few hours!

It doesn't have to be that way. The genie can be put back in the bottle, and e-mail can once again become a willing helpmeet, rather than a rampaging monster. All it takes is the discipline to follow the steps below. 

Note that these tips involve all the various pieces of the e-mail process. My experience has been that it is only through this sort of systems thinking that the problem can be addressed. Local solutions (deleting everything in your inbox at the end of the week, for example) may bring temporary relief to one user in the short run, but only adds to the overall problem in the larger view.

So here they are -- 15 steps to stopping the e-mail madness!

**1. If you regularly receive e-mail that is of no interest to you, then let the sender know!**

We sometimes fail to take this simple step for fear of offending the sender, or for lack of time to make the request, but in the long run it is much more offensive (and time-consuming!) to delete e-mails without reading them than it is to ask the sender to remove you from a distribution list.  

**2. Don't send an e-mail too long to be entirely visible on a single screen.**

If it's longer than this, then there's a good chance that it won't be read in its entirety. And even if it is, there's a good chance it won't be effectively understood. Use some other form of communication instead if you have that much material to convey. 

**3. Never send an e-mail without taking a few seconds to proofread it.**

If it takes more than a few seconds to proofread, then it's probably too long anyway (see item 2). And if you don't think the e-mail is important enough to proofread, then odds are your potential readers will get the message that it's not important enough for them to actually read. 

An important corollary is to always turn on your spelling checker, and help it learn valid words that it may not initially recognize. Taken together, these steps will help to avoid e-mails going out with obvious spelling errors that make your missive look more like a hastily assembled ransom note than a business communication worthy of the recipient's attention.  

**4. Be selective about your target audience.**

Before hitting the send button, make sure you're not sending the e-mail to a longer list than is really necessary. Not only will you avoid wasting people's time, the people you do send it to will be more likely to read it and respond productively if they can see that they're part of a select few recipients.  

An important corollary of this rule, of course, is to never hit ""Reply to All"" if you can more productively limit your response to a smaller audience. 

**5. Carefully distinguish between those who should be recipients vs. those who only need to be copied.**

Be aware that some people deal with their inbox by ignoring e-mails on which they're only copied. So be sure to include any folks from whom you expect some action in the primary addressee list, and cc those who may be interested but don't have a definite need to know. Making this distinction will also avoid potential confusion about who is actually expected to take some action as the result of your note. 

**6. Avoid a scolding or hostile tone in your e-mails.**

You may have every right to be mad. Your recipient may have been ignoring your e-mails for over a week. They may be delinquent in completing an important action. They may have done something that you consider completely idiotic and misguided. 

None of this matters. If you have this sort of information and emotion to convey, then it should be done face-to-face, or over the phone. Trying to scold people via e-mail will only make them less likely to read and respond to your e-mails in the future. It's like telling your wayward dog to ""Come!"" while waving a rolled-up newspaper -- your mixed message is not likely to have the desired effect.

**7. If you've discovered a contentious issue, and failed to resolve it in the first couple of rounds of e-mails and replies, then schedule a meeting for further discussion.**

Continuing to use e-mail to address the issue at that point is only likely to drive the issue underground (creating a festering sore that will worsen over time), or further polarize your audience, making the issue even less amenable to an amicable future resolution. 

**8. Minimize use of e-mail to provide information of enduring interest.**

Information that people will want to refer to later should be stored on a Web site or wiki or some other served information repository. The initial announcement of the availability of such information should be brief and contain a link to the ongoing location of the information. 

Such practices avoid the waste of having all the recipients separately figuring out how to store the information for later reference, and ensures that all consumers of the information are always referring to the latest version of the information. 

**9. Choose a system for managing your incoming mail and implement it consistently.**

There doesn't seem to be any one system that works for everyone. Some people keep a separate archive, with folders organized by topic, for storing e-mails they may later want to reference. Others keep all their e-mail forever in one big folder, trusting to searching, sorting and filtering tools to find a note of interest when necessary. Some  establish a sophisticated set of automated rules to help them sort and filter their incoming mail. Any of these systems can work effectively, so long as it matches your work style, and so long as you use it consistently. 

But whatever you do, adopt some sort of system. Letting the e-mail pile up without reading or responding to it, then whining about how much e-mail you get, is just lame. 

**10. Never end your day with unread e-mail.**

Yes, I know this sounds impossible for some of you. And there will be days when this will be unrealistic. But as a general rule, this is a critical discipline. If you've got 10 e-mails you can't find time to read today, then you're likely to have 20 tomorrow, and so on. Before long, perhaps while you're hosting an online meeting, your coworkers will see the hundreds of unread e-mails in your inbox and will realize that sending you further e-mail is likely to be a pointless effort. This may seem like a good thing, until you realize that they are now going around you and over your head in order to get some needed action. 

**11. Avoid ""touching"" any given e-mail more than once.**

If you are going to have any hope of dealing with all that e-mail, then you will need to find a way to do so efficiently. And the most important rule here is that, once you look at an e-mail, you should read it and decide what to do with it before moving on to anything else. 

In many or most cases, you should be able to simply delete the e-mail after reading it. In many other cases, you can dash off a brief reply, or forward it to someone else, and then delete the e-mail. 

Other e-mails may require more complex analysis or action, and may need to wait until later. Of course, if you've deleted the others, then leaving these e-mails in your inbox until you have time to deal with them is a low-cost option. Some people may prefer more complex systems for sorting and filing these, or transferring them to some sort of task manager. Again, there are many viable options: you just need to find one that works for you and apply it consistently. 

(By the way, smart phones seem to exacerbate this problem, since people frequently make time to check their inbox using such devices, but often put off dealing with their e-mails until they can get back to their full-size screens and keyboards.)

**12. Wait to reply.**

Despite the advice above, there are times when it is better to read a message now but wait until later to respond to it. 

First, if you are catching up on your incoming mail, then you should generally wait to reply to a message until you have read following ones, to see what others may have already contributed: no sense in firing off a reply to an earlier message if the conversation has already progressed beyond that point. Others may even have resolved the issue without your assistance, which would be the best-case scenario, since the most efficient email is the one you never had to send, and the one others never had to read.

Second, if you don't yet have a definitive response, it may be better to take time to collect further information, or simply collect your thoughts, or let others reply, before sending your own words into the ether. 

Finally, if you're in a position of authority and a decision is called for, you may want to wait to let others weigh in with information and opinions before you respond, since your response may be viewed as the final word on the subject and so may forestall further discussion. 

**13. Turn off instant notifications of new mail.**

I suppose there must have been a moment in the history of the medium when the arrival of a new e-mail message was so exciting that you couldn't bear to wait one second before learning of its presence in your inbox. I think it's safe to say that this moment has now passed. If you're still hearing little noises, or seeing little pop-ups, every time you receive a new message, then take a few minutes right now to find the option to turn it off. You will make more efficient use of your time if you pick the moment when you want to read new mail, rather than having the arrival of every message interrupt your train of thought while you're trying to focus on something else. 

**14. Leverage E-Mail's many strengths.**

There are lots of things e-mail is not very good at. And it can certainly turn on you, if you're not careful. But e-mail can be a great productivity enhancer when used correctly. It's particularly good for carrying on multiple concurrent, asynchronous conversations, for maintaining a clear record of ongoing written dialogues, and for quickly conveying written news as it becomes available. 

**15. Avoid being boring.**

This is a good recommendation for all written business communications, but is certainly applicable to e-mail. If you want people to read what you have written, then it helps to make it interesting. Your subject matter will not always have people on the edge of their seats, but with a little effort you can use humor, enthusiasm and punchy, direct language to maximize interest levels in your audience. I don't expect people to save all of my e-mails and mount them on the walls of their cubicles, but I know some of my electronic missives that have achieved that honor, and it's always a worthy goal to shoot for. 

*Originally published on Oct. 21, 2010. Revised on Feb. 11, 2012, to add items 12 and 13.*
"
Apple	Successful Business Strategies (As Recently Demonstrated by Apple)	2012-03-21	9 - Closed	Apple, Business	"<p>I had dinner with a group of friends a few nights ago, and we enjoyed a couple of conversations that started me thinking about the business strategies that have made Apple so successful in the last few years. </p><br><br><p>I point these out because I think all of them are worthy of emulation, and few of them are actually put into practice by many other companies. </p><br><br><p>So here they are: the seven business strategies that have arguably led Apple to the top of the global corporate heap.</p>
"	"I had dinner with a group of friends a few nights ago, and we enjoyed a couple of conversations that started me thinking about the business strategies that have made Apple so successful in the last few years. 

I point these out because I think all of them are worthy of emulation, and few of them are actually put into practice by many other companies. 

So here they are: the seven business strategies that have arguably led Apple to the top of the global corporate heap.

**1. Always aim to be the best.**

This sounds so obvious, and yet so many of Apple&#8217;s competitors have decided to compete on price, or on distribution philosophy (&#8220;open source&#8221; vs. proprietary), or on market share, or have targeted some limited niche.

In comparison, when you think of Mac OS X, the MacBook line, the iPod, the iPhone, the iPad, and even the Apple TV, it&#8217;s pretty obvious that for each product line, Apple&#8217;s goals were simply to create and maintain the best product available in each of their respective markets. 

Note that I&#8217;m not arguing here that Apple has some secret way of actually *making* the best product &#8212; I&#8217;m just pointing out that Apple has consistently *tried* to make the best product, whereas few if any of its competitors have even set their sights this high.

Why aim to make the best product? Here are some of the benefits of this strategy.

* You can command higher profit margins, which in turn allow you to plow more money into research & development, which enables you to make even more great products. 

* Even if you fail to meet all of your goals for the product, you still end up with something that&#8217;s pretty good. Few would call the Apple TV &#8220;insanely great,&#8221; but it&#8217;s still not something Apple need be ashamed of.

* You consistently improve your company&#8217;s brand, and consistently avoid tarnishing that brand. 

* You make it easier for employees, partners and suppliers to find high levels of motivation when working with you. 

* Over time you build a consistent image for your company. 

* You can streamline your product lines, avoiding product variations that make manufacturing and support more difficult.  

* Oh yeah, and you tend to sell a lot of stuff too.

**2. Sell both the hardware and the software.**

Apple has taken a lot of hits over the years for refusing to &#8220;open&#8221; its software to run on other companies&#8217; hardware, but its refusal to do so under Steve Jobs has demonstrated all of the following benefits.

* You can control and optimize the complete user experience. 

* You avoid diluting your customers&#8217; loyalties by splitting them between multiple brands. (How excited do you think customers can get when they buy a Dell PC running Microsoft Windows with a sticker reminding them that it&#8217;s Intel on the inside? As opposed to a MacBook with a glowing Apple on its case?)

* You can keep the hardware simple: this is practically impossible if you allow multiple other companies to sell hardware that runs your software, because they will inevitably strive to differentiate themselves through bizarre, unattractive and ultimately unproductive variations in their hardware. 

* You can sneak up on your competition. Again, this is practically impossible if you make only the hardware or only the software, because you are then forced to tell multiple other companies about the new stuff you&#8217;ve got in the works, so that they can get their hardware/software ready to work with your new stuff: just try keeping a secret in that sort of environment. 

* You can make more money. If you only sell the hardware, it is hard to command much of a profit margin, because it is hard to differentiate yourself from other products that run the same software. If you only sell the software, it is hard to get customers to buy a product more than once, it is hard to convince your customers that your product has much tangible value, and it is hard to prevent competitors from undercutting you on price. Sell both together, and you get repeat customers willing to pay a bit more to get a reliable and desirable product.

**3. Dare to create something new.**

So many companies seem to be content to make incremental improvements to existing products. This is a defensive strategy that tries to keep an existing customer base from eroding, not an aggressive strategy that is likely to command new market share. When you look at the iPod, the iPhone and the iPad, what strikes me is not so much what great products these are, but how isolated they are as examples of fundamentally new products in the consumer electronics space. I mean, where is the competition? Not in the sense of others following in Apple&#8217;s footsteps, trying to create something roughly comparable &#8212; there&#8217;s plenty of that &#8212; but in terms of other companies creating something fundamentally new? It&#8217;s hard to think of even any recent attempts, failed or otherwise, that are comparable to Apple&#8217;s.

**4. Sell to individual consumers, not institutional buyers.**

Institutional buyers tend to favor low prices, stability and their established supplier base. In theory they like innovation too, but in practice they tend to wait until &#8220;innovation&#8221; shows up in one of the existing product lines they are already buying from an existing supplier, and even then they want low prices and stability above all else. Also, to make matters worse, institutional buyers tend to make large, monolithic purchasing decisions, so they are extremely risk-averse. So if you want to innovate, these guys are not going to be your best customers. There are no early adopters among institutional buyers. 

Individual consumers, on the other hand, make small, individual purchasing decisions, so you can typically find a group of early adopters among consumers. They are more easily influenced to try new things. They tend to make more emotional choices, and so are open to buying something based on the overall gestalt of the product, rather than on purely objective, quantified criteria. 

For many years, during the period of peak WinTel domination, it was widely asserted and often believed that individual purchasing decisions should follow business preferences: that home users should purchase MS Windows and MS Office, so that their children would learn the tools that would prepare them for the working world. Apple&#8217;s recent successes have proven, however, that innovation occurs in the consumer markets, and that business buyers get gradually dragged along. 

**5. Strive to anticipate, shape and ultimately even define emerging markets.**

I don&#8217;t know that this requires any magical ability to predict the future. And it&#8217;s different from the usual advice to be the first to enter a new market. If you look at music players, smart phones and tablets, Apple was slow to enter all of these markets, and in fact only pursued them after it became obvious that others already in them were not having the sort of success that Apple thought was possible. 

The result? People don&#8217;t think of themselves as wanting a smart phone, and then choosing an iPhone &#8212; they simply know that they want an iPhone. It&#8217;s the same with the iPod and iPad. 

**6. Take the road less traveled.**

It is hard to succeed in business simply by traveling a path already trod by others. It is not that *everything* you do has to be different than others &#8212; in fact, that was a problem that Jobs corrected in Apple when he returned in 1997 &#8212; but you have to be different in *some* ways in order to differentiate your company from its competition. 

This means that you have to be a bit of a contrarian &#8212; you have to question prevalent assumptions and take nothing for granted in order to discover profitable innovations that others have overlooked. 

In other words, &#8220;Think Different.&#8221;

**7. Focus.**

Unlike many of its competitors, Apple has resisted the temptation to get into every possible market in computing and consumer electronics. In fact, if you look at Apple&#8217;s home page, you&#8217;ll find only five product lines listed across the top: Mac, iPod, iPhone, iPad and iTunes. That&#8217;s it. I can&#8217;t think of a single company of comparable size that has such a limited set. Look at the Google home page, for example, and you see seven products listed across the top, plus another menu item that says &#8220;More,&#8221; which leads to another menu that includes an &#8220;Even More.&#8221; There is no &#8220;more&#8221; for Apple, let alone an &#8220;even more.&#8221;

<br />

Oh, and what were those conversations I was having with friends that led me to write this piece? One long-time Windows users showed up to dinner with a shiny new MacBook. When I asked him what had happened, he said he was still running Windows, but he&#8217;d purchased a MacBook because &#8220;Apple makes the best hardware.&#8221;

The other friend was a Microsoft employee, and he was explaining that company&#8217;s modest goals in the smart phone and tablet markets.
"
Business	Successful Business Strategies (As Recently Demonstrated by Apple)	2012-03-21	9 - Closed	Apple, Business	"<p>I had dinner with a group of friends a few nights ago, and we enjoyed a couple of conversations that started me thinking about the business strategies that have made Apple so successful in the last few years. </p><br><br><p>I point these out because I think all of them are worthy of emulation, and few of them are actually put into practice by many other companies. </p><br><br><p>So here they are: the seven business strategies that have arguably led Apple to the top of the global corporate heap.</p>
"	"I had dinner with a group of friends a few nights ago, and we enjoyed a couple of conversations that started me thinking about the business strategies that have made Apple so successful in the last few years. 

I point these out because I think all of them are worthy of emulation, and few of them are actually put into practice by many other companies. 

So here they are: the seven business strategies that have arguably led Apple to the top of the global corporate heap.

**1. Always aim to be the best.**

This sounds so obvious, and yet so many of Apple&#8217;s competitors have decided to compete on price, or on distribution philosophy (&#8220;open source&#8221; vs. proprietary), or on market share, or have targeted some limited niche.

In comparison, when you think of Mac OS X, the MacBook line, the iPod, the iPhone, the iPad, and even the Apple TV, it&#8217;s pretty obvious that for each product line, Apple&#8217;s goals were simply to create and maintain the best product available in each of their respective markets. 

Note that I&#8217;m not arguing here that Apple has some secret way of actually *making* the best product &#8212; I&#8217;m just pointing out that Apple has consistently *tried* to make the best product, whereas few if any of its competitors have even set their sights this high.

Why aim to make the best product? Here are some of the benefits of this strategy.

* You can command higher profit margins, which in turn allow you to plow more money into research & development, which enables you to make even more great products. 

* Even if you fail to meet all of your goals for the product, you still end up with something that&#8217;s pretty good. Few would call the Apple TV &#8220;insanely great,&#8221; but it&#8217;s still not something Apple need be ashamed of.

* You consistently improve your company&#8217;s brand, and consistently avoid tarnishing that brand. 

* You make it easier for employees, partners and suppliers to find high levels of motivation when working with you. 

* Over time you build a consistent image for your company. 

* You can streamline your product lines, avoiding product variations that make manufacturing and support more difficult.  

* Oh yeah, and you tend to sell a lot of stuff too.

**2. Sell both the hardware and the software.**

Apple has taken a lot of hits over the years for refusing to &#8220;open&#8221; its software to run on other companies&#8217; hardware, but its refusal to do so under Steve Jobs has demonstrated all of the following benefits.

* You can control and optimize the complete user experience. 

* You avoid diluting your customers&#8217; loyalties by splitting them between multiple brands. (How excited do you think customers can get when they buy a Dell PC running Microsoft Windows with a sticker reminding them that it&#8217;s Intel on the inside? As opposed to a MacBook with a glowing Apple on its case?)

* You can keep the hardware simple: this is practically impossible if you allow multiple other companies to sell hardware that runs your software, because they will inevitably strive to differentiate themselves through bizarre, unattractive and ultimately unproductive variations in their hardware. 

* You can sneak up on your competition. Again, this is practically impossible if you make only the hardware or only the software, because you are then forced to tell multiple other companies about the new stuff you&#8217;ve got in the works, so that they can get their hardware/software ready to work with your new stuff: just try keeping a secret in that sort of environment. 

* You can make more money. If you only sell the hardware, it is hard to command much of a profit margin, because it is hard to differentiate yourself from other products that run the same software. If you only sell the software, it is hard to get customers to buy a product more than once, it is hard to convince your customers that your product has much tangible value, and it is hard to prevent competitors from undercutting you on price. Sell both together, and you get repeat customers willing to pay a bit more to get a reliable and desirable product.

**3. Dare to create something new.**

So many companies seem to be content to make incremental improvements to existing products. This is a defensive strategy that tries to keep an existing customer base from eroding, not an aggressive strategy that is likely to command new market share. When you look at the iPod, the iPhone and the iPad, what strikes me is not so much what great products these are, but how isolated they are as examples of fundamentally new products in the consumer electronics space. I mean, where is the competition? Not in the sense of others following in Apple&#8217;s footsteps, trying to create something roughly comparable &#8212; there&#8217;s plenty of that &#8212; but in terms of other companies creating something fundamentally new? It&#8217;s hard to think of even any recent attempts, failed or otherwise, that are comparable to Apple&#8217;s.

**4. Sell to individual consumers, not institutional buyers.**

Institutional buyers tend to favor low prices, stability and their established supplier base. In theory they like innovation too, but in practice they tend to wait until &#8220;innovation&#8221; shows up in one of the existing product lines they are already buying from an existing supplier, and even then they want low prices and stability above all else. Also, to make matters worse, institutional buyers tend to make large, monolithic purchasing decisions, so they are extremely risk-averse. So if you want to innovate, these guys are not going to be your best customers. There are no early adopters among institutional buyers. 

Individual consumers, on the other hand, make small, individual purchasing decisions, so you can typically find a group of early adopters among consumers. They are more easily influenced to try new things. They tend to make more emotional choices, and so are open to buying something based on the overall gestalt of the product, rather than on purely objective, quantified criteria. 

For many years, during the period of peak WinTel domination, it was widely asserted and often believed that individual purchasing decisions should follow business preferences: that home users should purchase MS Windows and MS Office, so that their children would learn the tools that would prepare them for the working world. Apple&#8217;s recent successes have proven, however, that innovation occurs in the consumer markets, and that business buyers get gradually dragged along. 

**5. Strive to anticipate, shape and ultimately even define emerging markets.**

I don&#8217;t know that this requires any magical ability to predict the future. And it&#8217;s different from the usual advice to be the first to enter a new market. If you look at music players, smart phones and tablets, Apple was slow to enter all of these markets, and in fact only pursued them after it became obvious that others already in them were not having the sort of success that Apple thought was possible. 

The result? People don&#8217;t think of themselves as wanting a smart phone, and then choosing an iPhone &#8212; they simply know that they want an iPhone. It&#8217;s the same with the iPod and iPad. 

**6. Take the road less traveled.**

It is hard to succeed in business simply by traveling a path already trod by others. It is not that *everything* you do has to be different than others &#8212; in fact, that was a problem that Jobs corrected in Apple when he returned in 1997 &#8212; but you have to be different in *some* ways in order to differentiate your company from its competition. 

This means that you have to be a bit of a contrarian &#8212; you have to question prevalent assumptions and take nothing for granted in order to discover profitable innovations that others have overlooked. 

In other words, &#8220;Think Different.&#8221;

**7. Focus.**

Unlike many of its competitors, Apple has resisted the temptation to get into every possible market in computing and consumer electronics. In fact, if you look at Apple&#8217;s home page, you&#8217;ll find only five product lines listed across the top: Mac, iPod, iPhone, iPad and iTunes. That&#8217;s it. I can&#8217;t think of a single company of comparable size that has such a limited set. Look at the Google home page, for example, and you see seven products listed across the top, plus another menu item that says &#8220;More,&#8221; which leads to another menu that includes an &#8220;Even More.&#8221; There is no &#8220;more&#8221; for Apple, let alone an &#8220;even more.&#8221;

<br />

Oh, and what were those conversations I was having with friends that led me to write this piece? One long-time Windows users showed up to dinner with a shiny new MacBook. When I asked him what had happened, he said he was still running Windows, but he&#8217;d purchased a MacBook because &#8220;Apple makes the best hardware.&#8221;

The other friend was a Microsoft employee, and he was explaining that company&#8217;s modest goals in the smart phone and tablet markets.
"
Diversity	The Power of Diverse Teams	2012-03-24	9 - Closed	Diversity, Leadership, Music, Teams	"<p>I came across a fascinating piece of diversity research recently. In an article at Forbes.com Katherine Phillips talks about a study comparing the performance of both homogenous and diverse groups. </p><br><br><blockquote><br>  <p>The diverse groups reported that they didn&#8217;t work together very effectively, and they were less confident about their decisions than the homogeneous groups, yet they consistently outperformed those homogeneous groups.</p><br></blockquote><br><br><p>And why did the diverse groups enjoy this performance benefit?</p><br><br><blockquote><br>  <p>When anyone in a group has perspectives, opinions or information that vary from the consensus&#8230; the mere presence of social diversity will make them express, and others consider, those perspectives in a way that benefits the group.</p><br></blockquote><br><br><p>Some of this sounds counterintuitive&#8230; and yet it doesn&#8217;t surprise me greatly. For one, it&#8217;s consistent with my  experience in fostering the growth of powerful teams. But also it&#8217;s consistent with my appreciation and study of modern music and musical groups. </p>
"	"I came across a fascinating piece of diversity research recently. In an [article at Forbes.com][phillips] Katherine Phillips talks about a study comparing the performance of both homogenous and diverse groups. 

> The diverse groups reported that they didn't work together very effectively, and they were less confident about their decisions than the homogeneous groups, yet they consistently outperformed those homogeneous groups.

And why did the diverse groups enjoy this performance benefit?

> When anyone in a group has perspectives, opinions or information that vary from the consensus... the mere presence of social diversity will make them express, and others consider, those perspectives in a way that benefits the group.

Some of this sounds counterintuitive... and yet it doesn't surprise me greatly. For one, it's consistent with my  experience in fostering the growth of powerful teams. But also it's consistent with [my appreciation and study of modern music and musical groups][reason]. 

This appreciation began for me when The Beatles burst upon the American musical scene in the early sixties. Unlike most other musical artists of the era, there was no separation between front man and backup band. It was not ""Buddy Holly and the Crickets,"" but simply ""The Beatles."" And radio DJs of the era often referred to them as ""John, Paul, George and Ringo"" rather than by the group's collective name. This was not just in recognition of their popularity, but an appreciation of the fact that all four members of the group, despite their obviously different personalities, perspectives and roles, were in fact equals. 

[The Beatles Anthology][beatles] later reported the tough decision John Lennon had to make when first forming the fledgling rock group.

> Was it better to have a guy who was better than the people I had in? To make the group stronger, or to let me be stronger? Instead of going for an individual thing we went for the strongest format -- equals.

But did this mean that The Beatles were models of efficiency in the recording studio? Hardly. After the breakup of The Beatles, Ringo recounted for [Rolling Stone][ringo] magazine the contrast between working as part of a group of equals vs. hiring a backup group.

> Pete [Drake] was in London for George's album. Somehow he ended up in my car and saw all these country tapes. He said I ought to go to Nashville and do an album. But I thought, ""Oh no, I don't want to go to Nashville for six months."" Because that's what it used to always take us to do an album -- six months. 
>
> But Pete said, ""What do you mean, six months? We did Nashville Skyline in two days."" Two days? I couldn't believe it.... 

This was not just the experience of The Beatles, but of many rock groups of the era. In [Levon Helm's story of The Band][helm], he recounts Rick Danko's thoughts on the nature of their group.

> Young Rick was insistent. ""Why can't we have a band,"" he asked, ""where everybody plays an instrument, everybody sings, everybody does it without some guy out in front of the thing running the show and deciding the way things are gonna go?"" This was a radical notion, like communism. But maybe, I thought, for the first time in our or anyone's imagination, the rhythm section could run the band!

This same egalitarian, collaborative spirit is present in jazz as well. As Wynton Marsalis said in his book [Moving to Higher Ground: How Jazz Can Change Your Life][marsalis]:

> Jazz is the most flexible art form ever because it believes in the good taste of individuals. It believes in our ability to make reasonable choices. It takes a chance on our decision-making skills instead of legislating our freedom away with written restrictions and restrictive hierarchies. In jazz, the size of your heart and your ability to play determine your position in the band. The philosophy of jazz is rooted in the elevation and enrichment of people, plain ol' folks.

One of my greatest lessons in leadership came when hearing and seeing Miles Davis perform at Hill Auditorium in Ann Arbor in 1970. For what I remember most clearly today is not the playing of the great jazz trumpeter himself, but the way he moved to the side of the stage between solos, restlessly pacing in the shadows, making way for this team of equals he had formed, including some of the greatest talent of that or any era -- John McLaughlin, Wayne Shorter, Chick Corea, Dave Holland, Jack DeJohnette and Airto Moreira -- to collectively form the complex and challenging music that was taking shape as we all watched and listened. 

And so as I've grown over time from individual contributor to manager, and moved from one assignment to the next, I've come to believe that my greatest contributions as a leader are to make sure that each team includes diverse voices, that each of those voices has a chance to be heard, that we avoid easy answers based on assumed consensus, and that we all recognize that our collective wisdom is greater than the smarts of any one of us on our own. 

In other words, as the boss, I try to always remember the [hard-learned lesson][trick] of [The Boss][theboss]:

> The trick in keeping bands together is always the same: ""Hey, ______, the guy standing next to you is more important than you think he is.""

In my experience, this is the trick not only to keeping teams together, but to helping them reach higher levels of performance. 

[phillips]: http://www.forbes.com/2009/06/02/diversity-collaboration-teams-leadership-managing-creativity.html
[reason]:   http://www.reasontorock.com/
[beatles]:  ../wisdom/equals.html
[ringo]:    ../wisdom/what-do-you-mean-six-months.html
[stone]:    http://www.rollingstone.com
[helm]:     ../wisdom/the-rhythm-section-could-run-the-band.html
[marsalis]: ../wisdom/the-philosophy-of-jazz.html
[trick]:    ../wisdom/the-trick-in-keeping-bands-together.html
[theboss]:  http://en.wikipedia.org/wiki/Bruce_Springsteen
"
Leadership	The Power of Diverse Teams	2012-03-24	9 - Closed	Diversity, Leadership, Music, Teams	"<p>I came across a fascinating piece of diversity research recently. In an article at Forbes.com Katherine Phillips talks about a study comparing the performance of both homogenous and diverse groups. </p><br><br><blockquote><br>  <p>The diverse groups reported that they didn&#8217;t work together very effectively, and they were less confident about their decisions than the homogeneous groups, yet they consistently outperformed those homogeneous groups.</p><br></blockquote><br><br><p>And why did the diverse groups enjoy this performance benefit?</p><br><br><blockquote><br>  <p>When anyone in a group has perspectives, opinions or information that vary from the consensus&#8230; the mere presence of social diversity will make them express, and others consider, those perspectives in a way that benefits the group.</p><br></blockquote><br><br><p>Some of this sounds counterintuitive&#8230; and yet it doesn&#8217;t surprise me greatly. For one, it&#8217;s consistent with my  experience in fostering the growth of powerful teams. But also it&#8217;s consistent with my appreciation and study of modern music and musical groups. </p>
"	"I came across a fascinating piece of diversity research recently. In an [article at Forbes.com][phillips] Katherine Phillips talks about a study comparing the performance of both homogenous and diverse groups. 

> The diverse groups reported that they didn't work together very effectively, and they were less confident about their decisions than the homogeneous groups, yet they consistently outperformed those homogeneous groups.

And why did the diverse groups enjoy this performance benefit?

> When anyone in a group has perspectives, opinions or information that vary from the consensus... the mere presence of social diversity will make them express, and others consider, those perspectives in a way that benefits the group.

Some of this sounds counterintuitive... and yet it doesn't surprise me greatly. For one, it's consistent with my  experience in fostering the growth of powerful teams. But also it's consistent with [my appreciation and study of modern music and musical groups][reason]. 

This appreciation began for me when The Beatles burst upon the American musical scene in the early sixties. Unlike most other musical artists of the era, there was no separation between front man and backup band. It was not ""Buddy Holly and the Crickets,"" but simply ""The Beatles."" And radio DJs of the era often referred to them as ""John, Paul, George and Ringo"" rather than by the group's collective name. This was not just in recognition of their popularity, but an appreciation of the fact that all four members of the group, despite their obviously different personalities, perspectives and roles, were in fact equals. 

[The Beatles Anthology][beatles] later reported the tough decision John Lennon had to make when first forming the fledgling rock group.

> Was it better to have a guy who was better than the people I had in? To make the group stronger, or to let me be stronger? Instead of going for an individual thing we went for the strongest format -- equals.

But did this mean that The Beatles were models of efficiency in the recording studio? Hardly. After the breakup of The Beatles, Ringo recounted for [Rolling Stone][ringo] magazine the contrast between working as part of a group of equals vs. hiring a backup group.

> Pete [Drake] was in London for George's album. Somehow he ended up in my car and saw all these country tapes. He said I ought to go to Nashville and do an album. But I thought, ""Oh no, I don't want to go to Nashville for six months."" Because that's what it used to always take us to do an album -- six months. 
>
> But Pete said, ""What do you mean, six months? We did Nashville Skyline in two days."" Two days? I couldn't believe it.... 

This was not just the experience of The Beatles, but of many rock groups of the era. In [Levon Helm's story of The Band][helm], he recounts Rick Danko's thoughts on the nature of their group.

> Young Rick was insistent. ""Why can't we have a band,"" he asked, ""where everybody plays an instrument, everybody sings, everybody does it without some guy out in front of the thing running the show and deciding the way things are gonna go?"" This was a radical notion, like communism. But maybe, I thought, for the first time in our or anyone's imagination, the rhythm section could run the band!

This same egalitarian, collaborative spirit is present in jazz as well. As Wynton Marsalis said in his book [Moving to Higher Ground: How Jazz Can Change Your Life][marsalis]:

> Jazz is the most flexible art form ever because it believes in the good taste of individuals. It believes in our ability to make reasonable choices. It takes a chance on our decision-making skills instead of legislating our freedom away with written restrictions and restrictive hierarchies. In jazz, the size of your heart and your ability to play determine your position in the band. The philosophy of jazz is rooted in the elevation and enrichment of people, plain ol' folks.

One of my greatest lessons in leadership came when hearing and seeing Miles Davis perform at Hill Auditorium in Ann Arbor in 1970. For what I remember most clearly today is not the playing of the great jazz trumpeter himself, but the way he moved to the side of the stage between solos, restlessly pacing in the shadows, making way for this team of equals he had formed, including some of the greatest talent of that or any era -- John McLaughlin, Wayne Shorter, Chick Corea, Dave Holland, Jack DeJohnette and Airto Moreira -- to collectively form the complex and challenging music that was taking shape as we all watched and listened. 

And so as I've grown over time from individual contributor to manager, and moved from one assignment to the next, I've come to believe that my greatest contributions as a leader are to make sure that each team includes diverse voices, that each of those voices has a chance to be heard, that we avoid easy answers based on assumed consensus, and that we all recognize that our collective wisdom is greater than the smarts of any one of us on our own. 

In other words, as the boss, I try to always remember the [hard-learned lesson][trick] of [The Boss][theboss]:

> The trick in keeping bands together is always the same: ""Hey, ______, the guy standing next to you is more important than you think he is.""

In my experience, this is the trick not only to keeping teams together, but to helping them reach higher levels of performance. 

[phillips]: http://www.forbes.com/2009/06/02/diversity-collaboration-teams-leadership-managing-creativity.html
[reason]:   http://www.reasontorock.com/
[beatles]:  ../wisdom/equals.html
[ringo]:    ../wisdom/what-do-you-mean-six-months.html
[stone]:    http://www.rollingstone.com
[helm]:     ../wisdom/the-rhythm-section-could-run-the-band.html
[marsalis]: ../wisdom/the-philosophy-of-jazz.html
[trick]:    ../wisdom/the-trick-in-keeping-bands-together.html
[theboss]:  http://en.wikipedia.org/wiki/Bruce_Springsteen
"
Music	The Power of Diverse Teams	2012-03-24	9 - Closed	Diversity, Leadership, Music, Teams	"<p>I came across a fascinating piece of diversity research recently. In an article at Forbes.com Katherine Phillips talks about a study comparing the performance of both homogenous and diverse groups. </p><br><br><blockquote><br>  <p>The diverse groups reported that they didn&#8217;t work together very effectively, and they were less confident about their decisions than the homogeneous groups, yet they consistently outperformed those homogeneous groups.</p><br></blockquote><br><br><p>And why did the diverse groups enjoy this performance benefit?</p><br><br><blockquote><br>  <p>When anyone in a group has perspectives, opinions or information that vary from the consensus&#8230; the mere presence of social diversity will make them express, and others consider, those perspectives in a way that benefits the group.</p><br></blockquote><br><br><p>Some of this sounds counterintuitive&#8230; and yet it doesn&#8217;t surprise me greatly. For one, it&#8217;s consistent with my  experience in fostering the growth of powerful teams. But also it&#8217;s consistent with my appreciation and study of modern music and musical groups. </p>
"	"I came across a fascinating piece of diversity research recently. In an [article at Forbes.com][phillips] Katherine Phillips talks about a study comparing the performance of both homogenous and diverse groups. 

> The diverse groups reported that they didn't work together very effectively, and they were less confident about their decisions than the homogeneous groups, yet they consistently outperformed those homogeneous groups.

And why did the diverse groups enjoy this performance benefit?

> When anyone in a group has perspectives, opinions or information that vary from the consensus... the mere presence of social diversity will make them express, and others consider, those perspectives in a way that benefits the group.

Some of this sounds counterintuitive... and yet it doesn't surprise me greatly. For one, it's consistent with my  experience in fostering the growth of powerful teams. But also it's consistent with [my appreciation and study of modern music and musical groups][reason]. 

This appreciation began for me when The Beatles burst upon the American musical scene in the early sixties. Unlike most other musical artists of the era, there was no separation between front man and backup band. It was not ""Buddy Holly and the Crickets,"" but simply ""The Beatles."" And radio DJs of the era often referred to them as ""John, Paul, George and Ringo"" rather than by the group's collective name. This was not just in recognition of their popularity, but an appreciation of the fact that all four members of the group, despite their obviously different personalities, perspectives and roles, were in fact equals. 

[The Beatles Anthology][beatles] later reported the tough decision John Lennon had to make when first forming the fledgling rock group.

> Was it better to have a guy who was better than the people I had in? To make the group stronger, or to let me be stronger? Instead of going for an individual thing we went for the strongest format -- equals.

But did this mean that The Beatles were models of efficiency in the recording studio? Hardly. After the breakup of The Beatles, Ringo recounted for [Rolling Stone][ringo] magazine the contrast between working as part of a group of equals vs. hiring a backup group.

> Pete [Drake] was in London for George's album. Somehow he ended up in my car and saw all these country tapes. He said I ought to go to Nashville and do an album. But I thought, ""Oh no, I don't want to go to Nashville for six months."" Because that's what it used to always take us to do an album -- six months. 
>
> But Pete said, ""What do you mean, six months? We did Nashville Skyline in two days."" Two days? I couldn't believe it.... 

This was not just the experience of The Beatles, but of many rock groups of the era. In [Levon Helm's story of The Band][helm], he recounts Rick Danko's thoughts on the nature of their group.

> Young Rick was insistent. ""Why can't we have a band,"" he asked, ""where everybody plays an instrument, everybody sings, everybody does it without some guy out in front of the thing running the show and deciding the way things are gonna go?"" This was a radical notion, like communism. But maybe, I thought, for the first time in our or anyone's imagination, the rhythm section could run the band!

This same egalitarian, collaborative spirit is present in jazz as well. As Wynton Marsalis said in his book [Moving to Higher Ground: How Jazz Can Change Your Life][marsalis]:

> Jazz is the most flexible art form ever because it believes in the good taste of individuals. It believes in our ability to make reasonable choices. It takes a chance on our decision-making skills instead of legislating our freedom away with written restrictions and restrictive hierarchies. In jazz, the size of your heart and your ability to play determine your position in the band. The philosophy of jazz is rooted in the elevation and enrichment of people, plain ol' folks.

One of my greatest lessons in leadership came when hearing and seeing Miles Davis perform at Hill Auditorium in Ann Arbor in 1970. For what I remember most clearly today is not the playing of the great jazz trumpeter himself, but the way he moved to the side of the stage between solos, restlessly pacing in the shadows, making way for this team of equals he had formed, including some of the greatest talent of that or any era -- John McLaughlin, Wayne Shorter, Chick Corea, Dave Holland, Jack DeJohnette and Airto Moreira -- to collectively form the complex and challenging music that was taking shape as we all watched and listened. 

And so as I've grown over time from individual contributor to manager, and moved from one assignment to the next, I've come to believe that my greatest contributions as a leader are to make sure that each team includes diverse voices, that each of those voices has a chance to be heard, that we avoid easy answers based on assumed consensus, and that we all recognize that our collective wisdom is greater than the smarts of any one of us on our own. 

In other words, as the boss, I try to always remember the [hard-learned lesson][trick] of [The Boss][theboss]:

> The trick in keeping bands together is always the same: ""Hey, ______, the guy standing next to you is more important than you think he is.""

In my experience, this is the trick not only to keeping teams together, but to helping them reach higher levels of performance. 

[phillips]: http://www.forbes.com/2009/06/02/diversity-collaboration-teams-leadership-managing-creativity.html
[reason]:   http://www.reasontorock.com/
[beatles]:  ../wisdom/equals.html
[ringo]:    ../wisdom/what-do-you-mean-six-months.html
[stone]:    http://www.rollingstone.com
[helm]:     ../wisdom/the-rhythm-section-could-run-the-band.html
[marsalis]: ../wisdom/the-philosophy-of-jazz.html
[trick]:    ../wisdom/the-trick-in-keeping-bands-together.html
[theboss]:  http://en.wikipedia.org/wiki/Bruce_Springsteen
"
Teams	The Power of Diverse Teams	2012-03-24	9 - Closed	Diversity, Leadership, Music, Teams	"<p>I came across a fascinating piece of diversity research recently. In an article at Forbes.com Katherine Phillips talks about a study comparing the performance of both homogenous and diverse groups. </p><br><br><blockquote><br>  <p>The diverse groups reported that they didn&#8217;t work together very effectively, and they were less confident about their decisions than the homogeneous groups, yet they consistently outperformed those homogeneous groups.</p><br></blockquote><br><br><p>And why did the diverse groups enjoy this performance benefit?</p><br><br><blockquote><br>  <p>When anyone in a group has perspectives, opinions or information that vary from the consensus&#8230; the mere presence of social diversity will make them express, and others consider, those perspectives in a way that benefits the group.</p><br></blockquote><br><br><p>Some of this sounds counterintuitive&#8230; and yet it doesn&#8217;t surprise me greatly. For one, it&#8217;s consistent with my  experience in fostering the growth of powerful teams. But also it&#8217;s consistent with my appreciation and study of modern music and musical groups. </p>
"	"I came across a fascinating piece of diversity research recently. In an [article at Forbes.com][phillips] Katherine Phillips talks about a study comparing the performance of both homogenous and diverse groups. 

> The diverse groups reported that they didn't work together very effectively, and they were less confident about their decisions than the homogeneous groups, yet they consistently outperformed those homogeneous groups.

And why did the diverse groups enjoy this performance benefit?

> When anyone in a group has perspectives, opinions or information that vary from the consensus... the mere presence of social diversity will make them express, and others consider, those perspectives in a way that benefits the group.

Some of this sounds counterintuitive... and yet it doesn't surprise me greatly. For one, it's consistent with my  experience in fostering the growth of powerful teams. But also it's consistent with [my appreciation and study of modern music and musical groups][reason]. 

This appreciation began for me when The Beatles burst upon the American musical scene in the early sixties. Unlike most other musical artists of the era, there was no separation between front man and backup band. It was not ""Buddy Holly and the Crickets,"" but simply ""The Beatles."" And radio DJs of the era often referred to them as ""John, Paul, George and Ringo"" rather than by the group's collective name. This was not just in recognition of their popularity, but an appreciation of the fact that all four members of the group, despite their obviously different personalities, perspectives and roles, were in fact equals. 

[The Beatles Anthology][beatles] later reported the tough decision John Lennon had to make when first forming the fledgling rock group.

> Was it better to have a guy who was better than the people I had in? To make the group stronger, or to let me be stronger? Instead of going for an individual thing we went for the strongest format -- equals.

But did this mean that The Beatles were models of efficiency in the recording studio? Hardly. After the breakup of The Beatles, Ringo recounted for [Rolling Stone][ringo] magazine the contrast between working as part of a group of equals vs. hiring a backup group.

> Pete [Drake] was in London for George's album. Somehow he ended up in my car and saw all these country tapes. He said I ought to go to Nashville and do an album. But I thought, ""Oh no, I don't want to go to Nashville for six months."" Because that's what it used to always take us to do an album -- six months. 
>
> But Pete said, ""What do you mean, six months? We did Nashville Skyline in two days."" Two days? I couldn't believe it.... 

This was not just the experience of The Beatles, but of many rock groups of the era. In [Levon Helm's story of The Band][helm], he recounts Rick Danko's thoughts on the nature of their group.

> Young Rick was insistent. ""Why can't we have a band,"" he asked, ""where everybody plays an instrument, everybody sings, everybody does it without some guy out in front of the thing running the show and deciding the way things are gonna go?"" This was a radical notion, like communism. But maybe, I thought, for the first time in our or anyone's imagination, the rhythm section could run the band!

This same egalitarian, collaborative spirit is present in jazz as well. As Wynton Marsalis said in his book [Moving to Higher Ground: How Jazz Can Change Your Life][marsalis]:

> Jazz is the most flexible art form ever because it believes in the good taste of individuals. It believes in our ability to make reasonable choices. It takes a chance on our decision-making skills instead of legislating our freedom away with written restrictions and restrictive hierarchies. In jazz, the size of your heart and your ability to play determine your position in the band. The philosophy of jazz is rooted in the elevation and enrichment of people, plain ol' folks.

One of my greatest lessons in leadership came when hearing and seeing Miles Davis perform at Hill Auditorium in Ann Arbor in 1970. For what I remember most clearly today is not the playing of the great jazz trumpeter himself, but the way he moved to the side of the stage between solos, restlessly pacing in the shadows, making way for this team of equals he had formed, including some of the greatest talent of that or any era -- John McLaughlin, Wayne Shorter, Chick Corea, Dave Holland, Jack DeJohnette and Airto Moreira -- to collectively form the complex and challenging music that was taking shape as we all watched and listened. 

And so as I've grown over time from individual contributor to manager, and moved from one assignment to the next, I've come to believe that my greatest contributions as a leader are to make sure that each team includes diverse voices, that each of those voices has a chance to be heard, that we avoid easy answers based on assumed consensus, and that we all recognize that our collective wisdom is greater than the smarts of any one of us on our own. 

In other words, as the boss, I try to always remember the [hard-learned lesson][trick] of [The Boss][theboss]:

> The trick in keeping bands together is always the same: ""Hey, ______, the guy standing next to you is more important than you think he is.""

In my experience, this is the trick not only to keeping teams together, but to helping them reach higher levels of performance. 

[phillips]: http://www.forbes.com/2009/06/02/diversity-collaboration-teams-leadership-managing-creativity.html
[reason]:   http://www.reasontorock.com/
[beatles]:  ../wisdom/equals.html
[ringo]:    ../wisdom/what-do-you-mean-six-months.html
[stone]:    http://www.rollingstone.com
[helm]:     ../wisdom/the-rhythm-section-could-run-the-band.html
[marsalis]: ../wisdom/the-philosophy-of-jazz.html
[trick]:    ../wisdom/the-trick-in-keeping-bands-together.html
[theboss]:  http://en.wikipedia.org/wiki/Bruce_Springsteen
"
Web	Proposal for an Alternative to Facebook	2012-06-13	9 - Closed	Web	"<p>Pretty much everyone I know, now including investors, is annoyed and disappointed with Facebook, for a whole host of reasons. </p><br><br><p>In truth, Facebook has become the Microsoft of social networking &#8212; bloated, monolithic and monopolistic to its core. </p><br><br><p>So what would it take to offer a viable alternative, to unseat FB from its throne?</p>
"	"Pretty much everyone I know, now including investors, is annoyed and disappointed with Facebook, for a whole host of reasons. 

In truth, Facebook has become the Microsoft of social networking -- bloated, monolithic and monopolistic to its core. 

So what would it take to offer a viable alternative, to unseat FB from its throne?

Google+, of course, has approached the beachhead of public enthusiasm, crashed upon the shores of our collective ennui, and finally dribbled back out to sea to join the vast ocean of other failed Google initiatives. So we know what the answer *doesn't* look like. 

So what *would* it look like?

How about this?

1. An open social networking standard -- something like HTML, RSS and Email. 

	Such a standard would allow competition and cooperation among peers, and would allow us to create a social networking web consisting of [small pieces loosely joined][smallpieces] rather than a single, monolithic, for-profit service. 

2. An unlimited number of competing apps and services that implement this standard. 

	An open standard would loosen up competition, so just as there is no limit on the number of Web browsers, the number of email clients, or the number of email services available today, we would have a multitude of apps and services to choose from.

3. A number of business models to choose from.

	We could have free, open source, and for-profit software. And we could have services run as non-profits, as for-profits based on advertising, and for-profits based on subscription models (allowing users to pay to use a service, and avoid the ads). 

4. A unique, portable identifier for each participating person or entity.

	This identifier would need to be independent of any particular service. In other words, these identifiers would be as portable as URLs or telephone numbers -- and more portable than email addresses -- allowing users to move from service to service without having to re-identify themselves. 

5. Transparent ownership of identities. 

	As with Facebook, there would need to be assurances that identifiers are not faceless handles, but that they represent people and organizations that exist in the real world, and have associated real world identities. 

6. Clear and inalienable ownership of all data by the generating entity.

	Any data posted by a person or entity would be owned by that person or entity, with copyrights controlled by the owner.  

7. Data portability.

	Part of the standard would define a data format that would allow a user to keep all of their data on a personal computing device, always and automatically kept up-to-date, so that failure of a service, or separation of a user from a service, would cause no data loss. Such a personal data store would also allow a user to move from one service to another, or one app to another, at any time, without any data loss. 

8. Personal and public groups. 

	A personal group would consist of a set of identities specified by a specific user, and visible only to that user. A public group would be open to users who want to join, on either an unrestricted or administered basis. 

9. Multiple feeds and profiles for each user. 

	Each user should be able to define multiple data feeds (professional, family, and friends, for example), and should be able to specify any new data to go to any combination of feeds. Each feed could have a tailored variant of the user's profile. Each feed could be public or private. Public feeds would be available to any interested party, with no further authorization required from the user, in a way similar to Twitter and RSS feeds today. Private feeds would be available only to identities specifically authorized by a user. In both cases, subscription lists would always be available to the user providing the data. 

10. Open and closed exchange services. 

	Of course, none of this would be any good if data were not able to pass seamlessly and quickly from one service to another, in the way that email is transported between services today. Organizations could implement closed exchange services on their private networks, in a way similar to private email networks today, but open exchanges would have to be available as well, outside of corporate firewalls. 

11. Reasonable security assurances. 

	All of these standards, services and applications should provide reasonable security assurances to users, without being onerous to providers. Users shouldn't see their private data needlessly exposed to strangers; on the other hand, this sort of social network should not be used for passwords, social security numbers, intensely private data or data whose value is dependent on its secrecy (plans for the iPhone 6, for example). The primary purpose of a policy like this is to encourage providers of all sizes to enter this space without having to worry excessively about crippling litigation. 

So, what do you think? Am I nuts? Any value to something like this? Anything worth stating at a high level that I've left out? Too ambitious? Anyone with deep pockets interested in getting something like this off the ground?

[smallpieces]: http://www.smallpieces.com/index.php
"
Apple	Adaptive Startup for the Mac	2012-07-07	9 - Closed	Apple, AppleScript, Mac, Technology	"<p>How shall I start thee? Let me count the ways&#8230;. </p><br><br><p>Apple offers multiple approaches to launching selected applications when you start up your Mac. You can specify any number of Login Items as part of the Users &amp; Groups panel within your System Preferences. And of course, when shutting down with OS X Lion (10.7), you can leave the option checked to reopen windows when logging back in, so that your Mac starts up with the same apps and windows that were last open. </p><br><br><p>For me, at least, neither of these options have been entirely satisfactory. I&#8217;m in the habit of opening apps and windows and tabs throughout the day, then shutting my Mac down at night before I go to bed; when I start it up in the morning, I want to start fresh &#8212; not facing the leftover detritus from the day before. </p><br><br><p>On most mornings, when I start my Mac, I want it to open a standard set of apps and web pages so they&#8217;re ready for me when I sit down to my desk. On the other hand, if I&#8217;m traveling with my MacBook, or taking it in to the Genius Bar for assistance, I don&#8217;t want my computer to spend five minutes opening a dozen applications before I can wrest control away from it it &#8212; in those cases, I&#8217;d like a chance to abort the normal startup sequence, and launch apps on my own. </p><br><br><p>Being dissatisfied with the other solutions available, I finally took matters into my own hands and cobbled together the following AppleScript program. While AppleScript is not for the faint of heart, neither is it only for the use of serious developers. If you&#8217;re not familiar with the language, have no fear: just fire up your AppleScript Editor application (found in your Utilities folder), then copy and paste the following code into a new window. You&#8217;ll want to customize it for your needs, but such modifications should be straightforward.</p>
"	"<p><img src=""../images/apple-script-editor.jpg"" alt=""AppleScript icon"" title="""" align=""right"" /></p>

How shall I start thee? Let me count the ways.... 

Apple offers multiple approaches to launching selected applications when you start up your Mac. You can specify any number of Login Items as part of the Users & Groups panel within your System Preferences. And of course, when shutting down with OS X Lion (10.7), you can leave the option checked to reopen windows when logging back in, so that your Mac starts up with the same apps and windows that were last open. 

For me, at least, neither of these options has been entirely satisfactory. I'm in the habit of opening apps and windows and tabs throughout the day, then shutting my Mac down at night before I go to bed; when I start it up in the morning, I want to start fresh -- not facing the leftover detritus from the day before. 

On most mornings, when I start my Mac, I want it to open a standard set of apps and web pages so they're ready for me when I sit down to my desk. On the other hand, if I'm traveling with my MacBook, or taking it in to the Genius Bar for assistance, I don't want my computer to spend five minutes opening a dozen applications before I can wrest control away from it it -- in those cases, I'd like a chance to abort the normal startup sequence, and launch apps on my own. 

Being dissatisfied with the other solutions available, I finally took matters into my own hands and cobbled together the following [AppleScript][] program. While AppleScript is not for the faint of heart, neither is it only for the use of serious developers. If you're not familiar with the language, have no fear: just fire up your AppleScript Editor application (found in your Utilities folder), then copy and paste the following code into a new window. You'll want to customize it for your needs, but such modifications should be straightforward.

You can download the entire script from [this location][].

So without further preamble, let me walk you through the code, explaining what it does and how to modify it along the way.  (Note that the downloaded script also contains comments to explain the operation of the program; I won't repeat those here, since I'll be offering a fuller explanation as I go.)

One of the features of this script is that it writes a log file to your desktop explaining exactly what it did during its execution. We'll store the log file in the user's Desktop folder, with the name ""Adaptive Startup Log.txt"". 

So, to start with, let's specify a few global variables that will be used for the logging operation.

    global logFilePath
    global logFile
    global lf
    set lf to (ASCII character 10) as string
    set logFilePath to (path to desktop as string) & ""Adaptive Startup Log.txt"" as string

Now let's delete the log file, if it already exists in your Desktop folder. 

    tell application ""System Events""
      set logExists to exists file ""Adaptive Startup Log.txt"" of desktop folder
    end tell
    if logExists then
      set logFileAlias to logFilePath as alias
      tell application ""Finder"" to delete logFileAlias
    end if

Let's open the log file so that we can write to it throughout the script.

    set logFile to open for access logFilePath with write permission

Ensure that this script is frontmost before we try to engage the user. 

    activate

Now let's give the user a chance to abort the script without doing anything else. We'll start with a verbal announcement, then pop up a dialog box. We'll give the user 30 seconds to respond to the dialog box, by either giving the OK to proceed, asking for more Choices, or telling us to Cancel. If we haven't heard anything in 30 seconds, then we'll assume the user has stepped away and wants us to proceed.  

    say ""Startup sequence about to begin""
    set go to true
    try
      display dialog ""Startup sequence about to begin"" buttons {""Cancel"", ""Choices"", ""OK""} default button ""OK"" giving up after 30
      set selectedButton to button returned of the result
      if selectedButton = ""OK"" or selectedButton = ""Choices"" or gave up of the result = true then
        set go to true
      else
        set go to false
      end if
    on error errStr
      if the errStr contains ""User canceled"" then
        set go to false
      else
        set go to true
      end if
    end try

If the user has asked us to proceed, then see if they want a list of choices about which apps to launch. 

    set choice to ""My Usual Apps""
    if go then
      if selectedButton = ""Choices"" then
        choose from list {""My Usual Apps"", ""My Writing Apps""}
        if result is false then
          set go to false
        else
          set choices to result
          set choice to item 1 of choices
        end if
      end if
    end if

If we got the permission to go forward with the launch sequence, either explicitly or implicitly, then we'll proceed with the bulk of the script. 

    if go then

Now let's write the first line to the log file, indicating the date and time at which we're starting the script. Note that we're using a subroutine called ""writeLogLine"" that will be defined later. 

      set eof of logFile to 0
      writeLogLine(""Adaptive Startup launching at "" & (current date))
      writeLogLine("" "")

As part of my normal daily startup, I like to perform a little automated maintenance. I've got several backup folders that get new files added to them on a regular basis. Here's where I toss out the old ones, keeping only the latest five backups, so that they don't accumulate into some hellish mess. Modify to meet your needs, or delete this section altogether if you have no need for it. 

      set the homeFolder to path to home folder as string
      set the backupsFolder to the homeFolder & ""Backups:""

      set the pruneFolder to the backupsFolder & ""Bento Backups:""
      set the pruneAlias to the pruneFolder as alias
      deleteOldFilesFromFolder(pruneAlias, false, 5)

      set the pruneFolder to the backupsFolder & ""iWisdom Backups:""
      set the pruneAlias to the pruneFolder as alias
      deleteOldFilesFromFolder(pruneAlias, true, 5)

      set the pruneFolder to the backupsFolder & ""Moneydance Backups:""
      set the pruneAlias to the pruneFolder as alias
      deleteOldFilesFromFolder(pruneAlias, true, 5)

      set the pruneFolder to the backupsFolder & ""OmniFocus Backups:""
      set the pruneAlias to the pruneFolder as alias
      deleteOldFilesFromFolder(pruneAlias, true, 20)

      set the pruneFolder to the backupsFolder & ""Two Due Backups:""
      set the pruneAlias to the pruneFolder as alias
      deleteOldFilesFromFolder(pruneAlias, true, 5)

      set the pruneFolder to the backupsFolder & ""UMSeattle Backups:""
      set the pruneAlias to the pruneFolder as alias
      deleteOldFilesFromFolder(pruneAlias, true, 5)

      set the pruneFolder to the backupsFolder & ""URL Union Backups:""
      set the pruneAlias to the pruneFolder as alias
      deleteOldFilesFromFolder(pruneAlias, true, 5)

      writeLogLine("" "")

Here's another maintenance task I like to start my day with: empty out the Downloads folder, and take out the Trash. Again, modify or delete altogether, in accordance with your preferences. 

      set myDownloadFolder to (path to downloads folder)
      tell application ""Finder""
        delete items of myDownloadFolder
        empty trash
      end tell
      writeLogLine(""Downloads folder thrown in the trash"")
      writeLogLine(""Trash emptied"")
      writeLogLine("" "")

Now let's log the choice the user made earlier about which set of apps to launch. 

      writeLogLine(""Launching "" & choice)

Now let's launch our first application, using a subroutine called ""launchApp"". In addition to specifying the name of the application, we'll pass a true/false indication of whether we want the app to be hidden after it is launched (to avoid cluttering up our screen with too many visible apps). 

Note that any apps identified at this point will be launched irregardless of what set the user chose. 

      launchApp(""LaunchBar"", false)

Now let's check and see whether we have an Internet connection. If not, then we'll skip opening apps dependent on access to the 'Net. Otherwise, once we've got the apps open, we'll open a few Web pages we like to view first thing in the morning. 

      set internet_status to 1 
      try
        do shell script ""curl --connect-timeout 5 http://www.amazon.com""
      on error
        set internet_status to 0 
      end try

      if (internet_status = 1) then
        writeLogLine(""Internet is available"")
      else
        writeLogLine(""Internet is not available"")
      end if

Now we're going to check for the presence of an external drive (modify the name of the drive to match your setup). If the drive is present, then we'll assume that we're in our normal home configuration, and launch apps accordingly. If the drive is missing, then we'll assume we're mobile.

      set extdrives to 0
      set file_server_status to 0
      tell application ""Finder""
        if ""HB HD Spring Clone"" exists then
          set extdrives to 1
        end if
      end tell

If external drives are present, then launch apps dependent on them, and mount our home network file server. 

      if (extdrives = 1) then
        writeLogLine(""External drives are available"")
        launchApp(""ChronoSync"", false)
        tell application ""Finder""
          try
            mount volume ""afp://10.0.1.1"" as user name ""Herb Bowie"" with password ""password""
            set file_server_status to 1
          on error
            set file_server_status to 0
          end try
        end tell

If our file server mounted successfully, then we can launch any apps dependent on files only found there. 

        if (file_server_status = 1) then
          writeLogLine(""Mounted Home Media Drive"")
          launchApp(""Moneydance"", true)
        end if
      else
        writeLogLine(""External drives are not available"")
      end if
      writeLogLine("" "")

Now launch our favorite apps and Web pages, depending on the set chosen earlier, and on the other conditions detected. Note that we're using [PowerTunes][] from Fat Cat Software, rather than launching iTunes directly, so that we can specify which library we want it to use. 

      if choice = ""My Usual Apps"" then
        if (extdrives = 1) then
          launchApp(""ChronoSync"", true)
        end if

        launchApp(""PowerTunes"", true)
        tell application ""PowerTunes""
          open library ""iTunes""
        end tell
        launchApp(""iCal"", true)
        launchApp(""OmniFocus"", true)
        launchApp(""BBEdit"", true)
        launchApp(""TextMate"", true)
        launchApp(""Two Due"", false)

        -- Now launch apps dependent on the Internet
        if (internet_status = 1) then
          launchApp(""Mail"", true)
          launchApp(""Safari"", false)
          launchApp(""App Store"", true)
          launchApp(""MacUpdate Desktop"", true)
          launchApp(""URL Union"", true)

          open location ""http://my.yahoo.com""
          open location ""http://facebook.com""
          open location ""http://www.swackett.com/app/""
        end if

We're going to launch NetBeans with a separate try block, since it's a hefty Java app that typically doesn't launch quickly enough to be reported as successful by the activate routine. 

        try
          tell application ""NetBeans 7.1.2""
            activate
          end tell
        end try

        delay 10

        tell application ""Finder""
          set visible of process ""NetBeans"" to false
        end tell
        writeLogLine(""Application "" & ""NetBeans"" & "" launched and hidden"")

I've got a folder called ""Active Projects"" inside my home folder, and I put an alias there to anything I'm currently working on, so that it will open automatically at startup. 

        set the projects_folder to path to home folder as string
        set the projects_folder to the projects_folder & ""Active Projects:""
        set the projects_folder to the projects_folder as alias

        set the apps_folder to path to applications folder as string
        set omni_outliner to the apps_folder & ""OmniOutliner Professional.app""
        set omni_outliner to the omni_outliner as alias

        tell application ""System Events"" to get every disk item of the projects_folder whose visible is true
        set projects_files to result
        repeat with projects_file in projects_files
          tell application ""System Events"" to get name extension of projects_file
          if result is ""oo3"" then
            tell application ""Finder""
              open projects_file using omni_outliner
            end tell
          else
            tell application ""Finder""
              open projects_file
            end tell
          end if
          tell application ""System Events"" to get displayed name of projects_file
          writeLogLine(""Opened file "" & result)
        end repeat
      end if

Here's a separate routine for launching a more manageable set of apps geared to a particular purpose. 

      if choice = ""My Writing Apps"" then
        launchApp(""TextMate"", false)
        launchApp(""Dictionary"", false)
        launchApp(""Two Due"", false)
      end if

OK, let's wrap things up. We'll finish by opening the log file in whatever our default text editor happens to be, which signals that we're done, and presents us with a nice neat record of what we've done. 

      writeLogLine("" "")
      writeLogLine(""Adaptive Startup finishing at "" & (current date))

      close access logFile
      tell application ""Finder""
        open logFilePath
      end tell
    else
      close access logFile
    end if

Aforementioned subroutines follow. 

    on launchApp(appName, hide)
      try
        activate application ((path to applications folder as text) & appName & "".app"")
        -- Let's pause for a few seconds, to give our app a chance to launch before we try to hide it
        delay 5

        if hide then
          tell application ""Finder""
            set visible of process appName to false
          end tell
          writeLogLine(""Application "" & appName & "" launched and hidden"")
        else
          writeLogLine(""Application "" & appName & "" launched"")
        end if
      on error
        writeLogLine(""Application "" & appName & "" could not be launched"")
      end try
    end launchApp

    on deleteOldFilesFromFolder(pth, sortByDate, filesToKeep)
      writeLogLine(""Reviewing files in "" & (pth))
      tell application ""Finder""
        activate
        set filelist to files in pth
        if sortByDate then
          set filelist1 to (sort filelist by modification date)
        else
          set filelist1 to the reverse of (sort filelist by name)
        end if
      end tell
      set fileCount to 0
      repeat with oneFile in filelist1
        tell application ""System Events"" to get displayed name of oneFile
        set oneFileName to result
        tell application ""System Events"" to get modification date of oneFile
        set modDate to result
        set fileCount to fileCount + 1
        if fileCount ‚â§ filesToKeep then
          -- writeLogLine(""Keeping "" & modDate & "" "" & oneFileName)
        else
          writeLogLine(""Deleting "" & modDate & "" "" & oneFileName)
          tell application ""Finder"" to delete oneFile
        end if
      end repeat
    end deleteOldFilesFromFolder

    on writeLogLine(logLine)
      write logLine & lf to logFile
    end writeLogLine

There you have it! A fairly complete startup script that you can tailor to your liking, and a nice little tour of AppleScript capabilities along the way!

Once you've tweaked this for your situation and preferences, save it somewhere as a script and run it from within the Editor to test it out. When it's working to your satisfaction, save it as an application within your Applications folder, then add it to your list of login items in System Preferences. 

Other AppleScript resources:

* [Introduction to AppleScript Overview](https://developer.apple.com/library/mac/#documentation/AppleScript/Conceptual/AppleScriptX/AppleScriptX.html)

* [AppleScript 1-2-3](http://www.amazon.com/gp/product/0321149319/ref=as_li_qf_sp_asin_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=0321149319&linkCode=as2&tag=reasontorock-20)

* [MacScripter.net](http://macscripter.net/)

[AppleScript]:   http://en.wikipedia.org/wiki/AppleScript
[PowerTunes]:    http://www.fatcatsoftware.com/powertunes/
[this location]: ../files/adaptive-startup.applescript
"
AppleScript	Adaptive Startup for the Mac	2012-07-07	9 - Closed	Apple, AppleScript, Mac, Technology	"<p>How shall I start thee? Let me count the ways&#8230;. </p><br><br><p>Apple offers multiple approaches to launching selected applications when you start up your Mac. You can specify any number of Login Items as part of the Users &amp; Groups panel within your System Preferences. And of course, when shutting down with OS X Lion (10.7), you can leave the option checked to reopen windows when logging back in, so that your Mac starts up with the same apps and windows that were last open. </p><br><br><p>For me, at least, neither of these options have been entirely satisfactory. I&#8217;m in the habit of opening apps and windows and tabs throughout the day, then shutting my Mac down at night before I go to bed; when I start it up in the morning, I want to start fresh &#8212; not facing the leftover detritus from the day before. </p><br><br><p>On most mornings, when I start my Mac, I want it to open a standard set of apps and web pages so they&#8217;re ready for me when I sit down to my desk. On the other hand, if I&#8217;m traveling with my MacBook, or taking it in to the Genius Bar for assistance, I don&#8217;t want my computer to spend five minutes opening a dozen applications before I can wrest control away from it it &#8212; in those cases, I&#8217;d like a chance to abort the normal startup sequence, and launch apps on my own. </p><br><br><p>Being dissatisfied with the other solutions available, I finally took matters into my own hands and cobbled together the following AppleScript program. While AppleScript is not for the faint of heart, neither is it only for the use of serious developers. If you&#8217;re not familiar with the language, have no fear: just fire up your AppleScript Editor application (found in your Utilities folder), then copy and paste the following code into a new window. You&#8217;ll want to customize it for your needs, but such modifications should be straightforward.</p>
"	"<p><img src=""../images/apple-script-editor.jpg"" alt=""AppleScript icon"" title="""" align=""right"" /></p>

How shall I start thee? Let me count the ways.... 

Apple offers multiple approaches to launching selected applications when you start up your Mac. You can specify any number of Login Items as part of the Users & Groups panel within your System Preferences. And of course, when shutting down with OS X Lion (10.7), you can leave the option checked to reopen windows when logging back in, so that your Mac starts up with the same apps and windows that were last open. 

For me, at least, neither of these options has been entirely satisfactory. I'm in the habit of opening apps and windows and tabs throughout the day, then shutting my Mac down at night before I go to bed; when I start it up in the morning, I want to start fresh -- not facing the leftover detritus from the day before. 

On most mornings, when I start my Mac, I want it to open a standard set of apps and web pages so they're ready for me when I sit down to my desk. On the other hand, if I'm traveling with my MacBook, or taking it in to the Genius Bar for assistance, I don't want my computer to spend five minutes opening a dozen applications before I can wrest control away from it it -- in those cases, I'd like a chance to abort the normal startup sequence, and launch apps on my own. 

Being dissatisfied with the other solutions available, I finally took matters into my own hands and cobbled together the following [AppleScript][] program. While AppleScript is not for the faint of heart, neither is it only for the use of serious developers. If you're not familiar with the language, have no fear: just fire up your AppleScript Editor application (found in your Utilities folder), then copy and paste the following code into a new window. You'll want to customize it for your needs, but such modifications should be straightforward.

You can download the entire script from [this location][].

So without further preamble, let me walk you through the code, explaining what it does and how to modify it along the way.  (Note that the downloaded script also contains comments to explain the operation of the program; I won't repeat those here, since I'll be offering a fuller explanation as I go.)

One of the features of this script is that it writes a log file to your desktop explaining exactly what it did during its execution. We'll store the log file in the user's Desktop folder, with the name ""Adaptive Startup Log.txt"". 

So, to start with, let's specify a few global variables that will be used for the logging operation.

    global logFilePath
    global logFile
    global lf
    set lf to (ASCII character 10) as string
    set logFilePath to (path to desktop as string) & ""Adaptive Startup Log.txt"" as string

Now let's delete the log file, if it already exists in your Desktop folder. 

    tell application ""System Events""
      set logExists to exists file ""Adaptive Startup Log.txt"" of desktop folder
    end tell
    if logExists then
      set logFileAlias to logFilePath as alias
      tell application ""Finder"" to delete logFileAlias
    end if

Let's open the log file so that we can write to it throughout the script.

    set logFile to open for access logFilePath with write permission

Ensure that this script is frontmost before we try to engage the user. 

    activate

Now let's give the user a chance to abort the script without doing anything else. We'll start with a verbal announcement, then pop up a dialog box. We'll give the user 30 seconds to respond to the dialog box, by either giving the OK to proceed, asking for more Choices, or telling us to Cancel. If we haven't heard anything in 30 seconds, then we'll assume the user has stepped away and wants us to proceed.  

    say ""Startup sequence about to begin""
    set go to true
    try
      display dialog ""Startup sequence about to begin"" buttons {""Cancel"", ""Choices"", ""OK""} default button ""OK"" giving up after 30
      set selectedButton to button returned of the result
      if selectedButton = ""OK"" or selectedButton = ""Choices"" or gave up of the result = true then
        set go to true
      else
        set go to false
      end if
    on error errStr
      if the errStr contains ""User canceled"" then
        set go to false
      else
        set go to true
      end if
    end try

If the user has asked us to proceed, then see if they want a list of choices about which apps to launch. 

    set choice to ""My Usual Apps""
    if go then
      if selectedButton = ""Choices"" then
        choose from list {""My Usual Apps"", ""My Writing Apps""}
        if result is false then
          set go to false
        else
          set choices to result
          set choice to item 1 of choices
        end if
      end if
    end if

If we got the permission to go forward with the launch sequence, either explicitly or implicitly, then we'll proceed with the bulk of the script. 

    if go then

Now let's write the first line to the log file, indicating the date and time at which we're starting the script. Note that we're using a subroutine called ""writeLogLine"" that will be defined later. 

      set eof of logFile to 0
      writeLogLine(""Adaptive Startup launching at "" & (current date))
      writeLogLine("" "")

As part of my normal daily startup, I like to perform a little automated maintenance. I've got several backup folders that get new files added to them on a regular basis. Here's where I toss out the old ones, keeping only the latest five backups, so that they don't accumulate into some hellish mess. Modify to meet your needs, or delete this section altogether if you have no need for it. 

      set the homeFolder to path to home folder as string
      set the backupsFolder to the homeFolder & ""Backups:""

      set the pruneFolder to the backupsFolder & ""Bento Backups:""
      set the pruneAlias to the pruneFolder as alias
      deleteOldFilesFromFolder(pruneAlias, false, 5)

      set the pruneFolder to the backupsFolder & ""iWisdom Backups:""
      set the pruneAlias to the pruneFolder as alias
      deleteOldFilesFromFolder(pruneAlias, true, 5)

      set the pruneFolder to the backupsFolder & ""Moneydance Backups:""
      set the pruneAlias to the pruneFolder as alias
      deleteOldFilesFromFolder(pruneAlias, true, 5)

      set the pruneFolder to the backupsFolder & ""OmniFocus Backups:""
      set the pruneAlias to the pruneFolder as alias
      deleteOldFilesFromFolder(pruneAlias, true, 20)

      set the pruneFolder to the backupsFolder & ""Two Due Backups:""
      set the pruneAlias to the pruneFolder as alias
      deleteOldFilesFromFolder(pruneAlias, true, 5)

      set the pruneFolder to the backupsFolder & ""UMSeattle Backups:""
      set the pruneAlias to the pruneFolder as alias
      deleteOldFilesFromFolder(pruneAlias, true, 5)

      set the pruneFolder to the backupsFolder & ""URL Union Backups:""
      set the pruneAlias to the pruneFolder as alias
      deleteOldFilesFromFolder(pruneAlias, true, 5)

      writeLogLine("" "")

Here's another maintenance task I like to start my day with: empty out the Downloads folder, and take out the Trash. Again, modify or delete altogether, in accordance with your preferences. 

      set myDownloadFolder to (path to downloads folder)
      tell application ""Finder""
        delete items of myDownloadFolder
        empty trash
      end tell
      writeLogLine(""Downloads folder thrown in the trash"")
      writeLogLine(""Trash emptied"")
      writeLogLine("" "")

Now let's log the choice the user made earlier about which set of apps to launch. 

      writeLogLine(""Launching "" & choice)

Now let's launch our first application, using a subroutine called ""launchApp"". In addition to specifying the name of the application, we'll pass a true/false indication of whether we want the app to be hidden after it is launched (to avoid cluttering up our screen with too many visible apps). 

Note that any apps identified at this point will be launched irregardless of what set the user chose. 

      launchApp(""LaunchBar"", false)

Now let's check and see whether we have an Internet connection. If not, then we'll skip opening apps dependent on access to the 'Net. Otherwise, once we've got the apps open, we'll open a few Web pages we like to view first thing in the morning. 

      set internet_status to 1 
      try
        do shell script ""curl --connect-timeout 5 http://www.amazon.com""
      on error
        set internet_status to 0 
      end try

      if (internet_status = 1) then
        writeLogLine(""Internet is available"")
      else
        writeLogLine(""Internet is not available"")
      end if

Now we're going to check for the presence of an external drive (modify the name of the drive to match your setup). If the drive is present, then we'll assume that we're in our normal home configuration, and launch apps accordingly. If the drive is missing, then we'll assume we're mobile.

      set extdrives to 0
      set file_server_status to 0
      tell application ""Finder""
        if ""HB HD Spring Clone"" exists then
          set extdrives to 1
        end if
      end tell

If external drives are present, then launch apps dependent on them, and mount our home network file server. 

      if (extdrives = 1) then
        writeLogLine(""External drives are available"")
        launchApp(""ChronoSync"", false)
        tell application ""Finder""
          try
            mount volume ""afp://10.0.1.1"" as user name ""Herb Bowie"" with password ""password""
            set file_server_status to 1
          on error
            set file_server_status to 0
          end try
        end tell

If our file server mounted successfully, then we can launch any apps dependent on files only found there. 

        if (file_server_status = 1) then
          writeLogLine(""Mounted Home Media Drive"")
          launchApp(""Moneydance"", true)
        end if
      else
        writeLogLine(""External drives are not available"")
      end if
      writeLogLine("" "")

Now launch our favorite apps and Web pages, depending on the set chosen earlier, and on the other conditions detected. Note that we're using [PowerTunes][] from Fat Cat Software, rather than launching iTunes directly, so that we can specify which library we want it to use. 

      if choice = ""My Usual Apps"" then
        if (extdrives = 1) then
          launchApp(""ChronoSync"", true)
        end if

        launchApp(""PowerTunes"", true)
        tell application ""PowerTunes""
          open library ""iTunes""
        end tell
        launchApp(""iCal"", true)
        launchApp(""OmniFocus"", true)
        launchApp(""BBEdit"", true)
        launchApp(""TextMate"", true)
        launchApp(""Two Due"", false)

        -- Now launch apps dependent on the Internet
        if (internet_status = 1) then
          launchApp(""Mail"", true)
          launchApp(""Safari"", false)
          launchApp(""App Store"", true)
          launchApp(""MacUpdate Desktop"", true)
          launchApp(""URL Union"", true)

          open location ""http://my.yahoo.com""
          open location ""http://facebook.com""
          open location ""http://www.swackett.com/app/""
        end if

We're going to launch NetBeans with a separate try block, since it's a hefty Java app that typically doesn't launch quickly enough to be reported as successful by the activate routine. 

        try
          tell application ""NetBeans 7.1.2""
            activate
          end tell
        end try

        delay 10

        tell application ""Finder""
          set visible of process ""NetBeans"" to false
        end tell
        writeLogLine(""Application "" & ""NetBeans"" & "" launched and hidden"")

I've got a folder called ""Active Projects"" inside my home folder, and I put an alias there to anything I'm currently working on, so that it will open automatically at startup. 

        set the projects_folder to path to home folder as string
        set the projects_folder to the projects_folder & ""Active Projects:""
        set the projects_folder to the projects_folder as alias

        set the apps_folder to path to applications folder as string
        set omni_outliner to the apps_folder & ""OmniOutliner Professional.app""
        set omni_outliner to the omni_outliner as alias

        tell application ""System Events"" to get every disk item of the projects_folder whose visible is true
        set projects_files to result
        repeat with projects_file in projects_files
          tell application ""System Events"" to get name extension of projects_file
          if result is ""oo3"" then
            tell application ""Finder""
              open projects_file using omni_outliner
            end tell
          else
            tell application ""Finder""
              open projects_file
            end tell
          end if
          tell application ""System Events"" to get displayed name of projects_file
          writeLogLine(""Opened file "" & result)
        end repeat
      end if

Here's a separate routine for launching a more manageable set of apps geared to a particular purpose. 

      if choice = ""My Writing Apps"" then
        launchApp(""TextMate"", false)
        launchApp(""Dictionary"", false)
        launchApp(""Two Due"", false)
      end if

OK, let's wrap things up. We'll finish by opening the log file in whatever our default text editor happens to be, which signals that we're done, and presents us with a nice neat record of what we've done. 

      writeLogLine("" "")
      writeLogLine(""Adaptive Startup finishing at "" & (current date))

      close access logFile
      tell application ""Finder""
        open logFilePath
      end tell
    else
      close access logFile
    end if

Aforementioned subroutines follow. 

    on launchApp(appName, hide)
      try
        activate application ((path to applications folder as text) & appName & "".app"")
        -- Let's pause for a few seconds, to give our app a chance to launch before we try to hide it
        delay 5

        if hide then
          tell application ""Finder""
            set visible of process appName to false
          end tell
          writeLogLine(""Application "" & appName & "" launched and hidden"")
        else
          writeLogLine(""Application "" & appName & "" launched"")
        end if
      on error
        writeLogLine(""Application "" & appName & "" could not be launched"")
      end try
    end launchApp

    on deleteOldFilesFromFolder(pth, sortByDate, filesToKeep)
      writeLogLine(""Reviewing files in "" & (pth))
      tell application ""Finder""
        activate
        set filelist to files in pth
        if sortByDate then
          set filelist1 to (sort filelist by modification date)
        else
          set filelist1 to the reverse of (sort filelist by name)
        end if
      end tell
      set fileCount to 0
      repeat with oneFile in filelist1
        tell application ""System Events"" to get displayed name of oneFile
        set oneFileName to result
        tell application ""System Events"" to get modification date of oneFile
        set modDate to result
        set fileCount to fileCount + 1
        if fileCount ‚â§ filesToKeep then
          -- writeLogLine(""Keeping "" & modDate & "" "" & oneFileName)
        else
          writeLogLine(""Deleting "" & modDate & "" "" & oneFileName)
          tell application ""Finder"" to delete oneFile
        end if
      end repeat
    end deleteOldFilesFromFolder

    on writeLogLine(logLine)
      write logLine & lf to logFile
    end writeLogLine

There you have it! A fairly complete startup script that you can tailor to your liking, and a nice little tour of AppleScript capabilities along the way!

Once you've tweaked this for your situation and preferences, save it somewhere as a script and run it from within the Editor to test it out. When it's working to your satisfaction, save it as an application within your Applications folder, then add it to your list of login items in System Preferences. 

Other AppleScript resources:

* [Introduction to AppleScript Overview](https://developer.apple.com/library/mac/#documentation/AppleScript/Conceptual/AppleScriptX/AppleScriptX.html)

* [AppleScript 1-2-3](http://www.amazon.com/gp/product/0321149319/ref=as_li_qf_sp_asin_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=0321149319&linkCode=as2&tag=reasontorock-20)

* [MacScripter.net](http://macscripter.net/)

[AppleScript]:   http://en.wikipedia.org/wiki/AppleScript
[PowerTunes]:    http://www.fatcatsoftware.com/powertunes/
[this location]: ../files/adaptive-startup.applescript
"
Mac	Adaptive Startup for the Mac	2012-07-07	9 - Closed	Apple, AppleScript, Mac, Technology	"<p>How shall I start thee? Let me count the ways&#8230;. </p><br><br><p>Apple offers multiple approaches to launching selected applications when you start up your Mac. You can specify any number of Login Items as part of the Users &amp; Groups panel within your System Preferences. And of course, when shutting down with OS X Lion (10.7), you can leave the option checked to reopen windows when logging back in, so that your Mac starts up with the same apps and windows that were last open. </p><br><br><p>For me, at least, neither of these options have been entirely satisfactory. I&#8217;m in the habit of opening apps and windows and tabs throughout the day, then shutting my Mac down at night before I go to bed; when I start it up in the morning, I want to start fresh &#8212; not facing the leftover detritus from the day before. </p><br><br><p>On most mornings, when I start my Mac, I want it to open a standard set of apps and web pages so they&#8217;re ready for me when I sit down to my desk. On the other hand, if I&#8217;m traveling with my MacBook, or taking it in to the Genius Bar for assistance, I don&#8217;t want my computer to spend five minutes opening a dozen applications before I can wrest control away from it it &#8212; in those cases, I&#8217;d like a chance to abort the normal startup sequence, and launch apps on my own. </p><br><br><p>Being dissatisfied with the other solutions available, I finally took matters into my own hands and cobbled together the following AppleScript program. While AppleScript is not for the faint of heart, neither is it only for the use of serious developers. If you&#8217;re not familiar with the language, have no fear: just fire up your AppleScript Editor application (found in your Utilities folder), then copy and paste the following code into a new window. You&#8217;ll want to customize it for your needs, but such modifications should be straightforward.</p>
"	"<p><img src=""../images/apple-script-editor.jpg"" alt=""AppleScript icon"" title="""" align=""right"" /></p>

How shall I start thee? Let me count the ways.... 

Apple offers multiple approaches to launching selected applications when you start up your Mac. You can specify any number of Login Items as part of the Users & Groups panel within your System Preferences. And of course, when shutting down with OS X Lion (10.7), you can leave the option checked to reopen windows when logging back in, so that your Mac starts up with the same apps and windows that were last open. 

For me, at least, neither of these options has been entirely satisfactory. I'm in the habit of opening apps and windows and tabs throughout the day, then shutting my Mac down at night before I go to bed; when I start it up in the morning, I want to start fresh -- not facing the leftover detritus from the day before. 

On most mornings, when I start my Mac, I want it to open a standard set of apps and web pages so they're ready for me when I sit down to my desk. On the other hand, if I'm traveling with my MacBook, or taking it in to the Genius Bar for assistance, I don't want my computer to spend five minutes opening a dozen applications before I can wrest control away from it it -- in those cases, I'd like a chance to abort the normal startup sequence, and launch apps on my own. 

Being dissatisfied with the other solutions available, I finally took matters into my own hands and cobbled together the following [AppleScript][] program. While AppleScript is not for the faint of heart, neither is it only for the use of serious developers. If you're not familiar with the language, have no fear: just fire up your AppleScript Editor application (found in your Utilities folder), then copy and paste the following code into a new window. You'll want to customize it for your needs, but such modifications should be straightforward.

You can download the entire script from [this location][].

So without further preamble, let me walk you through the code, explaining what it does and how to modify it along the way.  (Note that the downloaded script also contains comments to explain the operation of the program; I won't repeat those here, since I'll be offering a fuller explanation as I go.)

One of the features of this script is that it writes a log file to your desktop explaining exactly what it did during its execution. We'll store the log file in the user's Desktop folder, with the name ""Adaptive Startup Log.txt"". 

So, to start with, let's specify a few global variables that will be used for the logging operation.

    global logFilePath
    global logFile
    global lf
    set lf to (ASCII character 10) as string
    set logFilePath to (path to desktop as string) & ""Adaptive Startup Log.txt"" as string

Now let's delete the log file, if it already exists in your Desktop folder. 

    tell application ""System Events""
      set logExists to exists file ""Adaptive Startup Log.txt"" of desktop folder
    end tell
    if logExists then
      set logFileAlias to logFilePath as alias
      tell application ""Finder"" to delete logFileAlias
    end if

Let's open the log file so that we can write to it throughout the script.

    set logFile to open for access logFilePath with write permission

Ensure that this script is frontmost before we try to engage the user. 

    activate

Now let's give the user a chance to abort the script without doing anything else. We'll start with a verbal announcement, then pop up a dialog box. We'll give the user 30 seconds to respond to the dialog box, by either giving the OK to proceed, asking for more Choices, or telling us to Cancel. If we haven't heard anything in 30 seconds, then we'll assume the user has stepped away and wants us to proceed.  

    say ""Startup sequence about to begin""
    set go to true
    try
      display dialog ""Startup sequence about to begin"" buttons {""Cancel"", ""Choices"", ""OK""} default button ""OK"" giving up after 30
      set selectedButton to button returned of the result
      if selectedButton = ""OK"" or selectedButton = ""Choices"" or gave up of the result = true then
        set go to true
      else
        set go to false
      end if
    on error errStr
      if the errStr contains ""User canceled"" then
        set go to false
      else
        set go to true
      end if
    end try

If the user has asked us to proceed, then see if they want a list of choices about which apps to launch. 

    set choice to ""My Usual Apps""
    if go then
      if selectedButton = ""Choices"" then
        choose from list {""My Usual Apps"", ""My Writing Apps""}
        if result is false then
          set go to false
        else
          set choices to result
          set choice to item 1 of choices
        end if
      end if
    end if

If we got the permission to go forward with the launch sequence, either explicitly or implicitly, then we'll proceed with the bulk of the script. 

    if go then

Now let's write the first line to the log file, indicating the date and time at which we're starting the script. Note that we're using a subroutine called ""writeLogLine"" that will be defined later. 

      set eof of logFile to 0
      writeLogLine(""Adaptive Startup launching at "" & (current date))
      writeLogLine("" "")

As part of my normal daily startup, I like to perform a little automated maintenance. I've got several backup folders that get new files added to them on a regular basis. Here's where I toss out the old ones, keeping only the latest five backups, so that they don't accumulate into some hellish mess. Modify to meet your needs, or delete this section altogether if you have no need for it. 

      set the homeFolder to path to home folder as string
      set the backupsFolder to the homeFolder & ""Backups:""

      set the pruneFolder to the backupsFolder & ""Bento Backups:""
      set the pruneAlias to the pruneFolder as alias
      deleteOldFilesFromFolder(pruneAlias, false, 5)

      set the pruneFolder to the backupsFolder & ""iWisdom Backups:""
      set the pruneAlias to the pruneFolder as alias
      deleteOldFilesFromFolder(pruneAlias, true, 5)

      set the pruneFolder to the backupsFolder & ""Moneydance Backups:""
      set the pruneAlias to the pruneFolder as alias
      deleteOldFilesFromFolder(pruneAlias, true, 5)

      set the pruneFolder to the backupsFolder & ""OmniFocus Backups:""
      set the pruneAlias to the pruneFolder as alias
      deleteOldFilesFromFolder(pruneAlias, true, 20)

      set the pruneFolder to the backupsFolder & ""Two Due Backups:""
      set the pruneAlias to the pruneFolder as alias
      deleteOldFilesFromFolder(pruneAlias, true, 5)

      set the pruneFolder to the backupsFolder & ""UMSeattle Backups:""
      set the pruneAlias to the pruneFolder as alias
      deleteOldFilesFromFolder(pruneAlias, true, 5)

      set the pruneFolder to the backupsFolder & ""URL Union Backups:""
      set the pruneAlias to the pruneFolder as alias
      deleteOldFilesFromFolder(pruneAlias, true, 5)

      writeLogLine("" "")

Here's another maintenance task I like to start my day with: empty out the Downloads folder, and take out the Trash. Again, modify or delete altogether, in accordance with your preferences. 

      set myDownloadFolder to (path to downloads folder)
      tell application ""Finder""
        delete items of myDownloadFolder
        empty trash
      end tell
      writeLogLine(""Downloads folder thrown in the trash"")
      writeLogLine(""Trash emptied"")
      writeLogLine("" "")

Now let's log the choice the user made earlier about which set of apps to launch. 

      writeLogLine(""Launching "" & choice)

Now let's launch our first application, using a subroutine called ""launchApp"". In addition to specifying the name of the application, we'll pass a true/false indication of whether we want the app to be hidden after it is launched (to avoid cluttering up our screen with too many visible apps). 

Note that any apps identified at this point will be launched irregardless of what set the user chose. 

      launchApp(""LaunchBar"", false)

Now let's check and see whether we have an Internet connection. If not, then we'll skip opening apps dependent on access to the 'Net. Otherwise, once we've got the apps open, we'll open a few Web pages we like to view first thing in the morning. 

      set internet_status to 1 
      try
        do shell script ""curl --connect-timeout 5 http://www.amazon.com""
      on error
        set internet_status to 0 
      end try

      if (internet_status = 1) then
        writeLogLine(""Internet is available"")
      else
        writeLogLine(""Internet is not available"")
      end if

Now we're going to check for the presence of an external drive (modify the name of the drive to match your setup). If the drive is present, then we'll assume that we're in our normal home configuration, and launch apps accordingly. If the drive is missing, then we'll assume we're mobile.

      set extdrives to 0
      set file_server_status to 0
      tell application ""Finder""
        if ""HB HD Spring Clone"" exists then
          set extdrives to 1
        end if
      end tell

If external drives are present, then launch apps dependent on them, and mount our home network file server. 

      if (extdrives = 1) then
        writeLogLine(""External drives are available"")
        launchApp(""ChronoSync"", false)
        tell application ""Finder""
          try
            mount volume ""afp://10.0.1.1"" as user name ""Herb Bowie"" with password ""password""
            set file_server_status to 1
          on error
            set file_server_status to 0
          end try
        end tell

If our file server mounted successfully, then we can launch any apps dependent on files only found there. 

        if (file_server_status = 1) then
          writeLogLine(""Mounted Home Media Drive"")
          launchApp(""Moneydance"", true)
        end if
      else
        writeLogLine(""External drives are not available"")
      end if
      writeLogLine("" "")

Now launch our favorite apps and Web pages, depending on the set chosen earlier, and on the other conditions detected. Note that we're using [PowerTunes][] from Fat Cat Software, rather than launching iTunes directly, so that we can specify which library we want it to use. 

      if choice = ""My Usual Apps"" then
        if (extdrives = 1) then
          launchApp(""ChronoSync"", true)
        end if

        launchApp(""PowerTunes"", true)
        tell application ""PowerTunes""
          open library ""iTunes""
        end tell
        launchApp(""iCal"", true)
        launchApp(""OmniFocus"", true)
        launchApp(""BBEdit"", true)
        launchApp(""TextMate"", true)
        launchApp(""Two Due"", false)

        -- Now launch apps dependent on the Internet
        if (internet_status = 1) then
          launchApp(""Mail"", true)
          launchApp(""Safari"", false)
          launchApp(""App Store"", true)
          launchApp(""MacUpdate Desktop"", true)
          launchApp(""URL Union"", true)

          open location ""http://my.yahoo.com""
          open location ""http://facebook.com""
          open location ""http://www.swackett.com/app/""
        end if

We're going to launch NetBeans with a separate try block, since it's a hefty Java app that typically doesn't launch quickly enough to be reported as successful by the activate routine. 

        try
          tell application ""NetBeans 7.1.2""
            activate
          end tell
        end try

        delay 10

        tell application ""Finder""
          set visible of process ""NetBeans"" to false
        end tell
        writeLogLine(""Application "" & ""NetBeans"" & "" launched and hidden"")

I've got a folder called ""Active Projects"" inside my home folder, and I put an alias there to anything I'm currently working on, so that it will open automatically at startup. 

        set the projects_folder to path to home folder as string
        set the projects_folder to the projects_folder & ""Active Projects:""
        set the projects_folder to the projects_folder as alias

        set the apps_folder to path to applications folder as string
        set omni_outliner to the apps_folder & ""OmniOutliner Professional.app""
        set omni_outliner to the omni_outliner as alias

        tell application ""System Events"" to get every disk item of the projects_folder whose visible is true
        set projects_files to result
        repeat with projects_file in projects_files
          tell application ""System Events"" to get name extension of projects_file
          if result is ""oo3"" then
            tell application ""Finder""
              open projects_file using omni_outliner
            end tell
          else
            tell application ""Finder""
              open projects_file
            end tell
          end if
          tell application ""System Events"" to get displayed name of projects_file
          writeLogLine(""Opened file "" & result)
        end repeat
      end if

Here's a separate routine for launching a more manageable set of apps geared to a particular purpose. 

      if choice = ""My Writing Apps"" then
        launchApp(""TextMate"", false)
        launchApp(""Dictionary"", false)
        launchApp(""Two Due"", false)
      end if

OK, let's wrap things up. We'll finish by opening the log file in whatever our default text editor happens to be, which signals that we're done, and presents us with a nice neat record of what we've done. 

      writeLogLine("" "")
      writeLogLine(""Adaptive Startup finishing at "" & (current date))

      close access logFile
      tell application ""Finder""
        open logFilePath
      end tell
    else
      close access logFile
    end if

Aforementioned subroutines follow. 

    on launchApp(appName, hide)
      try
        activate application ((path to applications folder as text) & appName & "".app"")
        -- Let's pause for a few seconds, to give our app a chance to launch before we try to hide it
        delay 5

        if hide then
          tell application ""Finder""
            set visible of process appName to false
          end tell
          writeLogLine(""Application "" & appName & "" launched and hidden"")
        else
          writeLogLine(""Application "" & appName & "" launched"")
        end if
      on error
        writeLogLine(""Application "" & appName & "" could not be launched"")
      end try
    end launchApp

    on deleteOldFilesFromFolder(pth, sortByDate, filesToKeep)
      writeLogLine(""Reviewing files in "" & (pth))
      tell application ""Finder""
        activate
        set filelist to files in pth
        if sortByDate then
          set filelist1 to (sort filelist by modification date)
        else
          set filelist1 to the reverse of (sort filelist by name)
        end if
      end tell
      set fileCount to 0
      repeat with oneFile in filelist1
        tell application ""System Events"" to get displayed name of oneFile
        set oneFileName to result
        tell application ""System Events"" to get modification date of oneFile
        set modDate to result
        set fileCount to fileCount + 1
        if fileCount ‚â§ filesToKeep then
          -- writeLogLine(""Keeping "" & modDate & "" "" & oneFileName)
        else
          writeLogLine(""Deleting "" & modDate & "" "" & oneFileName)
          tell application ""Finder"" to delete oneFile
        end if
      end repeat
    end deleteOldFilesFromFolder

    on writeLogLine(logLine)
      write logLine & lf to logFile
    end writeLogLine

There you have it! A fairly complete startup script that you can tailor to your liking, and a nice little tour of AppleScript capabilities along the way!

Once you've tweaked this for your situation and preferences, save it somewhere as a script and run it from within the Editor to test it out. When it's working to your satisfaction, save it as an application within your Applications folder, then add it to your list of login items in System Preferences. 

Other AppleScript resources:

* [Introduction to AppleScript Overview](https://developer.apple.com/library/mac/#documentation/AppleScript/Conceptual/AppleScriptX/AppleScriptX.html)

* [AppleScript 1-2-3](http://www.amazon.com/gp/product/0321149319/ref=as_li_qf_sp_asin_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=0321149319&linkCode=as2&tag=reasontorock-20)

* [MacScripter.net](http://macscripter.net/)

[AppleScript]:   http://en.wikipedia.org/wiki/AppleScript
[PowerTunes]:    http://www.fatcatsoftware.com/powertunes/
[this location]: ../files/adaptive-startup.applescript
"
Technology	Adaptive Startup for the Mac	2012-07-07	9 - Closed	Apple, AppleScript, Mac, Technology	"<p>How shall I start thee? Let me count the ways&#8230;. </p><br><br><p>Apple offers multiple approaches to launching selected applications when you start up your Mac. You can specify any number of Login Items as part of the Users &amp; Groups panel within your System Preferences. And of course, when shutting down with OS X Lion (10.7), you can leave the option checked to reopen windows when logging back in, so that your Mac starts up with the same apps and windows that were last open. </p><br><br><p>For me, at least, neither of these options have been entirely satisfactory. I&#8217;m in the habit of opening apps and windows and tabs throughout the day, then shutting my Mac down at night before I go to bed; when I start it up in the morning, I want to start fresh &#8212; not facing the leftover detritus from the day before. </p><br><br><p>On most mornings, when I start my Mac, I want it to open a standard set of apps and web pages so they&#8217;re ready for me when I sit down to my desk. On the other hand, if I&#8217;m traveling with my MacBook, or taking it in to the Genius Bar for assistance, I don&#8217;t want my computer to spend five minutes opening a dozen applications before I can wrest control away from it it &#8212; in those cases, I&#8217;d like a chance to abort the normal startup sequence, and launch apps on my own. </p><br><br><p>Being dissatisfied with the other solutions available, I finally took matters into my own hands and cobbled together the following AppleScript program. While AppleScript is not for the faint of heart, neither is it only for the use of serious developers. If you&#8217;re not familiar with the language, have no fear: just fire up your AppleScript Editor application (found in your Utilities folder), then copy and paste the following code into a new window. You&#8217;ll want to customize it for your needs, but such modifications should be straightforward.</p>
"	"<p><img src=""../images/apple-script-editor.jpg"" alt=""AppleScript icon"" title="""" align=""right"" /></p>

How shall I start thee? Let me count the ways.... 

Apple offers multiple approaches to launching selected applications when you start up your Mac. You can specify any number of Login Items as part of the Users & Groups panel within your System Preferences. And of course, when shutting down with OS X Lion (10.7), you can leave the option checked to reopen windows when logging back in, so that your Mac starts up with the same apps and windows that were last open. 

For me, at least, neither of these options has been entirely satisfactory. I'm in the habit of opening apps and windows and tabs throughout the day, then shutting my Mac down at night before I go to bed; when I start it up in the morning, I want to start fresh -- not facing the leftover detritus from the day before. 

On most mornings, when I start my Mac, I want it to open a standard set of apps and web pages so they're ready for me when I sit down to my desk. On the other hand, if I'm traveling with my MacBook, or taking it in to the Genius Bar for assistance, I don't want my computer to spend five minutes opening a dozen applications before I can wrest control away from it it -- in those cases, I'd like a chance to abort the normal startup sequence, and launch apps on my own. 

Being dissatisfied with the other solutions available, I finally took matters into my own hands and cobbled together the following [AppleScript][] program. While AppleScript is not for the faint of heart, neither is it only for the use of serious developers. If you're not familiar with the language, have no fear: just fire up your AppleScript Editor application (found in your Utilities folder), then copy and paste the following code into a new window. You'll want to customize it for your needs, but such modifications should be straightforward.

You can download the entire script from [this location][].

So without further preamble, let me walk you through the code, explaining what it does and how to modify it along the way.  (Note that the downloaded script also contains comments to explain the operation of the program; I won't repeat those here, since I'll be offering a fuller explanation as I go.)

One of the features of this script is that it writes a log file to your desktop explaining exactly what it did during its execution. We'll store the log file in the user's Desktop folder, with the name ""Adaptive Startup Log.txt"". 

So, to start with, let's specify a few global variables that will be used for the logging operation.

    global logFilePath
    global logFile
    global lf
    set lf to (ASCII character 10) as string
    set logFilePath to (path to desktop as string) & ""Adaptive Startup Log.txt"" as string

Now let's delete the log file, if it already exists in your Desktop folder. 

    tell application ""System Events""
      set logExists to exists file ""Adaptive Startup Log.txt"" of desktop folder
    end tell
    if logExists then
      set logFileAlias to logFilePath as alias
      tell application ""Finder"" to delete logFileAlias
    end if

Let's open the log file so that we can write to it throughout the script.

    set logFile to open for access logFilePath with write permission

Ensure that this script is frontmost before we try to engage the user. 

    activate

Now let's give the user a chance to abort the script without doing anything else. We'll start with a verbal announcement, then pop up a dialog box. We'll give the user 30 seconds to respond to the dialog box, by either giving the OK to proceed, asking for more Choices, or telling us to Cancel. If we haven't heard anything in 30 seconds, then we'll assume the user has stepped away and wants us to proceed.  

    say ""Startup sequence about to begin""
    set go to true
    try
      display dialog ""Startup sequence about to begin"" buttons {""Cancel"", ""Choices"", ""OK""} default button ""OK"" giving up after 30
      set selectedButton to button returned of the result
      if selectedButton = ""OK"" or selectedButton = ""Choices"" or gave up of the result = true then
        set go to true
      else
        set go to false
      end if
    on error errStr
      if the errStr contains ""User canceled"" then
        set go to false
      else
        set go to true
      end if
    end try

If the user has asked us to proceed, then see if they want a list of choices about which apps to launch. 

    set choice to ""My Usual Apps""
    if go then
      if selectedButton = ""Choices"" then
        choose from list {""My Usual Apps"", ""My Writing Apps""}
        if result is false then
          set go to false
        else
          set choices to result
          set choice to item 1 of choices
        end if
      end if
    end if

If we got the permission to go forward with the launch sequence, either explicitly or implicitly, then we'll proceed with the bulk of the script. 

    if go then

Now let's write the first line to the log file, indicating the date and time at which we're starting the script. Note that we're using a subroutine called ""writeLogLine"" that will be defined later. 

      set eof of logFile to 0
      writeLogLine(""Adaptive Startup launching at "" & (current date))
      writeLogLine("" "")

As part of my normal daily startup, I like to perform a little automated maintenance. I've got several backup folders that get new files added to them on a regular basis. Here's where I toss out the old ones, keeping only the latest five backups, so that they don't accumulate into some hellish mess. Modify to meet your needs, or delete this section altogether if you have no need for it. 

      set the homeFolder to path to home folder as string
      set the backupsFolder to the homeFolder & ""Backups:""

      set the pruneFolder to the backupsFolder & ""Bento Backups:""
      set the pruneAlias to the pruneFolder as alias
      deleteOldFilesFromFolder(pruneAlias, false, 5)

      set the pruneFolder to the backupsFolder & ""iWisdom Backups:""
      set the pruneAlias to the pruneFolder as alias
      deleteOldFilesFromFolder(pruneAlias, true, 5)

      set the pruneFolder to the backupsFolder & ""Moneydance Backups:""
      set the pruneAlias to the pruneFolder as alias
      deleteOldFilesFromFolder(pruneAlias, true, 5)

      set the pruneFolder to the backupsFolder & ""OmniFocus Backups:""
      set the pruneAlias to the pruneFolder as alias
      deleteOldFilesFromFolder(pruneAlias, true, 20)

      set the pruneFolder to the backupsFolder & ""Two Due Backups:""
      set the pruneAlias to the pruneFolder as alias
      deleteOldFilesFromFolder(pruneAlias, true, 5)

      set the pruneFolder to the backupsFolder & ""UMSeattle Backups:""
      set the pruneAlias to the pruneFolder as alias
      deleteOldFilesFromFolder(pruneAlias, true, 5)

      set the pruneFolder to the backupsFolder & ""URL Union Backups:""
      set the pruneAlias to the pruneFolder as alias
      deleteOldFilesFromFolder(pruneAlias, true, 5)

      writeLogLine("" "")

Here's another maintenance task I like to start my day with: empty out the Downloads folder, and take out the Trash. Again, modify or delete altogether, in accordance with your preferences. 

      set myDownloadFolder to (path to downloads folder)
      tell application ""Finder""
        delete items of myDownloadFolder
        empty trash
      end tell
      writeLogLine(""Downloads folder thrown in the trash"")
      writeLogLine(""Trash emptied"")
      writeLogLine("" "")

Now let's log the choice the user made earlier about which set of apps to launch. 

      writeLogLine(""Launching "" & choice)

Now let's launch our first application, using a subroutine called ""launchApp"". In addition to specifying the name of the application, we'll pass a true/false indication of whether we want the app to be hidden after it is launched (to avoid cluttering up our screen with too many visible apps). 

Note that any apps identified at this point will be launched irregardless of what set the user chose. 

      launchApp(""LaunchBar"", false)

Now let's check and see whether we have an Internet connection. If not, then we'll skip opening apps dependent on access to the 'Net. Otherwise, once we've got the apps open, we'll open a few Web pages we like to view first thing in the morning. 

      set internet_status to 1 
      try
        do shell script ""curl --connect-timeout 5 http://www.amazon.com""
      on error
        set internet_status to 0 
      end try

      if (internet_status = 1) then
        writeLogLine(""Internet is available"")
      else
        writeLogLine(""Internet is not available"")
      end if

Now we're going to check for the presence of an external drive (modify the name of the drive to match your setup). If the drive is present, then we'll assume that we're in our normal home configuration, and launch apps accordingly. If the drive is missing, then we'll assume we're mobile.

      set extdrives to 0
      set file_server_status to 0
      tell application ""Finder""
        if ""HB HD Spring Clone"" exists then
          set extdrives to 1
        end if
      end tell

If external drives are present, then launch apps dependent on them, and mount our home network file server. 

      if (extdrives = 1) then
        writeLogLine(""External drives are available"")
        launchApp(""ChronoSync"", false)
        tell application ""Finder""
          try
            mount volume ""afp://10.0.1.1"" as user name ""Herb Bowie"" with password ""password""
            set file_server_status to 1
          on error
            set file_server_status to 0
          end try
        end tell

If our file server mounted successfully, then we can launch any apps dependent on files only found there. 

        if (file_server_status = 1) then
          writeLogLine(""Mounted Home Media Drive"")
          launchApp(""Moneydance"", true)
        end if
      else
        writeLogLine(""External drives are not available"")
      end if
      writeLogLine("" "")

Now launch our favorite apps and Web pages, depending on the set chosen earlier, and on the other conditions detected. Note that we're using [PowerTunes][] from Fat Cat Software, rather than launching iTunes directly, so that we can specify which library we want it to use. 

      if choice = ""My Usual Apps"" then
        if (extdrives = 1) then
          launchApp(""ChronoSync"", true)
        end if

        launchApp(""PowerTunes"", true)
        tell application ""PowerTunes""
          open library ""iTunes""
        end tell
        launchApp(""iCal"", true)
        launchApp(""OmniFocus"", true)
        launchApp(""BBEdit"", true)
        launchApp(""TextMate"", true)
        launchApp(""Two Due"", false)

        -- Now launch apps dependent on the Internet
        if (internet_status = 1) then
          launchApp(""Mail"", true)
          launchApp(""Safari"", false)
          launchApp(""App Store"", true)
          launchApp(""MacUpdate Desktop"", true)
          launchApp(""URL Union"", true)

          open location ""http://my.yahoo.com""
          open location ""http://facebook.com""
          open location ""http://www.swackett.com/app/""
        end if

We're going to launch NetBeans with a separate try block, since it's a hefty Java app that typically doesn't launch quickly enough to be reported as successful by the activate routine. 

        try
          tell application ""NetBeans 7.1.2""
            activate
          end tell
        end try

        delay 10

        tell application ""Finder""
          set visible of process ""NetBeans"" to false
        end tell
        writeLogLine(""Application "" & ""NetBeans"" & "" launched and hidden"")

I've got a folder called ""Active Projects"" inside my home folder, and I put an alias there to anything I'm currently working on, so that it will open automatically at startup. 

        set the projects_folder to path to home folder as string
        set the projects_folder to the projects_folder & ""Active Projects:""
        set the projects_folder to the projects_folder as alias

        set the apps_folder to path to applications folder as string
        set omni_outliner to the apps_folder & ""OmniOutliner Professional.app""
        set omni_outliner to the omni_outliner as alias

        tell application ""System Events"" to get every disk item of the projects_folder whose visible is true
        set projects_files to result
        repeat with projects_file in projects_files
          tell application ""System Events"" to get name extension of projects_file
          if result is ""oo3"" then
            tell application ""Finder""
              open projects_file using omni_outliner
            end tell
          else
            tell application ""Finder""
              open projects_file
            end tell
          end if
          tell application ""System Events"" to get displayed name of projects_file
          writeLogLine(""Opened file "" & result)
        end repeat
      end if

Here's a separate routine for launching a more manageable set of apps geared to a particular purpose. 

      if choice = ""My Writing Apps"" then
        launchApp(""TextMate"", false)
        launchApp(""Dictionary"", false)
        launchApp(""Two Due"", false)
      end if

OK, let's wrap things up. We'll finish by opening the log file in whatever our default text editor happens to be, which signals that we're done, and presents us with a nice neat record of what we've done. 

      writeLogLine("" "")
      writeLogLine(""Adaptive Startup finishing at "" & (current date))

      close access logFile
      tell application ""Finder""
        open logFilePath
      end tell
    else
      close access logFile
    end if

Aforementioned subroutines follow. 

    on launchApp(appName, hide)
      try
        activate application ((path to applications folder as text) & appName & "".app"")
        -- Let's pause for a few seconds, to give our app a chance to launch before we try to hide it
        delay 5

        if hide then
          tell application ""Finder""
            set visible of process appName to false
          end tell
          writeLogLine(""Application "" & appName & "" launched and hidden"")
        else
          writeLogLine(""Application "" & appName & "" launched"")
        end if
      on error
        writeLogLine(""Application "" & appName & "" could not be launched"")
      end try
    end launchApp

    on deleteOldFilesFromFolder(pth, sortByDate, filesToKeep)
      writeLogLine(""Reviewing files in "" & (pth))
      tell application ""Finder""
        activate
        set filelist to files in pth
        if sortByDate then
          set filelist1 to (sort filelist by modification date)
        else
          set filelist1 to the reverse of (sort filelist by name)
        end if
      end tell
      set fileCount to 0
      repeat with oneFile in filelist1
        tell application ""System Events"" to get displayed name of oneFile
        set oneFileName to result
        tell application ""System Events"" to get modification date of oneFile
        set modDate to result
        set fileCount to fileCount + 1
        if fileCount ‚â§ filesToKeep then
          -- writeLogLine(""Keeping "" & modDate & "" "" & oneFileName)
        else
          writeLogLine(""Deleting "" & modDate & "" "" & oneFileName)
          tell application ""Finder"" to delete oneFile
        end if
      end repeat
    end deleteOldFilesFromFolder

    on writeLogLine(logLine)
      write logLine & lf to logFile
    end writeLogLine

There you have it! A fairly complete startup script that you can tailor to your liking, and a nice little tour of AppleScript capabilities along the way!

Once you've tweaked this for your situation and preferences, save it somewhere as a script and run it from within the Editor to test it out. When it's working to your satisfaction, save it as an application within your Applications folder, then add it to your list of login items in System Preferences. 

Other AppleScript resources:

* [Introduction to AppleScript Overview](https://developer.apple.com/library/mac/#documentation/AppleScript/Conceptual/AppleScriptX/AppleScriptX.html)

* [AppleScript 1-2-3](http://www.amazon.com/gp/product/0321149319/ref=as_li_qf_sp_asin_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=0321149319&linkCode=as2&tag=reasontorock-20)

* [MacScripter.net](http://macscripter.net/)

[AppleScript]:   http://en.wikipedia.org/wiki/AppleScript
[PowerTunes]:    http://www.fatcatsoftware.com/powertunes/
[this location]: ../files/adaptive-startup.applescript
"
Apple	Tech Titans Compete	2012-07-29	9 - Closed	Apple, Business, Technology	"<p>Industry analysts and pundits are fond of depicting the technology marketplace as full of drama and unexpected twists resulting from unfettered competition between the giants of the industry. </p><br><br><p>Witness the recent excellent <em>Vanity Fair</em> article on &#8220;Microsoft&#8217;s Lost Decade.&#8221;</p><br><br><p>It occurred to me though, while thinking about this piece, that the truth may be a bit different.</p><br><br><p>As a matter of fact, I would assert that, once a company successfully stakes out a claim in the tech marketplace, it tends to work that area repeatedly, perhaps extending the edges a bit here and there, but rarely if ever taking over a competitor&#8217;s space. </p>
"	"<div class='img-top-right' >
  <img src='http://www.pagantuna.com/images/google-vs-apple-vs-microsoft-picture.png' border='0' />
</div>

Industry analysts and pundits are fond of depicting the technology marketplace as full of drama and unexpected twists resulting from unfettered competition between the giants of the industry. 

Witness the recent excellent [*Vanity Fair* article on ""Microsoft's Lost Decade.""][vanity]

It occurred to me though, while thinking about this piece, that the truth may be a bit different.

As a matter of fact, I would assert that, once a company successfully stakes out a claim in the tech marketplace, it tends to work that area repeatedly, perhaps extending the edges a bit here and there, but rarely if ever taking over a competitor's space. 

Microsoft, after all, staked out what might be called the ""personal productivity software"" space with products like MS-DOS, Windows and its Office suite. Over time, it has extended its reach into business software that runs on Intel-based servers. And this space is where it continues to dominate and makes most of its money. And, not surprisingly, when it tries to venture very far outside of that space, it ends up with spectacular failures. 

Apple, on the other hand, laid claim early on to what I would describe as ""computers for individuals,"" with an emphasis on personal expression and enjoyment. Seen in this light, Apple's dark years can be seen, not so much as a victory of Microsoft and Dell over Apple, but as a period during which this entire space suffered from competition with personal productivity computing. 

(Our son was in grade school during this time, and I can still remember the often-successful argument that home and school computers should mimic office devices so that our little darlings would be better prepared one day to compete in the business world, with the implication that their future earnings potential would be permanently stunted if we made the lamentable mistake of crippling their learning by forcing them to use computers made by Apple.) 

Apple's recent resurgence, then, can be seen in this way: Apple figured out a way to position its ""computers for individuals"" -- tablet computers, touch screens you can carry in a pocket or on the palm of your hand, delivering glorious visuals and audio -- as items new and completely different from personal productivity devices made by its competitors. And as a result of this new generation of computers for individuals, Apple has revived and rejuvenated this entire space and, indeed, has demonstrated that it is larger than anyone had previously envisioned. And while Apple has had spectacular success lately, it has consistently failed or at best had only modest success when trying to venture outside of this arena. 

Google? Its territory can be thought of as ""all the world's information at your fingertips""; again, it has consistently dominated in this space, and failed when it's tried to enter another's territory. 

Oracle's space can be thought of as business software for running large enterprises. 

Dell's space: dirt cheap and reasonably reliable PCs for business. 

Facebook: a social network keeping friends and relatives connected with each other. 

Amazon: the world's biggest bookstore, with extensions both on the books and the store side of that claim. 

Seen through this prism, the tech arena is less interesting than the pundits would have you think. Sure, as a corporate spokesperson, Steve Ballmer is less attractive, [articulate][] and sophisticated than peers such as [Jack][] and [Ronald][], but that may not be the reason why Microsoft has failed in its efforts to compete with Apple. Instead, it may be that a company's basic DNA is based on its early success staking out a claim to a piece of the tech pie, and later efforts to encroach on a competitor's slice may be pretty much doomed to failure.   

[vanity]: http://www.vanityfair.com/business/2012/08/microsoft-lost-mojo-steve-ballmer
[jack]: http://en.wikipedia.org/wiki/Jack_(mascot)
[ronald]: http://en.wikipedia.org/wiki/Ronald_McDonald
[articulate]: http://www.asymco.com/2012/07/10/the-poetry-of-steve-ballmer/
"
Business	Tech Titans Compete	2012-07-29	9 - Closed	Apple, Business, Technology	"<p>Industry analysts and pundits are fond of depicting the technology marketplace as full of drama and unexpected twists resulting from unfettered competition between the giants of the industry. </p><br><br><p>Witness the recent excellent <em>Vanity Fair</em> article on &#8220;Microsoft&#8217;s Lost Decade.&#8221;</p><br><br><p>It occurred to me though, while thinking about this piece, that the truth may be a bit different.</p><br><br><p>As a matter of fact, I would assert that, once a company successfully stakes out a claim in the tech marketplace, it tends to work that area repeatedly, perhaps extending the edges a bit here and there, but rarely if ever taking over a competitor&#8217;s space. </p>
"	"<div class='img-top-right' >
  <img src='http://www.pagantuna.com/images/google-vs-apple-vs-microsoft-picture.png' border='0' />
</div>

Industry analysts and pundits are fond of depicting the technology marketplace as full of drama and unexpected twists resulting from unfettered competition between the giants of the industry. 

Witness the recent excellent [*Vanity Fair* article on ""Microsoft's Lost Decade.""][vanity]

It occurred to me though, while thinking about this piece, that the truth may be a bit different.

As a matter of fact, I would assert that, once a company successfully stakes out a claim in the tech marketplace, it tends to work that area repeatedly, perhaps extending the edges a bit here and there, but rarely if ever taking over a competitor's space. 

Microsoft, after all, staked out what might be called the ""personal productivity software"" space with products like MS-DOS, Windows and its Office suite. Over time, it has extended its reach into business software that runs on Intel-based servers. And this space is where it continues to dominate and makes most of its money. And, not surprisingly, when it tries to venture very far outside of that space, it ends up with spectacular failures. 

Apple, on the other hand, laid claim early on to what I would describe as ""computers for individuals,"" with an emphasis on personal expression and enjoyment. Seen in this light, Apple's dark years can be seen, not so much as a victory of Microsoft and Dell over Apple, but as a period during which this entire space suffered from competition with personal productivity computing. 

(Our son was in grade school during this time, and I can still remember the often-successful argument that home and school computers should mimic office devices so that our little darlings would be better prepared one day to compete in the business world, with the implication that their future earnings potential would be permanently stunted if we made the lamentable mistake of crippling their learning by forcing them to use computers made by Apple.) 

Apple's recent resurgence, then, can be seen in this way: Apple figured out a way to position its ""computers for individuals"" -- tablet computers, touch screens you can carry in a pocket or on the palm of your hand, delivering glorious visuals and audio -- as items new and completely different from personal productivity devices made by its competitors. And as a result of this new generation of computers for individuals, Apple has revived and rejuvenated this entire space and, indeed, has demonstrated that it is larger than anyone had previously envisioned. And while Apple has had spectacular success lately, it has consistently failed or at best had only modest success when trying to venture outside of this arena. 

Google? Its territory can be thought of as ""all the world's information at your fingertips""; again, it has consistently dominated in this space, and failed when it's tried to enter another's territory. 

Oracle's space can be thought of as business software for running large enterprises. 

Dell's space: dirt cheap and reasonably reliable PCs for business. 

Facebook: a social network keeping friends and relatives connected with each other. 

Amazon: the world's biggest bookstore, with extensions both on the books and the store side of that claim. 

Seen through this prism, the tech arena is less interesting than the pundits would have you think. Sure, as a corporate spokesperson, Steve Ballmer is less attractive, [articulate][] and sophisticated than peers such as [Jack][] and [Ronald][], but that may not be the reason why Microsoft has failed in its efforts to compete with Apple. Instead, it may be that a company's basic DNA is based on its early success staking out a claim to a piece of the tech pie, and later efforts to encroach on a competitor's slice may be pretty much doomed to failure.   

[vanity]: http://www.vanityfair.com/business/2012/08/microsoft-lost-mojo-steve-ballmer
[jack]: http://en.wikipedia.org/wiki/Jack_(mascot)
[ronald]: http://en.wikipedia.org/wiki/Ronald_McDonald
[articulate]: http://www.asymco.com/2012/07/10/the-poetry-of-steve-ballmer/
"
Technology	Tech Titans Compete	2012-07-29	9 - Closed	Apple, Business, Technology	"<p>Industry analysts and pundits are fond of depicting the technology marketplace as full of drama and unexpected twists resulting from unfettered competition between the giants of the industry. </p><br><br><p>Witness the recent excellent <em>Vanity Fair</em> article on &#8220;Microsoft&#8217;s Lost Decade.&#8221;</p><br><br><p>It occurred to me though, while thinking about this piece, that the truth may be a bit different.</p><br><br><p>As a matter of fact, I would assert that, once a company successfully stakes out a claim in the tech marketplace, it tends to work that area repeatedly, perhaps extending the edges a bit here and there, but rarely if ever taking over a competitor&#8217;s space. </p>
"	"<div class='img-top-right' >
  <img src='http://www.pagantuna.com/images/google-vs-apple-vs-microsoft-picture.png' border='0' />
</div>

Industry analysts and pundits are fond of depicting the technology marketplace as full of drama and unexpected twists resulting from unfettered competition between the giants of the industry. 

Witness the recent excellent [*Vanity Fair* article on ""Microsoft's Lost Decade.""][vanity]

It occurred to me though, while thinking about this piece, that the truth may be a bit different.

As a matter of fact, I would assert that, once a company successfully stakes out a claim in the tech marketplace, it tends to work that area repeatedly, perhaps extending the edges a bit here and there, but rarely if ever taking over a competitor's space. 

Microsoft, after all, staked out what might be called the ""personal productivity software"" space with products like MS-DOS, Windows and its Office suite. Over time, it has extended its reach into business software that runs on Intel-based servers. And this space is where it continues to dominate and makes most of its money. And, not surprisingly, when it tries to venture very far outside of that space, it ends up with spectacular failures. 

Apple, on the other hand, laid claim early on to what I would describe as ""computers for individuals,"" with an emphasis on personal expression and enjoyment. Seen in this light, Apple's dark years can be seen, not so much as a victory of Microsoft and Dell over Apple, but as a period during which this entire space suffered from competition with personal productivity computing. 

(Our son was in grade school during this time, and I can still remember the often-successful argument that home and school computers should mimic office devices so that our little darlings would be better prepared one day to compete in the business world, with the implication that their future earnings potential would be permanently stunted if we made the lamentable mistake of crippling their learning by forcing them to use computers made by Apple.) 

Apple's recent resurgence, then, can be seen in this way: Apple figured out a way to position its ""computers for individuals"" -- tablet computers, touch screens you can carry in a pocket or on the palm of your hand, delivering glorious visuals and audio -- as items new and completely different from personal productivity devices made by its competitors. And as a result of this new generation of computers for individuals, Apple has revived and rejuvenated this entire space and, indeed, has demonstrated that it is larger than anyone had previously envisioned. And while Apple has had spectacular success lately, it has consistently failed or at best had only modest success when trying to venture outside of this arena. 

Google? Its territory can be thought of as ""all the world's information at your fingertips""; again, it has consistently dominated in this space, and failed when it's tried to enter another's territory. 

Oracle's space can be thought of as business software for running large enterprises. 

Dell's space: dirt cheap and reasonably reliable PCs for business. 

Facebook: a social network keeping friends and relatives connected with each other. 

Amazon: the world's biggest bookstore, with extensions both on the books and the store side of that claim. 

Seen through this prism, the tech arena is less interesting than the pundits would have you think. Sure, as a corporate spokesperson, Steve Ballmer is less attractive, [articulate][] and sophisticated than peers such as [Jack][] and [Ronald][], but that may not be the reason why Microsoft has failed in its efforts to compete with Apple. Instead, it may be that a company's basic DNA is based on its early success staking out a claim to a piece of the tech pie, and later efforts to encroach on a competitor's slice may be pretty much doomed to failure.   

[vanity]: http://www.vanityfair.com/business/2012/08/microsoft-lost-mojo-steve-ballmer
[jack]: http://en.wikipedia.org/wiki/Jack_(mascot)
[ronald]: http://en.wikipedia.org/wiki/Ronald_McDonald
[articulate]: http://www.asymco.com/2012/07/10/the-poetry-of-steve-ballmer/
"
Apple	The Apple Checklist	2012-09-07	9 - Closed	Apple, Technology	"<p>There has been much discussion in recent years of the chief reason for Apple&#8217;s phenomenal success. Apple&#8217;s design skills, for example, are often cited as the primary discriminator between Apple and its competition. </p><br><br><p>In some ways, though, I think that long-time Apple users and fans are sometimes misled in this regard by their traditional loyalties: there is a certain tendency among us to seek vindication, and to assume that Apple is now succeeding because others are finally learning to appreciate the virtues that we had recognized long ago. </p><br><br><p>It occurred to me recently, however, that an explanation for Apple&#8217;s ability to dominate its chosen market segments may rest more on its ability to satisfy a long checklist for each of its products, rather than to simply succeed in one key area. </p><br><br><p>This product checklist might look something like the following.</p>
"	"<p><a href=""http://itunes.apple.com/us/app/checklist/id335312465?mt=8""><img class=""img-top-right"" src=""http://a2.mzstatic.com/us/r1000/106/Purple/66/a7/21/mzl.yjprjgfe.320x480-75.jpg"" alt=""CheckList App"" title=""CheckList App"" /></a></p>

There has been much discussion in recent years of the chief reason for Apple's phenomenal success. Apple's design skills, for example, are often cited as the primary discriminator between Apple and its competition. 

In some ways, though, I think that long-time Apple users and fans are sometimes misled in this regard by their traditional loyalties: there is a certain tendency among us to seek vindication, and to assume that Apple is now succeeding because others are finally learning to appreciate the virtues that we had recognized long ago. 

It occurred to me recently, however, that an explanation for Apple's ability to dominate its chosen market segments may rest more on its ability to satisfy a long checklist for each of its products, rather than to simply succeed in one key area. 

This product checklist might look something like the following.

1. A physical design that is small, simple, streamlined, sexy and sturdy. 

2. Mobility that allows the product to be easily carried and used on the go, for at least 8 hours without external power.

3. Early and imaginative adoption of the latest technology, as soon as it is available in sufficient volumes, with the necessary reliability and at reasonable cost. 

4. A simple product line with few options, offering customers a small set of easy choices. 

5. Easy setup that allows a new user to be up and running and enjoying their Apple product in a matter of minutes, with little or no prior knowledge needed. 

6. A responsive system interface with no noticeable lags or delays.

7. The highest level of overall system reliability, minimizing hardware and software failures. 

8. A user interface that is simple and intuitive on its surface, but with hidden depths available when needed for more advanced needs. 

9. Hardware and software designs that are distinctive, innovative, appealing and useful.

10. Strong system security that reliably protects consumers from the bad guys with little or no effort on the part of customers. 

11. Evolving hardware and software designs that bring significant additional features and functionality to customers on a regular and reliable basis. 

12. Regular and easily applied software upgrades that are available for at least three to five years after the original hardware purchase.

13. An application ecosystem that makes a wide variety of high-quality, inexpensive applications available to customers.

14. A content ecosystem that allows customers to purchase or rent the widest range of available content (music, e-books, movies, magazines, etc.) easily and inexpensively.

15. An overall system architecture and development environment that makes it easy for third parties to deliver high-quality products and services, and makes it difficult or impossible for them to corrupt the intended user experience in any significant way.

16. Seamless integration with other Apple products, and with other products and services that bring additional value to customers. 

17. A wide and efficient retail distribution network that makes it easy and even enjoyable for customers to learn more about and then purchase the product. 

18. A strong network of knowledgeable, friendly and easily accessible product support specialists that can help customers with the product when needed, including quick repair or replacement of defective units.

19. Prices that are at or below those of their competitors, and inexpensive enough to make impulse purchases possible. 

I would argue that, while we might individually have our favorite items on this list, it is the ability of Apple to succeed simultaneously in all these areas that enables the sort of market domination that we have seen for the iPod, the iPhone and now the iPad. So long as Apple can offer all of the above for its products, it leaves consumers with little reason to consider other options, and maximizes the challenges for its competitors. 
"
Technology	The Apple Checklist	2012-09-07	9 - Closed	Apple, Technology	"<p>There has been much discussion in recent years of the chief reason for Apple&#8217;s phenomenal success. Apple&#8217;s design skills, for example, are often cited as the primary discriminator between Apple and its competition. </p><br><br><p>In some ways, though, I think that long-time Apple users and fans are sometimes misled in this regard by their traditional loyalties: there is a certain tendency among us to seek vindication, and to assume that Apple is now succeeding because others are finally learning to appreciate the virtues that we had recognized long ago. </p><br><br><p>It occurred to me recently, however, that an explanation for Apple&#8217;s ability to dominate its chosen market segments may rest more on its ability to satisfy a long checklist for each of its products, rather than to simply succeed in one key area. </p><br><br><p>This product checklist might look something like the following.</p>
"	"<p><a href=""http://itunes.apple.com/us/app/checklist/id335312465?mt=8""><img class=""img-top-right"" src=""http://a2.mzstatic.com/us/r1000/106/Purple/66/a7/21/mzl.yjprjgfe.320x480-75.jpg"" alt=""CheckList App"" title=""CheckList App"" /></a></p>

There has been much discussion in recent years of the chief reason for Apple's phenomenal success. Apple's design skills, for example, are often cited as the primary discriminator between Apple and its competition. 

In some ways, though, I think that long-time Apple users and fans are sometimes misled in this regard by their traditional loyalties: there is a certain tendency among us to seek vindication, and to assume that Apple is now succeeding because others are finally learning to appreciate the virtues that we had recognized long ago. 

It occurred to me recently, however, that an explanation for Apple's ability to dominate its chosen market segments may rest more on its ability to satisfy a long checklist for each of its products, rather than to simply succeed in one key area. 

This product checklist might look something like the following.

1. A physical design that is small, simple, streamlined, sexy and sturdy. 

2. Mobility that allows the product to be easily carried and used on the go, for at least 8 hours without external power.

3. Early and imaginative adoption of the latest technology, as soon as it is available in sufficient volumes, with the necessary reliability and at reasonable cost. 

4. A simple product line with few options, offering customers a small set of easy choices. 

5. Easy setup that allows a new user to be up and running and enjoying their Apple product in a matter of minutes, with little or no prior knowledge needed. 

6. A responsive system interface with no noticeable lags or delays.

7. The highest level of overall system reliability, minimizing hardware and software failures. 

8. A user interface that is simple and intuitive on its surface, but with hidden depths available when needed for more advanced needs. 

9. Hardware and software designs that are distinctive, innovative, appealing and useful.

10. Strong system security that reliably protects consumers from the bad guys with little or no effort on the part of customers. 

11. Evolving hardware and software designs that bring significant additional features and functionality to customers on a regular and reliable basis. 

12. Regular and easily applied software upgrades that are available for at least three to five years after the original hardware purchase.

13. An application ecosystem that makes a wide variety of high-quality, inexpensive applications available to customers.

14. A content ecosystem that allows customers to purchase or rent the widest range of available content (music, e-books, movies, magazines, etc.) easily and inexpensively.

15. An overall system architecture and development environment that makes it easy for third parties to deliver high-quality products and services, and makes it difficult or impossible for them to corrupt the intended user experience in any significant way.

16. Seamless integration with other Apple products, and with other products and services that bring additional value to customers. 

17. A wide and efficient retail distribution network that makes it easy and even enjoyable for customers to learn more about and then purchase the product. 

18. A strong network of knowledgeable, friendly and easily accessible product support specialists that can help customers with the product when needed, including quick repair or replacement of defective units.

19. Prices that are at or below those of their competitors, and inexpensive enough to make impulse purchases possible. 

I would argue that, while we might individually have our favorite items on this list, it is the ability of Apple to succeed simultaneously in all these areas that enables the sort of market domination that we have seen for the iPod, the iPhone and now the iPad. So long as Apple can offer all of the above for its products, it leaves consumers with little reason to consider other options, and maximizes the challenges for its competitors. 
"
Metrics	EVM for Mere Mortals	2012-10-08	9 - Closed	Metrics		"*Note: This post was originally published on August 10, 2010. It was updated on Oct 7-8, 2012, to provide some additional clarity around elements that were still proving confusing to some.*

In all my years working on IT projects, I think I've observed more silliness around the topic of [Earned Value Management][evm] -- or EVM, for those in the know -- than on any other subject I can think of. 

The many varieties of dysfunction that people exhibit towards this project management tool tend to place them in one of the following categories:

* Those who have no idea what it is but are sure they don't need it;

* Those who view EVM as a necessary evil, like some sort of pagan god periodically demanding a ritual sacrifice from its followers; 

* Those who treat EVM numbers as powerful omens foreshadowing their fates, as if massaging the numbers to change the resulting stoplight colors could actually positively influence the outcomes of their projects;

* Those who rely on amulets and talismans to keep the evil EVM from their doors -- such as estimates that seem to always fall just a hair under the threshold that would trigger a hard and fast requirement for it;

* Those high priests and priestesses of EVM who use a familiarity with its mystical language and calculations as an avenging force to root out and punish the unbelievers.

In practice, I've found much of this behavior to be based on a lack of understanding about what EVM is, how it works, and what it is good for. So let me try to cast a few rays of light into the darkness that often surrounds this subject. 

The Case for EVM
----------------

The easiest way to understand the problem that EVM is trying to solve is by describing the all-too-frequently observed characteristics of an IT project without EVM. The typical scenario is that the project is reported by everyone involved to be in good shape until it nears its planned completion date, at which point it enters the dreaded ""almost done"" state, and then stays there for what seems like (and often actually is) an eternity, before being finally brought to some sort of dreary conclusion, usually through forced removal of life support. 

In other words, the problem can be stated thusly: there is a strong human predisposition to assume, with the consumption of budget and the passing of time, that actual project progress is proceeding at the same pace. Sadly, facts recorded at project completion have repeatedly failed to demonstrate this correlation. 

![The 90% Done Dilemma](../images/evm.png ""The 90% Done Dilemma"")

The Essence of EVM
------------------

Here is the best analogy I've been able to come up with to explain how EVM works. Let's say that you are flying from Los Angeles to New York in order to serve as best man at your friend's wedding. You fill up the plane's gas tank, you figure out what time you have to get there, and you take off. 

OK. You've been up in the air for an hour. The land below is skimming by at a reassuring rate. The needle on the gas tank shows that you've got plenty of gas left. Life is good, right? What could go wrong?

Well, two things, actually:

1. You could get there an hour late, thus missing the ceremony, in which case you may as well have stayed home. 

2. You could run out of gas before you get there, in which case you would plummet to a fiery death. 

Since neither of these outcomes appears desirable, you might look for some reassurance that you will avoid them both. So what additional data do you need? Two things: 

1. You need to know your speed, so you can calculate when you will arrive. 

2. You need to know your mileage, or the miles per gallon you are achieving, to know whether your fuel supply will get you to your destination. 

EVM is simply a way of calculating these two pieces of data for a project. The first is called schedule performance, and is the equivalent of speed. The second is called cost performance, and is the equivalent of mileage (since a project's budget is equivalent to a plane's fuel). 

For an airplane, of course, progress can be measured in miles traveled. For a project, progress is measured by tasks completed. And, since, unlike miles, all tasks are not of the same size, you need to factor in the size of each task as well.

Oh, and one more thing: since we lack any absolute units of measurement for project progress (no easy equivalent to miles in our analogy), our performance numbers are calculated as indices, in which we compare our actuals to our plan. So a value of 1.00 means that we are precisely on our plan. A value greater than 1 means that we are doing better than our plan. A value of less than 1 means that we are not doing as well as we had planned. 

That's pretty much the whole thing in a nutshell. 

Those Confusing Formulae
------------------------

Here is where most people run off the rails and become convinced that if they never hear of EVM again, it will be too soon. 

Feel free to skip this section if it makes your head spin. It's not all that important, unless you're the person who will actually be doing the EVM calculations. 

Here are the key terms used:

**Budgeted Cost of Work Performed (BCWP)**: The amount of work actually completed so far, measured in terms of the total budgeted (i.e., planned) cost for all tasks completed to date. This is also referred to as the *earned value*. 

**Budgeted Cost of Work Scheduled (BCWS)**: The amount of work we had planned to complete by now (measured in terms of the total budgeted costs for all of the tasks that were planned to be completed by this date).

**Actual Cost of Work Performed (ACWP)**: The amount of money we've actually spent to get us this far.

And here are the two key formulas:

**Schedule Performance Index (SPI)** = Budgeted Cost of Work Performed (BCWP) / Budgeted Cost of Work Scheduled (BCWS). *In other words, how much work we've actually done at this point, compared to how much work we had planned to get done.* Your SPI is an indication of how fast you can complete the work. In our airplane analogy above, SPI would be equivalent to groundspeed. 

**Cost Performance Index (CPI)** = Budgeted Cost of Work Performed (BCWP) / Actual Cost of Work Performed (ACWP). *In other words, how much we had planned to spend on the work we've completed, vs. how much we've actually spent.* Your CPI is an indication of how costly it is to perform the work. In our airplane analogy above, CPI would be equivalent to miles per gallon. 

One other point may be helpful: if most of your costs are in labor, and most of your labor is paid at roughly the same rate, then you can substitute hours for dollars in your calculations and still achieve essentially the same results. 

Work Breakdown and Estimating
-----------------------------

For a complex project involving many different types and sizes of activities, it is important to decompose the overall statement of work into lower-level tasks that will become the basis for your project plan. This decomposition is known as your Work Breakdown Structure (WBS). Each of these tasks can then be estimated in terms of effort, or cost, and then, based on the planned availability of your resources, these tasks can be scheduled. This then becomes your project plan, from which your budgeted costs can be derived. 

In an ideal situation, all of this work breakdown, estimating and planning will have occurred before any budget or schedule has been assigned to the project. In a less than ideal situation, the project's budget and schedule may have been derived from higher-level estimates, or even from wishful thinking. In either case, it is still important to perform the more detailed work breakdown; however then the task of estimating turns into a task of allocation: how much of the project's available budget and time is it reasonable to allocate to each task? This allocation should be done on relative estimated sizes, however it is important that all of the project's budget and schedule (and no more) be allocated to planned tasks, save possibly for some amount of prudent management reserve. 

Reasons for Variations
----------------------

It's worthwhile noting that, if your SPI and CPI numbers are not perfect, this will always be due to one or more of the following three factors. 

To help explain these causal factors, it may help to think of a bricklaying job. Let's say that you need to lay 80 bricks, and you're planning to have two bricklayers who can each lay 10 bricks an hour, and who charge $20 an hour. Therefore, you are planning for the job to be done in 4 hours, at a cost of $160. 

**Available Resources** -- If you have fewer resources than planned, then this will tend to drag down your schedule performance (SPI). Conversely, if you have more resources than planned, this will tend to improve your SPI. In other words, if only one bricklayer shows up to work, then it will take him 8 hours instead of 4, working by himself. 

Note that the number of resources you have will not affect your cost performance (CPI). In our example, having only one bricklayer will delay the job's completion, but it won't cost you any more. 

**Efficiency/Productivity** -- If your resources are less productive than planned, then this will tend to drag down both your CPI and your SPI. Conversely, if they are more productive, then this will tend to improve both. In other words, if both bricklayers show up to work, but they only lay 5 bricks an hour, the job will take 8 hours instead of 4, and will cost you $320 instead of $160. 

Note that, in EVM terms, the words ""productive"" and ""efficient,"" or their opposites, are not meant to necessarily reflect well or poorly on the value of the workers. Your CPI could be low because your workers are less productive than their peers, or because your estimates of how much work they could produce per unit of time were overly optimistic. From an EVM perspective, either of these conditions would result in a low CPI, and hence a ""low"" productivity. 

**Scope** -- Let's say that you're building a wall with your 80 bricks, and the size of the job was based on your customer's measurements of how long the wall needed to be. Now, if you show up at the customer's site, and it turns out the wall needs to be twice as long as the customer had previously indicated, then it will take 8 hours to complete the job, and will cost $320. In this case, however, neither the SPI nor the CPI were off, but instead the scope, or size, of the job doubled. This should cause you to renegotiate your contract and modify your plan accordingly. 

Reacting to EVM Variations
--------------------------

I've seen cases where any sort of variation from CPI and SPI numbers between 0.99 and 1.01 resulted in general panic and manning of the lifeboats, but more discriminating responses are generally called for. Small and short-term variations from SPI and CPI numbers of 1.00 probably need no special attention. More sizable variations should typically elicit responses along the lines indicated below, based on the particular combination of SPI and CPI variations you have. 

<dl>
<dt>CPI &gt; or = 1 and SPI &lt; 1: </dt>
<dd>Your resources are performing well, but you are not getting as many as planned: you need to make resources more available (e.g., by providing more people and/or overtime).
</dd>
<dt>CPI &gt; 1 and SPI &gt; 1: </dt>
<dd>Life is good: you can assign some resources to other tasks and still complete on time and under budget, or you can keep your current resources and finish ahead of schedule and under budget. (On the other hand, management will probably think you're padding your estimates on the next project, and so will trim them accordingly.)
</dd>
<dt>CPI &lt; 1 and SPI &lt; 1: </dt>
<dd>You are getting the resources you planned, but they are not performing as well as you had planned: you will need to de-scope or improve performance (to correct SPI &amp; CPI), or acquire additional resources (to correct SPI).
</dd>
<dt>CPI &lt; 1 and SPI &gt; 1: </dt>
<dd>You are on schedule, but only because you are applying more resources than planned. You will need to de-scope or improve performance to avoid going over budget.
</dd>
</dl>

Implementation Tips
-------------------

Here are a few simple tips for an effective EVM implementation. 

1. The work in your project should be broken down into relatively discrete tasks (roughly one to two weeks in duration). If you end up with one or more large, amorphous tasks, then you have just reproduced essentially the same problem statement that we started with, only at a slightly lower level. 

2. Each task should produce a deliverable whose completeness can be easily and objectively determined. In other words, there should not be a lot of room for debate about whether a particular task is done yet or not: otherwise you are liable to find out at the end of the project that tasks you thought were ""done"" are really still in varying states of completion. 

3. Your project team needs to take ownership of the EVM numbers and the results of the calculations. In practice, the only way I know to achieve that is to have the entire team review their EVM numbers on a weekly basis.

The Agile Controversy
---------------------

One question that often arises is whether it is valid or necessary to apply EVM to Agile projects. 

Let's think about this for a minute. In order to implement EVM we need to break our work down into discrete tasks... each task needs to have a discrete deliverable that can be readily determined to be done or not... we need to objectively track our progress against our backlog of tasks yet to be completed... we're more concerned with the quantity of work completed than which specific tasks were completed....

Hmmm.... In Agile, we break our work down into features, and features into tasks... we deliver those features on a regular basis, with short delivery cycles... the team has a ""definition of done"" for each feature... the backlog is dynamic... we regularly track features delivered vs. features still in our backlog.... 

Oh. Wait a minute. I get it. Agile *is* essentially a form of EVM for software projects. 

So the Agile vs. EVM controversy should be a non-issue, so long as the project is estimating all of the work needed for a project at some level (and not just whatever happens to fit in the current iteration). If an agile project needs to feed data into a more traditional EVM system, then that should be easy to arrange. 

If All You Have is a Hammer...
------------------------------

Not every project management issue is a nail that can be driven into place with the hammer of EVM. 

For one thing, it is no substitute for identifying your [critical path][] through your project, which will identify those tasks that must be completed on time in order for the project as a whole to be completed on time. If you are 90% done, with a perfect SPI and CPI, but you have been avoiding all the tasks on your critical path, then you may still be a year away from completing your year-long project. 

Also, EVM is meaningless unless you first have a well defined project [scope][iron triangle] and [work breakdown structure][wbs]. If you don't know your destination, or don't know the route you're going to take, then knowing your speed and mileage won't really help to get you there on time and within your budget. 


[critical path]: http://en.wikipedia.org/wiki/Critical_path_method
[evm]: http://en.wikipedia.org/wiki/Earned_value_management
[iron triangle]: http://en.wikipedia.org/wiki/Project_management_triangle
[wbs]: http://en.wikipedia.org/wiki/Work_breakdown_structure
"
Apple	Thoughts on the Microsoft Surface	2012-12-03	9 - Closed	Apple, Microsoft, Software	"<p>Microsoft aficionados have been claiming that the new Surface &#8220;has all the convenience of a tablet plus the benefits of a PC.&#8221; It occurred to me this morning that this would be a bit like Schwinn and GM announcing a partnership to produce a vehicle that has &#8220;all the convenience of a bicycle plus the benefits of an automobile &#8212;  just snap on the other two wheels and you can get some real driving done!&#8221; </p><br><br><p>The question, in both cases, is whether the engineering appropriate for one device will serve the needs of the other....  </p>
"	"Microsoft aficionados have been claiming that the new Surface ""has all the convenience of a tablet plus the benefits of a PC."" It occurred to me this morning that this would be a bit like Schwinn and GM announcing a partnership to produce a vehicle that has ""all the convenience of a bicycle plus the benefits of an automobile -- just snap on the other two wheels and you can get some real driving done!"" 

The question, in both cases, is whether the engineering appropriate for one device will serve the needs of the other. In my contrived example, the answer, rather obviously, is no -- the wheels and frame appropriate for a bicycle would be too light to serve the needs of an auto, and the frame and engine and steering mechanism of a car would be too heavy to serve the needs of a bike. But this is obvious to us only because of the physicality of the engineering involved -- we can easily picture examples of the two types of vehicles, and the idea that their parts could work together is immediately ludicrous. 

In the case of tablets and laptops, the physical engineering is not so different, and appears to be getting closer all the time. But the harder question is whether the software for one is appropriate to the other, and it is here that our inability to visualize the engineering involved makes the idea seem feasible. Yes, we are tempted to think, why not?

Apple has made a clean break between the two types of devices, opting for lighter, albeit still powerful, software to run on its tablets. Microsoft though, always eager to be different, and to drag along the twin boat anchors of Windows and Office everywhere it goes, is urging their fans to have their cake and eat it too. 

How will this work out for Surface users? Time will tell, but there is always a price to be paid for every design decision, and this morning I'm guessing that the weight of all that PC-scale software engineering will prove wearying in the long run, and that they would ultimately be happier keeping their bikes and autos separate.  
"
Microsoft	Thoughts on the Microsoft Surface	2012-12-03	9 - Closed	Apple, Microsoft, Software	"<p>Microsoft aficionados have been claiming that the new Surface &#8220;has all the convenience of a tablet plus the benefits of a PC.&#8221; It occurred to me this morning that this would be a bit like Schwinn and GM announcing a partnership to produce a vehicle that has &#8220;all the convenience of a bicycle plus the benefits of an automobile &#8212;  just snap on the other two wheels and you can get some real driving done!&#8221; </p><br><br><p>The question, in both cases, is whether the engineering appropriate for one device will serve the needs of the other....  </p>
"	"Microsoft aficionados have been claiming that the new Surface ""has all the convenience of a tablet plus the benefits of a PC."" It occurred to me this morning that this would be a bit like Schwinn and GM announcing a partnership to produce a vehicle that has ""all the convenience of a bicycle plus the benefits of an automobile -- just snap on the other two wheels and you can get some real driving done!"" 

The question, in both cases, is whether the engineering appropriate for one device will serve the needs of the other. In my contrived example, the answer, rather obviously, is no -- the wheels and frame appropriate for a bicycle would be too light to serve the needs of an auto, and the frame and engine and steering mechanism of a car would be too heavy to serve the needs of a bike. But this is obvious to us only because of the physicality of the engineering involved -- we can easily picture examples of the two types of vehicles, and the idea that their parts could work together is immediately ludicrous. 

In the case of tablets and laptops, the physical engineering is not so different, and appears to be getting closer all the time. But the harder question is whether the software for one is appropriate to the other, and it is here that our inability to visualize the engineering involved makes the idea seem feasible. Yes, we are tempted to think, why not?

Apple has made a clean break between the two types of devices, opting for lighter, albeit still powerful, software to run on its tablets. Microsoft though, always eager to be different, and to drag along the twin boat anchors of Windows and Office everywhere it goes, is urging their fans to have their cake and eat it too. 

How will this work out for Surface users? Time will tell, but there is always a price to be paid for every design decision, and this morning I'm guessing that the weight of all that PC-scale software engineering will prove wearying in the long run, and that they would ultimately be happier keeping their bikes and autos separate.  
"
Software	Thoughts on the Microsoft Surface	2012-12-03	9 - Closed	Apple, Microsoft, Software	"<p>Microsoft aficionados have been claiming that the new Surface &#8220;has all the convenience of a tablet plus the benefits of a PC.&#8221; It occurred to me this morning that this would be a bit like Schwinn and GM announcing a partnership to produce a vehicle that has &#8220;all the convenience of a bicycle plus the benefits of an automobile &#8212;  just snap on the other two wheels and you can get some real driving done!&#8221; </p><br><br><p>The question, in both cases, is whether the engineering appropriate for one device will serve the needs of the other....  </p>
"	"Microsoft aficionados have been claiming that the new Surface ""has all the convenience of a tablet plus the benefits of a PC."" It occurred to me this morning that this would be a bit like Schwinn and GM announcing a partnership to produce a vehicle that has ""all the convenience of a bicycle plus the benefits of an automobile -- just snap on the other two wheels and you can get some real driving done!"" 

The question, in both cases, is whether the engineering appropriate for one device will serve the needs of the other. In my contrived example, the answer, rather obviously, is no -- the wheels and frame appropriate for a bicycle would be too light to serve the needs of an auto, and the frame and engine and steering mechanism of a car would be too heavy to serve the needs of a bike. But this is obvious to us only because of the physicality of the engineering involved -- we can easily picture examples of the two types of vehicles, and the idea that their parts could work together is immediately ludicrous. 

In the case of tablets and laptops, the physical engineering is not so different, and appears to be getting closer all the time. But the harder question is whether the software for one is appropriate to the other, and it is here that our inability to visualize the engineering involved makes the idea seem feasible. Yes, we are tempted to think, why not?

Apple has made a clean break between the two types of devices, opting for lighter, albeit still powerful, software to run on its tablets. Microsoft though, always eager to be different, and to drag along the twin boat anchors of Windows and Office everywhere it goes, is urging their fans to have their cake and eat it too. 

How will this work out for Surface users? Time will tell, but there is always a price to be paid for every design decision, and this morning I'm guessing that the weight of all that PC-scale software engineering will prove wearying in the long run, and that they would ultimately be happier keeping their bikes and autos separate.  
"
Apple	UX and IT	2013-03-30	9 - Closed	Apple, Business, Software Development	"<p>Usability has become a top concern for corporate CIOs in recent years. A big reason for this has been the success of Apple, since the difference between the iProducts (iPod, iPhone, iPad, iMac, etc.) and their competitors is often summed up in a single word: usability. </p><br><br><p>Unfortunately, once we enter the walled garden of corporate IT, we quickly find many more weeds than flowers, in terms of the quality of the User Experience (UX) being offered. It is tempting to think that we can fix this problem simply by investing more time, energy and dollars on usability labs, UX experts and associated training for corporate developers, but in my experience a more nuanced approach is called for. </p><br><br><p>Here are my top five recommendations for those who would attempt to improve the user experience for IT applications. </p>
"	"<p><a href=""http://meta.ux.stackexchange.com/questions/1105/what-qualifies-as-a-good-question-for-ux""><img class=""img-top-right"" src=""../images/ux-and-it.jpg"" alt=""UX Graphic"" /></a></p>

Usability has become a top concern for corporate CIOs in recent years. A big reason for this has been the success of Apple, since the difference between the iProducts (iPod, iPhone, iPad, iMac, etc.) and their competitors is often summed up in a single word: usability. 

Unfortunately, once we enter the walled garden of corporate IT, we quickly find many more weeds than flowers, in terms of the quality of the User Experience (UX) being offered. It is tempting to think that we can fix this problem simply by investing more time, energy and dollars on usability labs, UX experts and associated training for corporate developers, but in my experience a more nuanced approach is called for. 

Here are my top five recommendations for those who would attempt to improve the user experience for IT applications. 

## 1. Temper Your Expectations.

The user interface (UI) for the typical corporate business application has extremely high data density. Such an app tucks away lots of data in its database, accepts lots of fields in its data entry screens, and displays lots of information in its output queries and reports. In some cases, this data can be represented elegantly via graphical displays, but in many cases, it is simple character data that needs to be input, stored, and reported back out. And the relationships between the business entities possessing these attributes tend to be complex as well. 

For applications with these sorts of characteristics, you are not going to create a simple, elegant user interface that looks like the latest best-selling iPhone app. At best, your creation is going to be a Clydesdale, not an Arabian stallion. 

The other factor at work here is the potential return on UX investments. In the consumer market, UX work can make or break a product, or even an entire company, so it is easy to justify heavy investments in such efforts. On the other hand, the major challenge for most IT shops is to keep pace with the demand for additional or modified business functionality, and the user experience tends to be the icing on the cake. 

Here's another way to look at this -- on an iPhone, Apple delivers about a dozen apps, each of which will be used by millions of people. With numbers like these, it's easy to justify a large UX investment in each app. On the other hand, the typical CIO is responsible for hundreds or even thousands of applications, some of which will have only a handful of users, or perhaps a few thousand. With numbers like these, it's much harder to justify large investments in optimizing the user experience for each app.  

To talk about UX work on corporate business systems without acknowledging these sorts of realities is to risk losing credibility in this environment. 

## 2. Choose Fertile Ground for Your Efforts.

Not all application development work is equally amenable to UX assistance. Here are a couple of factors to consider. 

### a. The Breadth of Your User Base 

If you are developing for a large external customer base, or for a diverse group of potential customers, or for all the employees of your company, then there is a good chance of your UX work yielding important insights that will prove useful to your efforts. On the other hand, if you are developing for a small group of internal users performing a specialized function, the chances of producing such benefits are smaller, since the odds are high that the needs, wants and preferences of this sort of group are already pretty well understood. 

### b. The Degree of Alignment with Well-defined Corporate Functions 

Whatever your company does, it's probably organized into a number of well-defined functions: Product Development, Accounting, Human Resources, etc. And for each of these, there are likely to be documented processes describing how these functions are to be performed. And for each set of processes, there is likely to be a corresponding set of corporate functional experts with designated responsibilities to define and improve these processes. 

If you are developing an application that is closely aligned with such a function, its set of processes, and its designated experts, then there may be little room for insightful user research and creative approaches to workflow within your application. 

On the other hand, if you are developing something like a social networking app for your enterprise, or something else that cuts across existing functions and processes, then you are likely to have a clearer field for meaningful UX work. 


## 3. Integrate Teams and Processes.

There is a temptation for UX experts to band together and set up their own tools and processes, operating like an in-house UX design shop. 

While there are definite benefits to having a separate UX team, in terms of maintaining a consistent advocacy for the discipline within the larger organization, there is also a danger that UX practices and expertise will become too far removed from the actual software development work going on. 

[Michael Lopp][0], in ""[A Design Primer for Engineers][1],"" posted at <cite>Rands in Repose</cite> on Jan 16, 2012, tells this tale of UX work at Apple. 

> Prior to Steve Jobs' return to Apple, there was a decent centralized usability team equipped with those fancy rooms with one-way mirrors and video cameras. I'm certain these folks did significant work, but when Jobs returned, he shut it down and he cast the design teams to the wind. Each product team inherited part of the former usability team. 

> Now, I arrived after this reorganization occurred, so I don't know the actual reasoning, but I do know I never saw those usability labs used once and I would argue that in the past decade Apple has created some of the most usable products out there. My opinion is that the choice to spread the usability design function across the engineering team was intended to send a clear message: engineer and designer need to party more‚Ä¶ together. 

> I can't imagine building a team responsible for consumer products where engineers and designers weren't constantly meddling in each other's business. Yes, they often argue from completely opposite sides of the brain. Yes, it is often a battle of art and science, but engineering and design want exactly the same thing. They want the intense satisfaction of knowing they successfully built something that matters.

So even if the UX experts have a different management chain, it is important that they are well integrated with the rest of the project team for any work being done. 

Having the UX practices integrated into the software development process is also important. User-Centered Design (UCD) is often held up as an inviolable process that must be followed in order to achieve any sort of rewarding user experience, but unfortunately this tends to separate the UX design process from the software development process. So I was happy to recently see some admissions from within the design community that this process may not be as sacred as it has often been portrayed. Cennydd Bowles, in <cite>A List Apart</cite>, posted on Feb 1, 2013, talked about the need for ""[Looking Beyond User-Centered Design][3]."" While Bowles points out many chinks in UCD's armor, perhaps his most damning point is the following:

> It‚Äôs unsurprising that a user-centered process can skew inexperienced designers‚Äô loyalties away from business priorities. Some claim that this serves as counterweight to the business-first leanings of other employees. The argument strikes me as infantile. When a designer adopts simplistic, reductive arguments that ignore business reality, it undermines him. It limits his potential influence. Only the well-rounded designer who can fight for what‚Äôs right while accommodating business reality will be seen as a true leader.

In my experience, UX expertise and practices are much more useful when viewed as a toolkit whose usage can be tailored and adapted and integrated into the needs of a particular project and project team, rather than as a rigid process that must always be exercised in its entirety.

## 4. Don't Insist on Absolute Design Authority.

UX folks are often fond of insisting that they must be recognized as having absolute and final authority over all aspects of ""Design"" -- that they in fact ""own"" the design. 

This is rarely a practical position to take in a corporate IT environment. You will often have a System Owner (aka Product Owner) who has played some role in getting your project funded, and with that fiduciary responsibility will come some sense of ownership of all aspects of the system, including the UI design. 

In practice, there will usually be a community of stakeholders with varied interests -- architects, developers, users, process owners, executives, and others -- and working out design issues will be a sometimes messy process that requires some discussion and give and take among all parties.   

## 5. Hey, [It's Not Rocket Surgery][krug] &#8480;

I recently found myself the beneficiary of a modern medical miracle. I was having some problems with my vision, and my regular eye doctor referred me to a specialist. I had to wait a few days to get into his office. Once I was seated in front of him, he quickly diagnosed me with a torn and partially detached retina; injected a bubble of gas into my eye; put a green band on my wrist warning others not to take me up in any sort of air vehicle, since my eyeball would explode; and sent me home with a stern admonition to lean to the right at a 45 degree angle for 24 hours, then come back into his office for the next phase of the treatment. When I went back in, after 24 hours of feeling like my eyeball was on fire, he put me into a different chair, shot lasers into my eye for what seemed like an eternity, then pronounced me healed, and sent me home to recuperate. 

Now, did I understand what had just happened to me? No. Forty-eight hours earlier, I couldn't have told you for sure that I even had a retina, let alone that it might be damaged. Did I ask how much the procedure was going to cost, or how much it would hurt? No. Since my only alternative was going blind, I really didn't care. All I know is that my vision is now fully restored with no lasting ill effects. Would I do it all again, if I found myself in the same situation? Without question. Would I recommend this guy to others with vision problems? Absolutely. 

Now, I mention all this, because UX experts are often tempted to see themselves, and portray themselves to others, in this same sort of light. ""Hi, I'm a UX specialist. I've got a Ph.D. in this stuff. What you need is a heuristic evaluation. If you don't let me give you one immediately, then no one will ever be able to figure out how to use your application, and you will forever become a figure of ridicule to your peers and your children. Don't bother asking how much it's going to cost. Just give me your corporate credit card and pray that it's not too late to save your sorry little app.""

I do not recommend this approach. It may work once or twice. But over time, a few facts will begin to dawn on the software developers and their managers. 

### a. The results you deliver are not as clear-cut as those offered by doctors. 

Vision or blindness? That's a binary distinction that is easy to make. Usable or not usable? That's a matter of degree, and of perception. So it is hard to convince others that they need your services in the same absolute, unquestioning sense that they need the services offered by doctors.

### b. There is a certain transparency about UX concerns that is utterly lacking in many medical conditions. 

When my vision specialist tells me that I've got a retine that is torn in the upper left corner of my eye, I'm going to take his word for it. He will probably want to show me a picture of my condition, thinking that he is enlightening me, or showing me something of interest. I will give it a quick glance, and nod knowingly, not having the faintest idea of what I'm looking at. Heck, it's the inside of an eyeball. I have no idea what a normal one is supposed to look like. Just fix me, doc. 

On the other hand, when I look at a user interface, the things of interest are all visible to me, and are things that I'm used to looking at. I use Google. I use Amazon. I've got an iPhone. I may not fully understand what makes them so successful, but neither are these elements entirely mysterious to me. So I am not likely to accept confusing recommendations from UX specialists with the same suspension of disbelief and unquestioning acceptance that I accord to medical specialists. 

### c. UX methods are not as reliable or mysterious as those of medical specialists. 

Whatever my eye doctor did to me, it qualifies as magic in my book. He seemed to know what he was doing, whereas I hadn't the faintest idea what he up to. He told me it would work, and it did. He used expensive equipment that I wouldn't be able to find at CostCo. End of story.  

But even though UX experts often cloak their practices in terms confusing to others in IT, once they are explained, they tend to sound an awful lot like the same things that application developers have been doing all along, just done with a heightened sensitivity to UX concerns, as opposed to straightforward delivery of raw functionality. 

The bottom line here is that, if you attempt to sell yourself in the same way that a medical specialist would, you are likely to end up looking more like the [grand and glorious wizard][wiz]  than [Dr. Christiaan Barnard](http://en.wikipedia.org/wiki/Christiaan_Barnard).

----

So there you have it: my top recommendations for plying the UX trade within the environment of corporate IT. None of this is meant to discourage this sort of work -- improved usability of corporate applications is an important goal for any business these days -- but rather to equip such practitioners with the mental models they will need in order to consistently succeed in these sorts of environments.


[0]: http://en.wikipedia.org/wiki/Michael_Lopp
[1]: http://www.randsinrepose.com/archives/2012/01/16/a_design_primer_for_engineers.html
[3]: http://alistapart.com/column/looking-beyond-user-centered-design
[krug]: http://www.sensible.com/rsme.html
[dilbert]: http://dilbert.com
[wiz]: http://en.wikipedia.org/wiki/The_Wizard_of_Oz_(1939_film)
"
Business	UX and IT	2013-03-30	9 - Closed	Apple, Business, Software Development	"<p>Usability has become a top concern for corporate CIOs in recent years. A big reason for this has been the success of Apple, since the difference between the iProducts (iPod, iPhone, iPad, iMac, etc.) and their competitors is often summed up in a single word: usability. </p><br><br><p>Unfortunately, once we enter the walled garden of corporate IT, we quickly find many more weeds than flowers, in terms of the quality of the User Experience (UX) being offered. It is tempting to think that we can fix this problem simply by investing more time, energy and dollars on usability labs, UX experts and associated training for corporate developers, but in my experience a more nuanced approach is called for. </p><br><br><p>Here are my top five recommendations for those who would attempt to improve the user experience for IT applications. </p>
"	"<p><a href=""http://meta.ux.stackexchange.com/questions/1105/what-qualifies-as-a-good-question-for-ux""><img class=""img-top-right"" src=""../images/ux-and-it.jpg"" alt=""UX Graphic"" /></a></p>

Usability has become a top concern for corporate CIOs in recent years. A big reason for this has been the success of Apple, since the difference between the iProducts (iPod, iPhone, iPad, iMac, etc.) and their competitors is often summed up in a single word: usability. 

Unfortunately, once we enter the walled garden of corporate IT, we quickly find many more weeds than flowers, in terms of the quality of the User Experience (UX) being offered. It is tempting to think that we can fix this problem simply by investing more time, energy and dollars on usability labs, UX experts and associated training for corporate developers, but in my experience a more nuanced approach is called for. 

Here are my top five recommendations for those who would attempt to improve the user experience for IT applications. 

## 1. Temper Your Expectations.

The user interface (UI) for the typical corporate business application has extremely high data density. Such an app tucks away lots of data in its database, accepts lots of fields in its data entry screens, and displays lots of information in its output queries and reports. In some cases, this data can be represented elegantly via graphical displays, but in many cases, it is simple character data that needs to be input, stored, and reported back out. And the relationships between the business entities possessing these attributes tend to be complex as well. 

For applications with these sorts of characteristics, you are not going to create a simple, elegant user interface that looks like the latest best-selling iPhone app. At best, your creation is going to be a Clydesdale, not an Arabian stallion. 

The other factor at work here is the potential return on UX investments. In the consumer market, UX work can make or break a product, or even an entire company, so it is easy to justify heavy investments in such efforts. On the other hand, the major challenge for most IT shops is to keep pace with the demand for additional or modified business functionality, and the user experience tends to be the icing on the cake. 

Here's another way to look at this -- on an iPhone, Apple delivers about a dozen apps, each of which will be used by millions of people. With numbers like these, it's easy to justify a large UX investment in each app. On the other hand, the typical CIO is responsible for hundreds or even thousands of applications, some of which will have only a handful of users, or perhaps a few thousand. With numbers like these, it's much harder to justify large investments in optimizing the user experience for each app.  

To talk about UX work on corporate business systems without acknowledging these sorts of realities is to risk losing credibility in this environment. 

## 2. Choose Fertile Ground for Your Efforts.

Not all application development work is equally amenable to UX assistance. Here are a couple of factors to consider. 

### a. The Breadth of Your User Base 

If you are developing for a large external customer base, or for a diverse group of potential customers, or for all the employees of your company, then there is a good chance of your UX work yielding important insights that will prove useful to your efforts. On the other hand, if you are developing for a small group of internal users performing a specialized function, the chances of producing such benefits are smaller, since the odds are high that the needs, wants and preferences of this sort of group are already pretty well understood. 

### b. The Degree of Alignment with Well-defined Corporate Functions 

Whatever your company does, it's probably organized into a number of well-defined functions: Product Development, Accounting, Human Resources, etc. And for each of these, there are likely to be documented processes describing how these functions are to be performed. And for each set of processes, there is likely to be a corresponding set of corporate functional experts with designated responsibilities to define and improve these processes. 

If you are developing an application that is closely aligned with such a function, its set of processes, and its designated experts, then there may be little room for insightful user research and creative approaches to workflow within your application. 

On the other hand, if you are developing something like a social networking app for your enterprise, or something else that cuts across existing functions and processes, then you are likely to have a clearer field for meaningful UX work. 


## 3. Integrate Teams and Processes.

There is a temptation for UX experts to band together and set up their own tools and processes, operating like an in-house UX design shop. 

While there are definite benefits to having a separate UX team, in terms of maintaining a consistent advocacy for the discipline within the larger organization, there is also a danger that UX practices and expertise will become too far removed from the actual software development work going on. 

[Michael Lopp][0], in ""[A Design Primer for Engineers][1],"" posted at <cite>Rands in Repose</cite> on Jan 16, 2012, tells this tale of UX work at Apple. 

> Prior to Steve Jobs' return to Apple, there was a decent centralized usability team equipped with those fancy rooms with one-way mirrors and video cameras. I'm certain these folks did significant work, but when Jobs returned, he shut it down and he cast the design teams to the wind. Each product team inherited part of the former usability team. 

> Now, I arrived after this reorganization occurred, so I don't know the actual reasoning, but I do know I never saw those usability labs used once and I would argue that in the past decade Apple has created some of the most usable products out there. My opinion is that the choice to spread the usability design function across the engineering team was intended to send a clear message: engineer and designer need to party more‚Ä¶ together. 

> I can't imagine building a team responsible for consumer products where engineers and designers weren't constantly meddling in each other's business. Yes, they often argue from completely opposite sides of the brain. Yes, it is often a battle of art and science, but engineering and design want exactly the same thing. They want the intense satisfaction of knowing they successfully built something that matters.

So even if the UX experts have a different management chain, it is important that they are well integrated with the rest of the project team for any work being done. 

Having the UX practices integrated into the software development process is also important. User-Centered Design (UCD) is often held up as an inviolable process that must be followed in order to achieve any sort of rewarding user experience, but unfortunately this tends to separate the UX design process from the software development process. So I was happy to recently see some admissions from within the design community that this process may not be as sacred as it has often been portrayed. Cennydd Bowles, in <cite>A List Apart</cite>, posted on Feb 1, 2013, talked about the need for ""[Looking Beyond User-Centered Design][3]."" While Bowles points out many chinks in UCD's armor, perhaps his most damning point is the following:

> It‚Äôs unsurprising that a user-centered process can skew inexperienced designers‚Äô loyalties away from business priorities. Some claim that this serves as counterweight to the business-first leanings of other employees. The argument strikes me as infantile. When a designer adopts simplistic, reductive arguments that ignore business reality, it undermines him. It limits his potential influence. Only the well-rounded designer who can fight for what‚Äôs right while accommodating business reality will be seen as a true leader.

In my experience, UX expertise and practices are much more useful when viewed as a toolkit whose usage can be tailored and adapted and integrated into the needs of a particular project and project team, rather than as a rigid process that must always be exercised in its entirety.

## 4. Don't Insist on Absolute Design Authority.

UX folks are often fond of insisting that they must be recognized as having absolute and final authority over all aspects of ""Design"" -- that they in fact ""own"" the design. 

This is rarely a practical position to take in a corporate IT environment. You will often have a System Owner (aka Product Owner) who has played some role in getting your project funded, and with that fiduciary responsibility will come some sense of ownership of all aspects of the system, including the UI design. 

In practice, there will usually be a community of stakeholders with varied interests -- architects, developers, users, process owners, executives, and others -- and working out design issues will be a sometimes messy process that requires some discussion and give and take among all parties.   

## 5. Hey, [It's Not Rocket Surgery][krug] &#8480;

I recently found myself the beneficiary of a modern medical miracle. I was having some problems with my vision, and my regular eye doctor referred me to a specialist. I had to wait a few days to get into his office. Once I was seated in front of him, he quickly diagnosed me with a torn and partially detached retina; injected a bubble of gas into my eye; put a green band on my wrist warning others not to take me up in any sort of air vehicle, since my eyeball would explode; and sent me home with a stern admonition to lean to the right at a 45 degree angle for 24 hours, then come back into his office for the next phase of the treatment. When I went back in, after 24 hours of feeling like my eyeball was on fire, he put me into a different chair, shot lasers into my eye for what seemed like an eternity, then pronounced me healed, and sent me home to recuperate. 

Now, did I understand what had just happened to me? No. Forty-eight hours earlier, I couldn't have told you for sure that I even had a retina, let alone that it might be damaged. Did I ask how much the procedure was going to cost, or how much it would hurt? No. Since my only alternative was going blind, I really didn't care. All I know is that my vision is now fully restored with no lasting ill effects. Would I do it all again, if I found myself in the same situation? Without question. Would I recommend this guy to others with vision problems? Absolutely. 

Now, I mention all this, because UX experts are often tempted to see themselves, and portray themselves to others, in this same sort of light. ""Hi, I'm a UX specialist. I've got a Ph.D. in this stuff. What you need is a heuristic evaluation. If you don't let me give you one immediately, then no one will ever be able to figure out how to use your application, and you will forever become a figure of ridicule to your peers and your children. Don't bother asking how much it's going to cost. Just give me your corporate credit card and pray that it's not too late to save your sorry little app.""

I do not recommend this approach. It may work once or twice. But over time, a few facts will begin to dawn on the software developers and their managers. 

### a. The results you deliver are not as clear-cut as those offered by doctors. 

Vision or blindness? That's a binary distinction that is easy to make. Usable or not usable? That's a matter of degree, and of perception. So it is hard to convince others that they need your services in the same absolute, unquestioning sense that they need the services offered by doctors.

### b. There is a certain transparency about UX concerns that is utterly lacking in many medical conditions. 

When my vision specialist tells me that I've got a retine that is torn in the upper left corner of my eye, I'm going to take his word for it. He will probably want to show me a picture of my condition, thinking that he is enlightening me, or showing me something of interest. I will give it a quick glance, and nod knowingly, not having the faintest idea of what I'm looking at. Heck, it's the inside of an eyeball. I have no idea what a normal one is supposed to look like. Just fix me, doc. 

On the other hand, when I look at a user interface, the things of interest are all visible to me, and are things that I'm used to looking at. I use Google. I use Amazon. I've got an iPhone. I may not fully understand what makes them so successful, but neither are these elements entirely mysterious to me. So I am not likely to accept confusing recommendations from UX specialists with the same suspension of disbelief and unquestioning acceptance that I accord to medical specialists. 

### c. UX methods are not as reliable or mysterious as those of medical specialists. 

Whatever my eye doctor did to me, it qualifies as magic in my book. He seemed to know what he was doing, whereas I hadn't the faintest idea what he up to. He told me it would work, and it did. He used expensive equipment that I wouldn't be able to find at CostCo. End of story.  

But even though UX experts often cloak their practices in terms confusing to others in IT, once they are explained, they tend to sound an awful lot like the same things that application developers have been doing all along, just done with a heightened sensitivity to UX concerns, as opposed to straightforward delivery of raw functionality. 

The bottom line here is that, if you attempt to sell yourself in the same way that a medical specialist would, you are likely to end up looking more like the [grand and glorious wizard][wiz]  than [Dr. Christiaan Barnard](http://en.wikipedia.org/wiki/Christiaan_Barnard).

----

So there you have it: my top recommendations for plying the UX trade within the environment of corporate IT. None of this is meant to discourage this sort of work -- improved usability of corporate applications is an important goal for any business these days -- but rather to equip such practitioners with the mental models they will need in order to consistently succeed in these sorts of environments.


[0]: http://en.wikipedia.org/wiki/Michael_Lopp
[1]: http://www.randsinrepose.com/archives/2012/01/16/a_design_primer_for_engineers.html
[3]: http://alistapart.com/column/looking-beyond-user-centered-design
[krug]: http://www.sensible.com/rsme.html
[dilbert]: http://dilbert.com
[wiz]: http://en.wikipedia.org/wiki/The_Wizard_of_Oz_(1939_film)
"
Software Development	UX and IT	2013-03-30	9 - Closed	Apple, Business, Software Development	"<p>Usability has become a top concern for corporate CIOs in recent years. A big reason for this has been the success of Apple, since the difference between the iProducts (iPod, iPhone, iPad, iMac, etc.) and their competitors is often summed up in a single word: usability. </p><br><br><p>Unfortunately, once we enter the walled garden of corporate IT, we quickly find many more weeds than flowers, in terms of the quality of the User Experience (UX) being offered. It is tempting to think that we can fix this problem simply by investing more time, energy and dollars on usability labs, UX experts and associated training for corporate developers, but in my experience a more nuanced approach is called for. </p><br><br><p>Here are my top five recommendations for those who would attempt to improve the user experience for IT applications. </p>
"	"<p><a href=""http://meta.ux.stackexchange.com/questions/1105/what-qualifies-as-a-good-question-for-ux""><img class=""img-top-right"" src=""../images/ux-and-it.jpg"" alt=""UX Graphic"" /></a></p>

Usability has become a top concern for corporate CIOs in recent years. A big reason for this has been the success of Apple, since the difference between the iProducts (iPod, iPhone, iPad, iMac, etc.) and their competitors is often summed up in a single word: usability. 

Unfortunately, once we enter the walled garden of corporate IT, we quickly find many more weeds than flowers, in terms of the quality of the User Experience (UX) being offered. It is tempting to think that we can fix this problem simply by investing more time, energy and dollars on usability labs, UX experts and associated training for corporate developers, but in my experience a more nuanced approach is called for. 

Here are my top five recommendations for those who would attempt to improve the user experience for IT applications. 

## 1. Temper Your Expectations.

The user interface (UI) for the typical corporate business application has extremely high data density. Such an app tucks away lots of data in its database, accepts lots of fields in its data entry screens, and displays lots of information in its output queries and reports. In some cases, this data can be represented elegantly via graphical displays, but in many cases, it is simple character data that needs to be input, stored, and reported back out. And the relationships between the business entities possessing these attributes tend to be complex as well. 

For applications with these sorts of characteristics, you are not going to create a simple, elegant user interface that looks like the latest best-selling iPhone app. At best, your creation is going to be a Clydesdale, not an Arabian stallion. 

The other factor at work here is the potential return on UX investments. In the consumer market, UX work can make or break a product, or even an entire company, so it is easy to justify heavy investments in such efforts. On the other hand, the major challenge for most IT shops is to keep pace with the demand for additional or modified business functionality, and the user experience tends to be the icing on the cake. 

Here's another way to look at this -- on an iPhone, Apple delivers about a dozen apps, each of which will be used by millions of people. With numbers like these, it's easy to justify a large UX investment in each app. On the other hand, the typical CIO is responsible for hundreds or even thousands of applications, some of which will have only a handful of users, or perhaps a few thousand. With numbers like these, it's much harder to justify large investments in optimizing the user experience for each app.  

To talk about UX work on corporate business systems without acknowledging these sorts of realities is to risk losing credibility in this environment. 

## 2. Choose Fertile Ground for Your Efforts.

Not all application development work is equally amenable to UX assistance. Here are a couple of factors to consider. 

### a. The Breadth of Your User Base 

If you are developing for a large external customer base, or for a diverse group of potential customers, or for all the employees of your company, then there is a good chance of your UX work yielding important insights that will prove useful to your efforts. On the other hand, if you are developing for a small group of internal users performing a specialized function, the chances of producing such benefits are smaller, since the odds are high that the needs, wants and preferences of this sort of group are already pretty well understood. 

### b. The Degree of Alignment with Well-defined Corporate Functions 

Whatever your company does, it's probably organized into a number of well-defined functions: Product Development, Accounting, Human Resources, etc. And for each of these, there are likely to be documented processes describing how these functions are to be performed. And for each set of processes, there is likely to be a corresponding set of corporate functional experts with designated responsibilities to define and improve these processes. 

If you are developing an application that is closely aligned with such a function, its set of processes, and its designated experts, then there may be little room for insightful user research and creative approaches to workflow within your application. 

On the other hand, if you are developing something like a social networking app for your enterprise, or something else that cuts across existing functions and processes, then you are likely to have a clearer field for meaningful UX work. 


## 3. Integrate Teams and Processes.

There is a temptation for UX experts to band together and set up their own tools and processes, operating like an in-house UX design shop. 

While there are definite benefits to having a separate UX team, in terms of maintaining a consistent advocacy for the discipline within the larger organization, there is also a danger that UX practices and expertise will become too far removed from the actual software development work going on. 

[Michael Lopp][0], in ""[A Design Primer for Engineers][1],"" posted at <cite>Rands in Repose</cite> on Jan 16, 2012, tells this tale of UX work at Apple. 

> Prior to Steve Jobs' return to Apple, there was a decent centralized usability team equipped with those fancy rooms with one-way mirrors and video cameras. I'm certain these folks did significant work, but when Jobs returned, he shut it down and he cast the design teams to the wind. Each product team inherited part of the former usability team. 

> Now, I arrived after this reorganization occurred, so I don't know the actual reasoning, but I do know I never saw those usability labs used once and I would argue that in the past decade Apple has created some of the most usable products out there. My opinion is that the choice to spread the usability design function across the engineering team was intended to send a clear message: engineer and designer need to party more‚Ä¶ together. 

> I can't imagine building a team responsible for consumer products where engineers and designers weren't constantly meddling in each other's business. Yes, they often argue from completely opposite sides of the brain. Yes, it is often a battle of art and science, but engineering and design want exactly the same thing. They want the intense satisfaction of knowing they successfully built something that matters.

So even if the UX experts have a different management chain, it is important that they are well integrated with the rest of the project team for any work being done. 

Having the UX practices integrated into the software development process is also important. User-Centered Design (UCD) is often held up as an inviolable process that must be followed in order to achieve any sort of rewarding user experience, but unfortunately this tends to separate the UX design process from the software development process. So I was happy to recently see some admissions from within the design community that this process may not be as sacred as it has often been portrayed. Cennydd Bowles, in <cite>A List Apart</cite>, posted on Feb 1, 2013, talked about the need for ""[Looking Beyond User-Centered Design][3]."" While Bowles points out many chinks in UCD's armor, perhaps his most damning point is the following:

> It‚Äôs unsurprising that a user-centered process can skew inexperienced designers‚Äô loyalties away from business priorities. Some claim that this serves as counterweight to the business-first leanings of other employees. The argument strikes me as infantile. When a designer adopts simplistic, reductive arguments that ignore business reality, it undermines him. It limits his potential influence. Only the well-rounded designer who can fight for what‚Äôs right while accommodating business reality will be seen as a true leader.

In my experience, UX expertise and practices are much more useful when viewed as a toolkit whose usage can be tailored and adapted and integrated into the needs of a particular project and project team, rather than as a rigid process that must always be exercised in its entirety.

## 4. Don't Insist on Absolute Design Authority.

UX folks are often fond of insisting that they must be recognized as having absolute and final authority over all aspects of ""Design"" -- that they in fact ""own"" the design. 

This is rarely a practical position to take in a corporate IT environment. You will often have a System Owner (aka Product Owner) who has played some role in getting your project funded, and with that fiduciary responsibility will come some sense of ownership of all aspects of the system, including the UI design. 

In practice, there will usually be a community of stakeholders with varied interests -- architects, developers, users, process owners, executives, and others -- and working out design issues will be a sometimes messy process that requires some discussion and give and take among all parties.   

## 5. Hey, [It's Not Rocket Surgery][krug] &#8480;

I recently found myself the beneficiary of a modern medical miracle. I was having some problems with my vision, and my regular eye doctor referred me to a specialist. I had to wait a few days to get into his office. Once I was seated in front of him, he quickly diagnosed me with a torn and partially detached retina; injected a bubble of gas into my eye; put a green band on my wrist warning others not to take me up in any sort of air vehicle, since my eyeball would explode; and sent me home with a stern admonition to lean to the right at a 45 degree angle for 24 hours, then come back into his office for the next phase of the treatment. When I went back in, after 24 hours of feeling like my eyeball was on fire, he put me into a different chair, shot lasers into my eye for what seemed like an eternity, then pronounced me healed, and sent me home to recuperate. 

Now, did I understand what had just happened to me? No. Forty-eight hours earlier, I couldn't have told you for sure that I even had a retina, let alone that it might be damaged. Did I ask how much the procedure was going to cost, or how much it would hurt? No. Since my only alternative was going blind, I really didn't care. All I know is that my vision is now fully restored with no lasting ill effects. Would I do it all again, if I found myself in the same situation? Without question. Would I recommend this guy to others with vision problems? Absolutely. 

Now, I mention all this, because UX experts are often tempted to see themselves, and portray themselves to others, in this same sort of light. ""Hi, I'm a UX specialist. I've got a Ph.D. in this stuff. What you need is a heuristic evaluation. If you don't let me give you one immediately, then no one will ever be able to figure out how to use your application, and you will forever become a figure of ridicule to your peers and your children. Don't bother asking how much it's going to cost. Just give me your corporate credit card and pray that it's not too late to save your sorry little app.""

I do not recommend this approach. It may work once or twice. But over time, a few facts will begin to dawn on the software developers and their managers. 

### a. The results you deliver are not as clear-cut as those offered by doctors. 

Vision or blindness? That's a binary distinction that is easy to make. Usable or not usable? That's a matter of degree, and of perception. So it is hard to convince others that they need your services in the same absolute, unquestioning sense that they need the services offered by doctors.

### b. There is a certain transparency about UX concerns that is utterly lacking in many medical conditions. 

When my vision specialist tells me that I've got a retine that is torn in the upper left corner of my eye, I'm going to take his word for it. He will probably want to show me a picture of my condition, thinking that he is enlightening me, or showing me something of interest. I will give it a quick glance, and nod knowingly, not having the faintest idea of what I'm looking at. Heck, it's the inside of an eyeball. I have no idea what a normal one is supposed to look like. Just fix me, doc. 

On the other hand, when I look at a user interface, the things of interest are all visible to me, and are things that I'm used to looking at. I use Google. I use Amazon. I've got an iPhone. I may not fully understand what makes them so successful, but neither are these elements entirely mysterious to me. So I am not likely to accept confusing recommendations from UX specialists with the same suspension of disbelief and unquestioning acceptance that I accord to medical specialists. 

### c. UX methods are not as reliable or mysterious as those of medical specialists. 

Whatever my eye doctor did to me, it qualifies as magic in my book. He seemed to know what he was doing, whereas I hadn't the faintest idea what he up to. He told me it would work, and it did. He used expensive equipment that I wouldn't be able to find at CostCo. End of story.  

But even though UX experts often cloak their practices in terms confusing to others in IT, once they are explained, they tend to sound an awful lot like the same things that application developers have been doing all along, just done with a heightened sensitivity to UX concerns, as opposed to straightforward delivery of raw functionality. 

The bottom line here is that, if you attempt to sell yourself in the same way that a medical specialist would, you are likely to end up looking more like the [grand and glorious wizard][wiz]  than [Dr. Christiaan Barnard](http://en.wikipedia.org/wiki/Christiaan_Barnard).

----

So there you have it: my top recommendations for plying the UX trade within the environment of corporate IT. None of this is meant to discourage this sort of work -- improved usability of corporate applications is an important goal for any business these days -- but rather to equip such practitioners with the mental models they will need in order to consistently succeed in these sorts of environments.


[0]: http://en.wikipedia.org/wiki/Michael_Lopp
[1]: http://www.randsinrepose.com/archives/2012/01/16/a_design_primer_for_engineers.html
[3]: http://alistapart.com/column/looking-beyond-user-centered-design
[krug]: http://www.sensible.com/rsme.html
[dilbert]: http://dilbert.com
[wiz]: http://en.wikipedia.org/wiki/The_Wizard_of_Oz_(1939_film)
"
Business	Reflections on Postel's Law	2013-05-10	9 - Closed	Business, Culture, Diversity, Software Development, Technology, Web	"<p>Jon Postel was an American computer scientist who helped to develop the basic protocols on which the Internet is built. Among other accomplishments, he is remembered today for the formulation of a robustness principle, now often referred to as Postel&#8217;s Law. </p><br><br><blockquote><br><p>Be liberal in what you accept, and conservative in what you send.</p><br></blockquote>
"	"[Jon Postel][postel] was an American computer scientist who helped to develop the basic [protocols][] on which the Internet is built. Among other accomplishments, he is remembered today for the formulation of a robustness principle, now often referred to as Postel's Law. 

> Be liberal in what you accept, and conservative in what you send.

This was originally included as part of an early specification for the Transmission Control Protocol (TCP), and was stated in this way:

> TCP implementations should follow a general principle of robustness: be conservative in what you do, be liberal in what you accept from others.

In other words, software code that sends commands or data to other programs should conform completely to the relevant specifications, but code that receives input should accept nonconforming input as long as the meaning is clear and the effects are benign.

Note that, for a computer scientist, this principle is much more akin to an ethical admonition than a technical specification. That is, it does not state an absolute law or standard, but a general social code for software: be strict in your own behavior, but tolerant of harmless quirks in others. 

And, like most ethical principles, it is not universally accepted. Some have argued, for example, that being tolerant of minor failings is a slippery slope, and can allow problematic software to pass through implementation gates without correction, and then cause problems in the wild, when these problems may be much harder to identify and fix. 

In general, though, I think that the proposition and acceptance of Postel's law marks the passing of our computer systems from relatively small, well bounded, tightly controlled architectures to more sprawling, unbounded, and extensive systems. If a single architect can tightly control all elements of the architecture, and all instances of its implementation, then the need for Postel's law never arises. It is only when we enter the era of systems like the Internet and the World-Wide Web -- [small pieces loosely joined][pieces] -- that the value of Postel's law emerges. In systems like these, excessive fussiness can cause the entire network to become unreliable. 

Postel's law, as originally stated, was intended to apply to program-to-program communications. But what about communications between humans and software programs? It can be applied there as well. When a user interface asks for my phone number, and then rejects it because I've entered it without dashes -- or with, depending on the whims of the interface designer -- then I know I'm dealing with an intolerant interface. On the other hand, when my entry is happily accepted, however I punctuate it, and then reformatted for me to a convenient standard -- as happens when I enter such information into Apple's [Contacts][] app, for example -- I know I'm dealing with a human interface based on Postel's Law: *be liberal in what you accept, and conservative in what you send*. 

The evolution of the Hypertext Markup Language ([HTML][]) specification over the last decade or so can also be seen as an example of Postel's law at work. The original HTML language was designed to be written by humans, and early Web browsers were tolerant of minor irregularities in coding, so long as the intent of the author was clear. Upper-case tags? No problem. Lower-case tags? More, please. A paragraph tag without a matching closing tag before the next paragraph? Works for me. 

But then, along came eXtensible Markup Language ([XML][]). And (despite its use of the letter ""X"" as an abbreviation for ""extensible"") XML parsers were not at all tolerant of minor quirks in others. No. As a matter of fact, they were notoriously and intentionally fussy, making the office grammarian who insists on correcting others' usage of ""who"" and ""whom"" seem like a generous and indulgent soul by comparison. 

So when someone had the bright idea of staging a shotgun wedding between HTML and XML, giving birth to little XHTML, trouble eventually ensued. No more mixed case in tags. Oh no. We can't put up with that. No more starting tags without matching tags, unless such tags are carefully identified as self-closing. And so forth. Web authors put up with this for a while, but when the XML zealots started to get really fundamentalist on them about interpretation of the specifications, they finally rebelled, and the result was HTML5. And the most notable feature of this new language specification is that it requires no version declaration, because one of the rules of the new HTML is that it always and forever accepts all prior versions as legitimate: *be liberal in what you accept....*

And what about communications between people? Are these too subject to Postel's law? I believe so. As [human societies develop][levels] from traditional, fundamentalist levels to postmodern, pluralistic levels, they of necessity embrace Postel's law, just as computer systems do when they evolve in a parallel fashion. *Live and let live. Turn the other cheek. [Different strokes for different folks.][sly] Do unto others as you would have them do unto you.* All of these maxims reflect the same underlying intent of Postel's Law: *follow the highest standards in your own behavior, but accept diversity in others.* 

And so, as we continue our adventures in developing and participating in ever larger and more complex systems -- whether computer systems or human societies -- it is worthwhile to reflect on Postel's law from time to time. There's an awful lot of practical wisdom packed into this simple principle. 



[contacts]: http://www.apple.com/osx/apps/#contacts
[html]: http://www.alistapart.com/articles/a-brief-history-of-markup/
[postel]: http://en.wikipedia.org/wiki/Jon_Postel
[protocols]: http://en.wikipedia.org/wiki/Internet_protocol_suite
[principle]: http://en.wikipedia.org/wiki/Robustness_Principle
[pieces]: http://www.amazon.com/Small-Pieces-Loosely-Joined-Unified/dp/0738208507
[xml]: http://en.wikipedia.org/wiki/XML
[levels]: http://www.pagantuna.com/posts/developmental-levels.html
[sly]: http://en.wikipedia.org/wiki/Everyday_People
"
Culture	Reflections on Postel's Law	2013-05-10	9 - Closed	Business, Culture, Diversity, Software Development, Technology, Web	"<p>Jon Postel was an American computer scientist who helped to develop the basic protocols on which the Internet is built. Among other accomplishments, he is remembered today for the formulation of a robustness principle, now often referred to as Postel&#8217;s Law. </p><br><br><blockquote><br><p>Be liberal in what you accept, and conservative in what you send.</p><br></blockquote>
"	"[Jon Postel][postel] was an American computer scientist who helped to develop the basic [protocols][] on which the Internet is built. Among other accomplishments, he is remembered today for the formulation of a robustness principle, now often referred to as Postel's Law. 

> Be liberal in what you accept, and conservative in what you send.

This was originally included as part of an early specification for the Transmission Control Protocol (TCP), and was stated in this way:

> TCP implementations should follow a general principle of robustness: be conservative in what you do, be liberal in what you accept from others.

In other words, software code that sends commands or data to other programs should conform completely to the relevant specifications, but code that receives input should accept nonconforming input as long as the meaning is clear and the effects are benign.

Note that, for a computer scientist, this principle is much more akin to an ethical admonition than a technical specification. That is, it does not state an absolute law or standard, but a general social code for software: be strict in your own behavior, but tolerant of harmless quirks in others. 

And, like most ethical principles, it is not universally accepted. Some have argued, for example, that being tolerant of minor failings is a slippery slope, and can allow problematic software to pass through implementation gates without correction, and then cause problems in the wild, when these problems may be much harder to identify and fix. 

In general, though, I think that the proposition and acceptance of Postel's law marks the passing of our computer systems from relatively small, well bounded, tightly controlled architectures to more sprawling, unbounded, and extensive systems. If a single architect can tightly control all elements of the architecture, and all instances of its implementation, then the need for Postel's law never arises. It is only when we enter the era of systems like the Internet and the World-Wide Web -- [small pieces loosely joined][pieces] -- that the value of Postel's law emerges. In systems like these, excessive fussiness can cause the entire network to become unreliable. 

Postel's law, as originally stated, was intended to apply to program-to-program communications. But what about communications between humans and software programs? It can be applied there as well. When a user interface asks for my phone number, and then rejects it because I've entered it without dashes -- or with, depending on the whims of the interface designer -- then I know I'm dealing with an intolerant interface. On the other hand, when my entry is happily accepted, however I punctuate it, and then reformatted for me to a convenient standard -- as happens when I enter such information into Apple's [Contacts][] app, for example -- I know I'm dealing with a human interface based on Postel's Law: *be liberal in what you accept, and conservative in what you send*. 

The evolution of the Hypertext Markup Language ([HTML][]) specification over the last decade or so can also be seen as an example of Postel's law at work. The original HTML language was designed to be written by humans, and early Web browsers were tolerant of minor irregularities in coding, so long as the intent of the author was clear. Upper-case tags? No problem. Lower-case tags? More, please. A paragraph tag without a matching closing tag before the next paragraph? Works for me. 

But then, along came eXtensible Markup Language ([XML][]). And (despite its use of the letter ""X"" as an abbreviation for ""extensible"") XML parsers were not at all tolerant of minor quirks in others. No. As a matter of fact, they were notoriously and intentionally fussy, making the office grammarian who insists on correcting others' usage of ""who"" and ""whom"" seem like a generous and indulgent soul by comparison. 

So when someone had the bright idea of staging a shotgun wedding between HTML and XML, giving birth to little XHTML, trouble eventually ensued. No more mixed case in tags. Oh no. We can't put up with that. No more starting tags without matching tags, unless such tags are carefully identified as self-closing. And so forth. Web authors put up with this for a while, but when the XML zealots started to get really fundamentalist on them about interpretation of the specifications, they finally rebelled, and the result was HTML5. And the most notable feature of this new language specification is that it requires no version declaration, because one of the rules of the new HTML is that it always and forever accepts all prior versions as legitimate: *be liberal in what you accept....*

And what about communications between people? Are these too subject to Postel's law? I believe so. As [human societies develop][levels] from traditional, fundamentalist levels to postmodern, pluralistic levels, they of necessity embrace Postel's law, just as computer systems do when they evolve in a parallel fashion. *Live and let live. Turn the other cheek. [Different strokes for different folks.][sly] Do unto others as you would have them do unto you.* All of these maxims reflect the same underlying intent of Postel's Law: *follow the highest standards in your own behavior, but accept diversity in others.* 

And so, as we continue our adventures in developing and participating in ever larger and more complex systems -- whether computer systems or human societies -- it is worthwhile to reflect on Postel's law from time to time. There's an awful lot of practical wisdom packed into this simple principle. 



[contacts]: http://www.apple.com/osx/apps/#contacts
[html]: http://www.alistapart.com/articles/a-brief-history-of-markup/
[postel]: http://en.wikipedia.org/wiki/Jon_Postel
[protocols]: http://en.wikipedia.org/wiki/Internet_protocol_suite
[principle]: http://en.wikipedia.org/wiki/Robustness_Principle
[pieces]: http://www.amazon.com/Small-Pieces-Loosely-Joined-Unified/dp/0738208507
[xml]: http://en.wikipedia.org/wiki/XML
[levels]: http://www.pagantuna.com/posts/developmental-levels.html
[sly]: http://en.wikipedia.org/wiki/Everyday_People
"
Diversity	Reflections on Postel's Law	2013-05-10	9 - Closed	Business, Culture, Diversity, Software Development, Technology, Web	"<p>Jon Postel was an American computer scientist who helped to develop the basic protocols on which the Internet is built. Among other accomplishments, he is remembered today for the formulation of a robustness principle, now often referred to as Postel&#8217;s Law. </p><br><br><blockquote><br><p>Be liberal in what you accept, and conservative in what you send.</p><br></blockquote>
"	"[Jon Postel][postel] was an American computer scientist who helped to develop the basic [protocols][] on which the Internet is built. Among other accomplishments, he is remembered today for the formulation of a robustness principle, now often referred to as Postel's Law. 

> Be liberal in what you accept, and conservative in what you send.

This was originally included as part of an early specification for the Transmission Control Protocol (TCP), and was stated in this way:

> TCP implementations should follow a general principle of robustness: be conservative in what you do, be liberal in what you accept from others.

In other words, software code that sends commands or data to other programs should conform completely to the relevant specifications, but code that receives input should accept nonconforming input as long as the meaning is clear and the effects are benign.

Note that, for a computer scientist, this principle is much more akin to an ethical admonition than a technical specification. That is, it does not state an absolute law or standard, but a general social code for software: be strict in your own behavior, but tolerant of harmless quirks in others. 

And, like most ethical principles, it is not universally accepted. Some have argued, for example, that being tolerant of minor failings is a slippery slope, and can allow problematic software to pass through implementation gates without correction, and then cause problems in the wild, when these problems may be much harder to identify and fix. 

In general, though, I think that the proposition and acceptance of Postel's law marks the passing of our computer systems from relatively small, well bounded, tightly controlled architectures to more sprawling, unbounded, and extensive systems. If a single architect can tightly control all elements of the architecture, and all instances of its implementation, then the need for Postel's law never arises. It is only when we enter the era of systems like the Internet and the World-Wide Web -- [small pieces loosely joined][pieces] -- that the value of Postel's law emerges. In systems like these, excessive fussiness can cause the entire network to become unreliable. 

Postel's law, as originally stated, was intended to apply to program-to-program communications. But what about communications between humans and software programs? It can be applied there as well. When a user interface asks for my phone number, and then rejects it because I've entered it without dashes -- or with, depending on the whims of the interface designer -- then I know I'm dealing with an intolerant interface. On the other hand, when my entry is happily accepted, however I punctuate it, and then reformatted for me to a convenient standard -- as happens when I enter such information into Apple's [Contacts][] app, for example -- I know I'm dealing with a human interface based on Postel's Law: *be liberal in what you accept, and conservative in what you send*. 

The evolution of the Hypertext Markup Language ([HTML][]) specification over the last decade or so can also be seen as an example of Postel's law at work. The original HTML language was designed to be written by humans, and early Web browsers were tolerant of minor irregularities in coding, so long as the intent of the author was clear. Upper-case tags? No problem. Lower-case tags? More, please. A paragraph tag without a matching closing tag before the next paragraph? Works for me. 

But then, along came eXtensible Markup Language ([XML][]). And (despite its use of the letter ""X"" as an abbreviation for ""extensible"") XML parsers were not at all tolerant of minor quirks in others. No. As a matter of fact, they were notoriously and intentionally fussy, making the office grammarian who insists on correcting others' usage of ""who"" and ""whom"" seem like a generous and indulgent soul by comparison. 

So when someone had the bright idea of staging a shotgun wedding between HTML and XML, giving birth to little XHTML, trouble eventually ensued. No more mixed case in tags. Oh no. We can't put up with that. No more starting tags without matching tags, unless such tags are carefully identified as self-closing. And so forth. Web authors put up with this for a while, but when the XML zealots started to get really fundamentalist on them about interpretation of the specifications, they finally rebelled, and the result was HTML5. And the most notable feature of this new language specification is that it requires no version declaration, because one of the rules of the new HTML is that it always and forever accepts all prior versions as legitimate: *be liberal in what you accept....*

And what about communications between people? Are these too subject to Postel's law? I believe so. As [human societies develop][levels] from traditional, fundamentalist levels to postmodern, pluralistic levels, they of necessity embrace Postel's law, just as computer systems do when they evolve in a parallel fashion. *Live and let live. Turn the other cheek. [Different strokes for different folks.][sly] Do unto others as you would have them do unto you.* All of these maxims reflect the same underlying intent of Postel's Law: *follow the highest standards in your own behavior, but accept diversity in others.* 

And so, as we continue our adventures in developing and participating in ever larger and more complex systems -- whether computer systems or human societies -- it is worthwhile to reflect on Postel's law from time to time. There's an awful lot of practical wisdom packed into this simple principle. 



[contacts]: http://www.apple.com/osx/apps/#contacts
[html]: http://www.alistapart.com/articles/a-brief-history-of-markup/
[postel]: http://en.wikipedia.org/wiki/Jon_Postel
[protocols]: http://en.wikipedia.org/wiki/Internet_protocol_suite
[principle]: http://en.wikipedia.org/wiki/Robustness_Principle
[pieces]: http://www.amazon.com/Small-Pieces-Loosely-Joined-Unified/dp/0738208507
[xml]: http://en.wikipedia.org/wiki/XML
[levels]: http://www.pagantuna.com/posts/developmental-levels.html
[sly]: http://en.wikipedia.org/wiki/Everyday_People
"
Software Development	Reflections on Postel's Law	2013-05-10	9 - Closed	Business, Culture, Diversity, Software Development, Technology, Web	"<p>Jon Postel was an American computer scientist who helped to develop the basic protocols on which the Internet is built. Among other accomplishments, he is remembered today for the formulation of a robustness principle, now often referred to as Postel&#8217;s Law. </p><br><br><blockquote><br><p>Be liberal in what you accept, and conservative in what you send.</p><br></blockquote>
"	"[Jon Postel][postel] was an American computer scientist who helped to develop the basic [protocols][] on which the Internet is built. Among other accomplishments, he is remembered today for the formulation of a robustness principle, now often referred to as Postel's Law. 

> Be liberal in what you accept, and conservative in what you send.

This was originally included as part of an early specification for the Transmission Control Protocol (TCP), and was stated in this way:

> TCP implementations should follow a general principle of robustness: be conservative in what you do, be liberal in what you accept from others.

In other words, software code that sends commands or data to other programs should conform completely to the relevant specifications, but code that receives input should accept nonconforming input as long as the meaning is clear and the effects are benign.

Note that, for a computer scientist, this principle is much more akin to an ethical admonition than a technical specification. That is, it does not state an absolute law or standard, but a general social code for software: be strict in your own behavior, but tolerant of harmless quirks in others. 

And, like most ethical principles, it is not universally accepted. Some have argued, for example, that being tolerant of minor failings is a slippery slope, and can allow problematic software to pass through implementation gates without correction, and then cause problems in the wild, when these problems may be much harder to identify and fix. 

In general, though, I think that the proposition and acceptance of Postel's law marks the passing of our computer systems from relatively small, well bounded, tightly controlled architectures to more sprawling, unbounded, and extensive systems. If a single architect can tightly control all elements of the architecture, and all instances of its implementation, then the need for Postel's law never arises. It is only when we enter the era of systems like the Internet and the World-Wide Web -- [small pieces loosely joined][pieces] -- that the value of Postel's law emerges. In systems like these, excessive fussiness can cause the entire network to become unreliable. 

Postel's law, as originally stated, was intended to apply to program-to-program communications. But what about communications between humans and software programs? It can be applied there as well. When a user interface asks for my phone number, and then rejects it because I've entered it without dashes -- or with, depending on the whims of the interface designer -- then I know I'm dealing with an intolerant interface. On the other hand, when my entry is happily accepted, however I punctuate it, and then reformatted for me to a convenient standard -- as happens when I enter such information into Apple's [Contacts][] app, for example -- I know I'm dealing with a human interface based on Postel's Law: *be liberal in what you accept, and conservative in what you send*. 

The evolution of the Hypertext Markup Language ([HTML][]) specification over the last decade or so can also be seen as an example of Postel's law at work. The original HTML language was designed to be written by humans, and early Web browsers were tolerant of minor irregularities in coding, so long as the intent of the author was clear. Upper-case tags? No problem. Lower-case tags? More, please. A paragraph tag without a matching closing tag before the next paragraph? Works for me. 

But then, along came eXtensible Markup Language ([XML][]). And (despite its use of the letter ""X"" as an abbreviation for ""extensible"") XML parsers were not at all tolerant of minor quirks in others. No. As a matter of fact, they were notoriously and intentionally fussy, making the office grammarian who insists on correcting others' usage of ""who"" and ""whom"" seem like a generous and indulgent soul by comparison. 

So when someone had the bright idea of staging a shotgun wedding between HTML and XML, giving birth to little XHTML, trouble eventually ensued. No more mixed case in tags. Oh no. We can't put up with that. No more starting tags without matching tags, unless such tags are carefully identified as self-closing. And so forth. Web authors put up with this for a while, but when the XML zealots started to get really fundamentalist on them about interpretation of the specifications, they finally rebelled, and the result was HTML5. And the most notable feature of this new language specification is that it requires no version declaration, because one of the rules of the new HTML is that it always and forever accepts all prior versions as legitimate: *be liberal in what you accept....*

And what about communications between people? Are these too subject to Postel's law? I believe so. As [human societies develop][levels] from traditional, fundamentalist levels to postmodern, pluralistic levels, they of necessity embrace Postel's law, just as computer systems do when they evolve in a parallel fashion. *Live and let live. Turn the other cheek. [Different strokes for different folks.][sly] Do unto others as you would have them do unto you.* All of these maxims reflect the same underlying intent of Postel's Law: *follow the highest standards in your own behavior, but accept diversity in others.* 

And so, as we continue our adventures in developing and participating in ever larger and more complex systems -- whether computer systems or human societies -- it is worthwhile to reflect on Postel's law from time to time. There's an awful lot of practical wisdom packed into this simple principle. 



[contacts]: http://www.apple.com/osx/apps/#contacts
[html]: http://www.alistapart.com/articles/a-brief-history-of-markup/
[postel]: http://en.wikipedia.org/wiki/Jon_Postel
[protocols]: http://en.wikipedia.org/wiki/Internet_protocol_suite
[principle]: http://en.wikipedia.org/wiki/Robustness_Principle
[pieces]: http://www.amazon.com/Small-Pieces-Loosely-Joined-Unified/dp/0738208507
[xml]: http://en.wikipedia.org/wiki/XML
[levels]: http://www.pagantuna.com/posts/developmental-levels.html
[sly]: http://en.wikipedia.org/wiki/Everyday_People
"
Technology	Reflections on Postel's Law	2013-05-10	9 - Closed	Business, Culture, Diversity, Software Development, Technology, Web	"<p>Jon Postel was an American computer scientist who helped to develop the basic protocols on which the Internet is built. Among other accomplishments, he is remembered today for the formulation of a robustness principle, now often referred to as Postel&#8217;s Law. </p><br><br><blockquote><br><p>Be liberal in what you accept, and conservative in what you send.</p><br></blockquote>
"	"[Jon Postel][postel] was an American computer scientist who helped to develop the basic [protocols][] on which the Internet is built. Among other accomplishments, he is remembered today for the formulation of a robustness principle, now often referred to as Postel's Law. 

> Be liberal in what you accept, and conservative in what you send.

This was originally included as part of an early specification for the Transmission Control Protocol (TCP), and was stated in this way:

> TCP implementations should follow a general principle of robustness: be conservative in what you do, be liberal in what you accept from others.

In other words, software code that sends commands or data to other programs should conform completely to the relevant specifications, but code that receives input should accept nonconforming input as long as the meaning is clear and the effects are benign.

Note that, for a computer scientist, this principle is much more akin to an ethical admonition than a technical specification. That is, it does not state an absolute law or standard, but a general social code for software: be strict in your own behavior, but tolerant of harmless quirks in others. 

And, like most ethical principles, it is not universally accepted. Some have argued, for example, that being tolerant of minor failings is a slippery slope, and can allow problematic software to pass through implementation gates without correction, and then cause problems in the wild, when these problems may be much harder to identify and fix. 

In general, though, I think that the proposition and acceptance of Postel's law marks the passing of our computer systems from relatively small, well bounded, tightly controlled architectures to more sprawling, unbounded, and extensive systems. If a single architect can tightly control all elements of the architecture, and all instances of its implementation, then the need for Postel's law never arises. It is only when we enter the era of systems like the Internet and the World-Wide Web -- [small pieces loosely joined][pieces] -- that the value of Postel's law emerges. In systems like these, excessive fussiness can cause the entire network to become unreliable. 

Postel's law, as originally stated, was intended to apply to program-to-program communications. But what about communications between humans and software programs? It can be applied there as well. When a user interface asks for my phone number, and then rejects it because I've entered it without dashes -- or with, depending on the whims of the interface designer -- then I know I'm dealing with an intolerant interface. On the other hand, when my entry is happily accepted, however I punctuate it, and then reformatted for me to a convenient standard -- as happens when I enter such information into Apple's [Contacts][] app, for example -- I know I'm dealing with a human interface based on Postel's Law: *be liberal in what you accept, and conservative in what you send*. 

The evolution of the Hypertext Markup Language ([HTML][]) specification over the last decade or so can also be seen as an example of Postel's law at work. The original HTML language was designed to be written by humans, and early Web browsers were tolerant of minor irregularities in coding, so long as the intent of the author was clear. Upper-case tags? No problem. Lower-case tags? More, please. A paragraph tag without a matching closing tag before the next paragraph? Works for me. 

But then, along came eXtensible Markup Language ([XML][]). And (despite its use of the letter ""X"" as an abbreviation for ""extensible"") XML parsers were not at all tolerant of minor quirks in others. No. As a matter of fact, they were notoriously and intentionally fussy, making the office grammarian who insists on correcting others' usage of ""who"" and ""whom"" seem like a generous and indulgent soul by comparison. 

So when someone had the bright idea of staging a shotgun wedding between HTML and XML, giving birth to little XHTML, trouble eventually ensued. No more mixed case in tags. Oh no. We can't put up with that. No more starting tags without matching tags, unless such tags are carefully identified as self-closing. And so forth. Web authors put up with this for a while, but when the XML zealots started to get really fundamentalist on them about interpretation of the specifications, they finally rebelled, and the result was HTML5. And the most notable feature of this new language specification is that it requires no version declaration, because one of the rules of the new HTML is that it always and forever accepts all prior versions as legitimate: *be liberal in what you accept....*

And what about communications between people? Are these too subject to Postel's law? I believe so. As [human societies develop][levels] from traditional, fundamentalist levels to postmodern, pluralistic levels, they of necessity embrace Postel's law, just as computer systems do when they evolve in a parallel fashion. *Live and let live. Turn the other cheek. [Different strokes for different folks.][sly] Do unto others as you would have them do unto you.* All of these maxims reflect the same underlying intent of Postel's Law: *follow the highest standards in your own behavior, but accept diversity in others.* 

And so, as we continue our adventures in developing and participating in ever larger and more complex systems -- whether computer systems or human societies -- it is worthwhile to reflect on Postel's law from time to time. There's an awful lot of practical wisdom packed into this simple principle. 



[contacts]: http://www.apple.com/osx/apps/#contacts
[html]: http://www.alistapart.com/articles/a-brief-history-of-markup/
[postel]: http://en.wikipedia.org/wiki/Jon_Postel
[protocols]: http://en.wikipedia.org/wiki/Internet_protocol_suite
[principle]: http://en.wikipedia.org/wiki/Robustness_Principle
[pieces]: http://www.amazon.com/Small-Pieces-Loosely-Joined-Unified/dp/0738208507
[xml]: http://en.wikipedia.org/wiki/XML
[levels]: http://www.pagantuna.com/posts/developmental-levels.html
[sly]: http://en.wikipedia.org/wiki/Everyday_People
"
Web	Reflections on Postel's Law	2013-05-10	9 - Closed	Business, Culture, Diversity, Software Development, Technology, Web	"<p>Jon Postel was an American computer scientist who helped to develop the basic protocols on which the Internet is built. Among other accomplishments, he is remembered today for the formulation of a robustness principle, now often referred to as Postel&#8217;s Law. </p><br><br><blockquote><br><p>Be liberal in what you accept, and conservative in what you send.</p><br></blockquote>
"	"[Jon Postel][postel] was an American computer scientist who helped to develop the basic [protocols][] on which the Internet is built. Among other accomplishments, he is remembered today for the formulation of a robustness principle, now often referred to as Postel's Law. 

> Be liberal in what you accept, and conservative in what you send.

This was originally included as part of an early specification for the Transmission Control Protocol (TCP), and was stated in this way:

> TCP implementations should follow a general principle of robustness: be conservative in what you do, be liberal in what you accept from others.

In other words, software code that sends commands or data to other programs should conform completely to the relevant specifications, but code that receives input should accept nonconforming input as long as the meaning is clear and the effects are benign.

Note that, for a computer scientist, this principle is much more akin to an ethical admonition than a technical specification. That is, it does not state an absolute law or standard, but a general social code for software: be strict in your own behavior, but tolerant of harmless quirks in others. 

And, like most ethical principles, it is not universally accepted. Some have argued, for example, that being tolerant of minor failings is a slippery slope, and can allow problematic software to pass through implementation gates without correction, and then cause problems in the wild, when these problems may be much harder to identify and fix. 

In general, though, I think that the proposition and acceptance of Postel's law marks the passing of our computer systems from relatively small, well bounded, tightly controlled architectures to more sprawling, unbounded, and extensive systems. If a single architect can tightly control all elements of the architecture, and all instances of its implementation, then the need for Postel's law never arises. It is only when we enter the era of systems like the Internet and the World-Wide Web -- [small pieces loosely joined][pieces] -- that the value of Postel's law emerges. In systems like these, excessive fussiness can cause the entire network to become unreliable. 

Postel's law, as originally stated, was intended to apply to program-to-program communications. But what about communications between humans and software programs? It can be applied there as well. When a user interface asks for my phone number, and then rejects it because I've entered it without dashes -- or with, depending on the whims of the interface designer -- then I know I'm dealing with an intolerant interface. On the other hand, when my entry is happily accepted, however I punctuate it, and then reformatted for me to a convenient standard -- as happens when I enter such information into Apple's [Contacts][] app, for example -- I know I'm dealing with a human interface based on Postel's Law: *be liberal in what you accept, and conservative in what you send*. 

The evolution of the Hypertext Markup Language ([HTML][]) specification over the last decade or so can also be seen as an example of Postel's law at work. The original HTML language was designed to be written by humans, and early Web browsers were tolerant of minor irregularities in coding, so long as the intent of the author was clear. Upper-case tags? No problem. Lower-case tags? More, please. A paragraph tag without a matching closing tag before the next paragraph? Works for me. 

But then, along came eXtensible Markup Language ([XML][]). And (despite its use of the letter ""X"" as an abbreviation for ""extensible"") XML parsers were not at all tolerant of minor quirks in others. No. As a matter of fact, they were notoriously and intentionally fussy, making the office grammarian who insists on correcting others' usage of ""who"" and ""whom"" seem like a generous and indulgent soul by comparison. 

So when someone had the bright idea of staging a shotgun wedding between HTML and XML, giving birth to little XHTML, trouble eventually ensued. No more mixed case in tags. Oh no. We can't put up with that. No more starting tags without matching tags, unless such tags are carefully identified as self-closing. And so forth. Web authors put up with this for a while, but when the XML zealots started to get really fundamentalist on them about interpretation of the specifications, they finally rebelled, and the result was HTML5. And the most notable feature of this new language specification is that it requires no version declaration, because one of the rules of the new HTML is that it always and forever accepts all prior versions as legitimate: *be liberal in what you accept....*

And what about communications between people? Are these too subject to Postel's law? I believe so. As [human societies develop][levels] from traditional, fundamentalist levels to postmodern, pluralistic levels, they of necessity embrace Postel's law, just as computer systems do when they evolve in a parallel fashion. *Live and let live. Turn the other cheek. [Different strokes for different folks.][sly] Do unto others as you would have them do unto you.* All of these maxims reflect the same underlying intent of Postel's Law: *follow the highest standards in your own behavior, but accept diversity in others.* 

And so, as we continue our adventures in developing and participating in ever larger and more complex systems -- whether computer systems or human societies -- it is worthwhile to reflect on Postel's law from time to time. There's an awful lot of practical wisdom packed into this simple principle. 



[contacts]: http://www.apple.com/osx/apps/#contacts
[html]: http://www.alistapart.com/articles/a-brief-history-of-markup/
[postel]: http://en.wikipedia.org/wiki/Jon_Postel
[protocols]: http://en.wikipedia.org/wiki/Internet_protocol_suite
[principle]: http://en.wikipedia.org/wiki/Robustness_Principle
[pieces]: http://www.amazon.com/Small-Pieces-Loosely-Joined-Unified/dp/0738208507
[xml]: http://en.wikipedia.org/wiki/XML
[levels]: http://www.pagantuna.com/posts/developmental-levels.html
[sly]: http://en.wikipedia.org/wiki/Everyday_People
"
Leadership	Fighting Organizational Friction	2013-08-28	9 - Closed	Leadership, Lean and Agile	"<p>Elimination of waste is one of the core principles of lean. But we often think of waste and its elimination in purely economic terms: a particular lean improvement saved a certain number of dollars, or a certain number of hours per year. </p><br><br><p>There is also value, though, in visualizing waste in the form of organizational friction: the resistance that workers encounter when trying to do their jobs, or when trying to change the way that their jobs are done. </p><br><br><p>I say this because, in my experience, managers and workers often have different motivations when it comes to lean. Managers are often motivated by numbers, especially when they figure prominently in their annual goals and objectives, and especially when they have dollar signs in front of them. </p><br><br><p>As managers, though, we need to realize that these sorts of quantitative measures are in some sense just an abstraction of what is happening on the floor, or wherever the work gets done in our organizations. </p>
"	"# Fighting Organizational Friction

Elimination of waste is one of the core principles of [lean][]. But we often think of waste and its elimination in purely economic terms: a particular lean improvement saved a certain number of dollars, or a certain number of hours per year. 

There is also value, though, in visualizing waste in the form of organizational friction: the resistance that workers encounter when trying to do their jobs, or when trying to change the way that their jobs are done. 

I say this because, in my experience, managers and workers often have different motivations when it comes to lean. Managers are often motivated by numbers, especially when they figure prominently in their annual goals and objectives, and especially when they have dollar signs in front of them. 

As managers, though, we need to realize that these sorts of quantitative measures are in some sense just an abstraction of what is happening on the floor, or wherever the work gets done in our organizations. 

And what is happening on the floor, as experienced by our workers? Either their jobs are getting easier or they are getting harder. Either they find it easy to do work that adds real value, or they find themselves hindered by organizational impediments. And when they try to make constructive changes in the ways that their work is done, either they find it easy to make such changes, or they encounter resistance. In other words, they are either fighting against organizational friction, or their work is proceeding smoothly, with no obstruction. 

And why is it important to visualize waste in this fashion? First, because it can easily be observed. If you come to me with two different schemes for accomplishing a task, then it may require expensive time-and-motion studies to actually determine which method is most efficient. But if I observe the work being done in my organization, or spend a few minutes listening to an employee talk about the work they've done recently, or even if I simply notice how an employee feels about his or her work, then the friction that I'm talking about is easily observable. The places where friction is occurring become obvious pretty quickly: I'm having to wait for someone to approve my request, or I'm having to fill out long forms in order to get someone else to help me do my job, or someone has changed their mind fifteen times about what it is they want me to do, or a certain tool is unreliable, or‚Ä¶ the list of possible sources of friction can go on and on. But just as mechanical friction generates heat, organizational friction also generates clear signs that it is occurring. 

So signs of friction are generally pretty obvious. But then, as organizational leaders, what happens if we ignore such signs, or are insensitive to them? What happens if we are counting up our lean savings for the year, while our workers are struggling to overcome sources of friction right outside of our offices?

This is the really dangerous point. Because, if we see such friction occurring, and we take no steps to eliminate the friction, then, in my experience, our workers start to see value in fighting against the friction, or even in creating and maintaining the sources of friction. After all, if we are not eliminating the friction, then we must be embracing it! 

And this enshrinement of friction is also pretty obvious, once we begin to notice it. My, look how hard I worked to get my job done today! Look at the long list of obstacles I overcame! Look how much overtime I put in so that we could meet our schedule! Look at how well I fought off an attempt by another organization to get us to change the ways we do things over here! 

So what is happening in your organization? Are your employees constantly fighting against friction in order to get their jobs done, or in order to make constructive changes? Are you working to eliminate friction from your organization, or are you turning a blind eye to it, and thus tacitly condoning it, or even celebrating it? Are you happy to see employees who get their jobs done easily, and leave work feeling energized at the end of a normal shift? Or are you happier to see employees struggling mightily to get their work done, and leaving work exhausted after putting in overtime to get a normal day's work done?

Or, to put it most simply: are you fighting to eliminate friction from your organization, or are your employees constantly fighting against it? 

[lean]: http://en.m.wikipedia.org/wiki/Lean_manufacturing
"
Lean and Agile	Fighting Organizational Friction	2013-08-28	9 - Closed	Leadership, Lean and Agile	"<p>Elimination of waste is one of the core principles of lean. But we often think of waste and its elimination in purely economic terms: a particular lean improvement saved a certain number of dollars, or a certain number of hours per year. </p><br><br><p>There is also value, though, in visualizing waste in the form of organizational friction: the resistance that workers encounter when trying to do their jobs, or when trying to change the way that their jobs are done. </p><br><br><p>I say this because, in my experience, managers and workers often have different motivations when it comes to lean. Managers are often motivated by numbers, especially when they figure prominently in their annual goals and objectives, and especially when they have dollar signs in front of them. </p><br><br><p>As managers, though, we need to realize that these sorts of quantitative measures are in some sense just an abstraction of what is happening on the floor, or wherever the work gets done in our organizations. </p>
"	"# Fighting Organizational Friction

Elimination of waste is one of the core principles of [lean][]. But we often think of waste and its elimination in purely economic terms: a particular lean improvement saved a certain number of dollars, or a certain number of hours per year. 

There is also value, though, in visualizing waste in the form of organizational friction: the resistance that workers encounter when trying to do their jobs, or when trying to change the way that their jobs are done. 

I say this because, in my experience, managers and workers often have different motivations when it comes to lean. Managers are often motivated by numbers, especially when they figure prominently in their annual goals and objectives, and especially when they have dollar signs in front of them. 

As managers, though, we need to realize that these sorts of quantitative measures are in some sense just an abstraction of what is happening on the floor, or wherever the work gets done in our organizations. 

And what is happening on the floor, as experienced by our workers? Either their jobs are getting easier or they are getting harder. Either they find it easy to do work that adds real value, or they find themselves hindered by organizational impediments. And when they try to make constructive changes in the ways that their work is done, either they find it easy to make such changes, or they encounter resistance. In other words, they are either fighting against organizational friction, or their work is proceeding smoothly, with no obstruction. 

And why is it important to visualize waste in this fashion? First, because it can easily be observed. If you come to me with two different schemes for accomplishing a task, then it may require expensive time-and-motion studies to actually determine which method is most efficient. But if I observe the work being done in my organization, or spend a few minutes listening to an employee talk about the work they've done recently, or even if I simply notice how an employee feels about his or her work, then the friction that I'm talking about is easily observable. The places where friction is occurring become obvious pretty quickly: I'm having to wait for someone to approve my request, or I'm having to fill out long forms in order to get someone else to help me do my job, or someone has changed their mind fifteen times about what it is they want me to do, or a certain tool is unreliable, or‚Ä¶ the list of possible sources of friction can go on and on. But just as mechanical friction generates heat, organizational friction also generates clear signs that it is occurring. 

So signs of friction are generally pretty obvious. But then, as organizational leaders, what happens if we ignore such signs, or are insensitive to them? What happens if we are counting up our lean savings for the year, while our workers are struggling to overcome sources of friction right outside of our offices?

This is the really dangerous point. Because, if we see such friction occurring, and we take no steps to eliminate the friction, then, in my experience, our workers start to see value in fighting against the friction, or even in creating and maintaining the sources of friction. After all, if we are not eliminating the friction, then we must be embracing it! 

And this enshrinement of friction is also pretty obvious, once we begin to notice it. My, look how hard I worked to get my job done today! Look at the long list of obstacles I overcame! Look how much overtime I put in so that we could meet our schedule! Look at how well I fought off an attempt by another organization to get us to change the ways we do things over here! 

So what is happening in your organization? Are your employees constantly fighting against friction in order to get their jobs done, or in order to make constructive changes? Are you working to eliminate friction from your organization, or are you turning a blind eye to it, and thus tacitly condoning it, or even celebrating it? Are you happy to see employees who get their jobs done easily, and leave work feeling energized at the end of a normal shift? Or are you happier to see employees struggling mightily to get their work done, and leaving work exhausted after putting in overtime to get a normal day's work done?

Or, to put it most simply: are you fighting to eliminate friction from your organization, or are your employees constantly fighting against it? 

[lean]: http://en.m.wikipedia.org/wiki/Lean_manufacturing
"
Lean and Agile	The Inconvenient Truths of Software Development	2013-10-11	9 - Closed	Lean and Agile, Software	"<p>Software development has often been managed using a predictive planning model based on the following principles. </p>
"	"# The Inconvenient Truths of Software Development

<p><a href=""http://www.claybennett.com/pages2/theaters.html""><img src=""http://www.claybennett.com/images/archivetoons2/theaters.jpg"" alt=""Cartoon by Clay Bennett""  title=""Cartoon by Clay Bennett"" class=""pic-right"" /></a></p>

Software development has often been managed using a predictive planning model based on the following principles. 

## The Comforting Illusions

1. Software development is best managed as a set of projects, with each project starting and ending at specific points in time.  

2. There exists a finite set of requirements for any software development project.

3. That finite set of requirements is discoverable within some reasonable period of time.

4. That set of requirements can be accurately documented and validated before any working software is produced or executed. 

5. Requirements are most usefully considered in a pure state, untainted by any traces of design. 

6. The clearest way to communicate requirements is through documentation containing some combination of text and diagrams.

7. Requirements can be reliably validated through careful review of this documentation.

8. Customers can be relied upon to accurately identify the relative priorities of their requirements.

9. It is possible to define a repeatable process for requirements discovery, based on the principles above.

10. The goal of design is to satisfy all the requirements.

11. It is very expensive and risky to change software once it is coded and working, so it is critical to get the requirements and design right before coding is allowed to begin. 

12. At some point in the project early enough to be useful for purposes of planning and governance, the amounts of time and effort that will be required to complete the project can be accurately estimated. 

13. As with other engineering disciplines, software engineering is based on a stable foundation of immutable laws. 

14. It is possible to accurately gauge the overall progress of a project by collating and summarizing progress data from project team members. 

15. Projects based on these principles will tend to produce satisfied customers.

These principles sound reasonable. What's more, they cohere nicely, coming together to form a picture of software development that seems pleasingly rational and predictable. 

Unfortunately, the general consensus of actual software developers with real-world experience is that all of the above principles are wrong. In fact, taken together, they can be viewed as a convenient fiction. 

In practice, all of the following have been repeatedly demonstrated to be true.

## The Inconvenient Truths

1. Useful software products evolve rapidly and more or less continuously, so defining a ""project"" as a series of development activities with definite start and end dates is typically somewhat arbitrary, and often misleading. 

2. Software requirements are a matter of opinion, and are therefore subjective, largely unbounded, always incomplete, and open to perpetual redefinition and reinterpretation. 

3. Requirements documents for software development efforts of any significant size are generally difficult to understand and interpret consistently, and so offer an entirely misleading sense of control over the software coding activities to follow.

4. The supposed boundaries between requirements, design and coding are entirely porous, with all three ""phases"" of development interacting with and influencing the others.

5. Prioritizing requirements is generally difficult, since every requirement is important to someone, and no one wants to call another's child ugly. 

6. The cost of making software changes has consistently declined, due to the increasing power and sophistication of the languages and tools available to modern developers. And so writing software and then changing it based on reactions from stakeholders is often more efficient than going through elaborate and unreliable paper-based rituals prior to coding. 

7. Any software development effort is either a journey of discovery, or a waste of resources. Either you are creating something new, or you are recreating something that's already been done. If you are creating something new, then you had best be honest that you aren't entirely sure what you're doing, or how long it will take, until you've done it. If you're entirely sure of what you're going to do and when you're going to do it, then you're not developing something, you're just putting a fresh coat of paint on something that already existed. 

8. All software applications are built on top of hardware and software platforms that are themselves highly complex and still rapidly evolving. There are no limitations. There are no hard and fast rules. Everything is malleable, and everything is possible. In this sort of environment, it is folly to try to define some sort of repeatable and stable engineering discipline. 

9. The demonstration of working software is the only reliable indicator of progress in any sort of software development activity. All other avowals of project progress are illusory. 

10. Customers are happiest when the software is adaptive and evolving quickly in response to their explicit and implicit wants and needs. 

Of course, for many of us, none of this comes as a surprise. After all, all of this is why agile software development has emerged and attained such dominant mindshare over the last decade or so. 

So why do I feel the need to restate all of this now? Perhaps it is because, despite the apparent popularity of agile practices, the old myths of predictive development still prove so convenient and comforting. Like beliefs in intelligent design, or in Newtonian physics, they somehow just feel so much more natural and comfortable than their more modern counterparts. 

And so it is tempting from time to time to slip into these old beliefs, and to pretend that we can have our cake and eat it too, be all modern and agile but retain some vestiges of this old predictive waterfall model.  

So perhaps it is important, not just to state our support for agile, but to go through this catechism, to cast out the waterfall devils, to exorcise these ghosts one more time, to remind ourselves that, no matter how convenient and comforting these old beliefs may be, they simply are not true. 
"
Software	The Inconvenient Truths of Software Development	2013-10-11	9 - Closed	Lean and Agile, Software	"<p>Software development has often been managed using a predictive planning model based on the following principles. </p>
"	"# The Inconvenient Truths of Software Development

<p><a href=""http://www.claybennett.com/pages2/theaters.html""><img src=""http://www.claybennett.com/images/archivetoons2/theaters.jpg"" alt=""Cartoon by Clay Bennett""  title=""Cartoon by Clay Bennett"" class=""pic-right"" /></a></p>

Software development has often been managed using a predictive planning model based on the following principles. 

## The Comforting Illusions

1. Software development is best managed as a set of projects, with each project starting and ending at specific points in time.  

2. There exists a finite set of requirements for any software development project.

3. That finite set of requirements is discoverable within some reasonable period of time.

4. That set of requirements can be accurately documented and validated before any working software is produced or executed. 

5. Requirements are most usefully considered in a pure state, untainted by any traces of design. 

6. The clearest way to communicate requirements is through documentation containing some combination of text and diagrams.

7. Requirements can be reliably validated through careful review of this documentation.

8. Customers can be relied upon to accurately identify the relative priorities of their requirements.

9. It is possible to define a repeatable process for requirements discovery, based on the principles above.

10. The goal of design is to satisfy all the requirements.

11. It is very expensive and risky to change software once it is coded and working, so it is critical to get the requirements and design right before coding is allowed to begin. 

12. At some point in the project early enough to be useful for purposes of planning and governance, the amounts of time and effort that will be required to complete the project can be accurately estimated. 

13. As with other engineering disciplines, software engineering is based on a stable foundation of immutable laws. 

14. It is possible to accurately gauge the overall progress of a project by collating and summarizing progress data from project team members. 

15. Projects based on these principles will tend to produce satisfied customers.

These principles sound reasonable. What's more, they cohere nicely, coming together to form a picture of software development that seems pleasingly rational and predictable. 

Unfortunately, the general consensus of actual software developers with real-world experience is that all of the above principles are wrong. In fact, taken together, they can be viewed as a convenient fiction. 

In practice, all of the following have been repeatedly demonstrated to be true.

## The Inconvenient Truths

1. Useful software products evolve rapidly and more or less continuously, so defining a ""project"" as a series of development activities with definite start and end dates is typically somewhat arbitrary, and often misleading. 

2. Software requirements are a matter of opinion, and are therefore subjective, largely unbounded, always incomplete, and open to perpetual redefinition and reinterpretation. 

3. Requirements documents for software development efforts of any significant size are generally difficult to understand and interpret consistently, and so offer an entirely misleading sense of control over the software coding activities to follow.

4. The supposed boundaries between requirements, design and coding are entirely porous, with all three ""phases"" of development interacting with and influencing the others.

5. Prioritizing requirements is generally difficult, since every requirement is important to someone, and no one wants to call another's child ugly. 

6. The cost of making software changes has consistently declined, due to the increasing power and sophistication of the languages and tools available to modern developers. And so writing software and then changing it based on reactions from stakeholders is often more efficient than going through elaborate and unreliable paper-based rituals prior to coding. 

7. Any software development effort is either a journey of discovery, or a waste of resources. Either you are creating something new, or you are recreating something that's already been done. If you are creating something new, then you had best be honest that you aren't entirely sure what you're doing, or how long it will take, until you've done it. If you're entirely sure of what you're going to do and when you're going to do it, then you're not developing something, you're just putting a fresh coat of paint on something that already existed. 

8. All software applications are built on top of hardware and software platforms that are themselves highly complex and still rapidly evolving. There are no limitations. There are no hard and fast rules. Everything is malleable, and everything is possible. In this sort of environment, it is folly to try to define some sort of repeatable and stable engineering discipline. 

9. The demonstration of working software is the only reliable indicator of progress in any sort of software development activity. All other avowals of project progress are illusory. 

10. Customers are happiest when the software is adaptive and evolving quickly in response to their explicit and implicit wants and needs. 

Of course, for many of us, none of this comes as a surprise. After all, all of this is why agile software development has emerged and attained such dominant mindshare over the last decade or so. 

So why do I feel the need to restate all of this now? Perhaps it is because, despite the apparent popularity of agile practices, the old myths of predictive development still prove so convenient and comforting. Like beliefs in intelligent design, or in Newtonian physics, they somehow just feel so much more natural and comfortable than their more modern counterparts. 

And so it is tempting from time to time to slip into these old beliefs, and to pretend that we can have our cake and eat it too, be all modern and agile but retain some vestiges of this old predictive waterfall model.  

So perhaps it is important, not just to state our support for agile, but to go through this catechism, to cast out the waterfall devils, to exorcise these ghosts one more time, to remind ourselves that, no matter how convenient and comforting these old beliefs may be, they simply are not true. 
"
Software Development	This Thinking Business	2013-11-23	9 - Closed	Software Development, Thought	"<p>A sure sign of danger on a software development project occurs whenever anyone says, &#8220;Don&#8217;t worry about the problem &#8211; just trust the process.&#8221; </p><br><br><p>This danger is equally present whether the process to be followed is of the waterfall variety, or of an agile persuasion. </p><br><br><p>The chief danger is not in picking the wrong process, but in placing an excess of faith in any process, no matter what it is. </p>
"	"# This Thinking Business

A sure sign of danger on a software development project occurs whenever anyone says, ""Don't worry about the problem -- just trust the process."" 

This danger is equally present whether the process to be followed is of the waterfall variety, or of an agile persuasion. 

The chief danger is not in picking the wrong process, but in placing an excess of faith in any process, no matter what it is. 

[Steve Jobs][jobs] made this point in a comment from <cite>[The Lost Interview][lost]</cite>:

> People get confused... companies get confused. When they start getting bigger they want to replicate their initial success. And a lot of them think, well somehow there's some magic in the process of how that success was created. So they start to try to institutionalize process across the company. And before very long, people get very confused that the process is the content. In my career, I've found that the best people are the ones that really understand the content.... That's what makes good products: it's not process, it's content.

[Fred Brooks][brooks] was more concise, but spoke to the same end, in an [interview][wired] with <cite>Wired</cite> magazine.

> Wired: In your experience, what's the best process for design?

> Brooks: Great design does not come from great processes; it comes from great designers.

Development methods and artifacts are meant to be aids to thinking, not replacements for them. We would be wise to bear in mind the cautionary words of [Michael Innes][innes], British detective author, in his book <cite>[The Seven Suspects][seven]</cite>, written in 1936:

> ""And your remarks on the text,"" Mr. Gott declared, ""are merely a muddle.""

> ""Yes, Gott,"" said Mike meekly.

> ""You see, Mike, you haven't any brain really.""

> ""No, of course not,"" said Mike.

> ""You must just keep to the cackle and write nicely. You write very nicely.""

> ""Yes,"" said Mike, dubiously.

> ""Keep off thinking things out, and you'll do well. In fact, you'll go far.""

Too many development projects, of course, seem to have followed Mr. Gott's advice: they've kept off thinking things out, and have instead kept to the cackle. The cackle could consists of piles and piles of meaningless documents, or mounds of software code that have been produced in numerous brief iterations. And make no mistake, such projects can go very far indeed. In the end, however, the unfortunate result seems to be the same: merely a muddle. 

This thinking thing, though, is a difficult business. 

Here are some words on the topic from another mystery writer, [Dashiell Hammett][hammett], in his book <cite>[The Dain Curse][curse]</cite>, from 1929:

> Nobody thinks clearly, no matter what they pretend. Thinking's a dizzy business, a matter of catching as many of those foggy glimpses as you can and fitting them together the best you can. That's why people hang on so tight to their beliefs and opinions; because, compared to the haphazard way in which they're arrived at, even the goofiest opinion seems wonderfully clear, sane and self-evident. And if you let it get away from you, then you've got to dive back into that foggy muddle to wrangle yourself out another to take its place.

But can it really be this bad? Surely there must be a thinking process we can follow!

Here's a [description of an effective problem-solving process][dymond] used by Nobel Prize winner [Richard Feynman][feynman], as described by another recipient of the award:

> First, he writes down the question on a blackboard or a yellow pad of paper.

> Next, he thinks real hard....

> Then, he writes down the answer.

Perhaps this is why I enjoy mystery novels so much: they show people thinking hard about problems, and the quality and speed of their thought having significant real-world consequences. Because it's been the same story on every successful software development project I've ever worked on.  

I remember visiting the Wright Brothers Memorial in Kitty Hawk a few years back, and reading [some of the details of how these two men discovered the secrets to human flight][kitty]. First, they had to break the problem down into the separate components of lift, thrust and control. Then they had to question all of the conventional wisdom provided to them by others. Then they had to identify design alternatives and determine how well each of them worked.  

The same thinking ""process"" is required on all development projects. We have to break the big problem down into smaller ones. We have to question conventional wisdom. We have to identify design alternatives. And we have to use rational means to decide which of those alternatives will best suit our needs. 

Of course, a series of steps like this is not a mechanical process to be followed mindlessly. It's just a roadmap. Ultimately, we still have to dive into that foggy muddle and wrangle out some answers. And there's no easy way to tell someone how to do that. 

I remember once receiving the most flattering, and the most unexpected, compliment of my life. A trusted colleague I had worked with for several years thanked me for teaching him how to think. 

That floored me. I had never set out with such a goal in mind. And  if I had achieved it, I couldn't tell you how I had done it. 

Of course, upon sober reflection, maybe he really said I had taught him how to drink. We were sitting in a bar at the time, so that could have been the case. We had certainly worked on some projects together that could have driven us to either outcome. 

So, whichever it was, here's to thinking: there's nothing easy about it, but it never goes out of fashion. 




[jobs]: http://en.wikipedia.org/wiki/Steve_Jobs
[lost]: http://www.magpictures.com/stevejobsthelostinterview/

[brooks]: http://en.wikipedia.org/wiki/Fred_Brooks
[wired]:  http://www.wired.com/magazine/2010/07/ff_fred_brooks/

[innes]: http://en.wikipedia.org/wiki/Michael_Innes
[seven]: http://www.amazon.com/exec/obidos/ASIN/0140068864/pagantuna-20

[hammett]: http://en.wikipedia.org/wiki/Dashiell_Hammett
[curse]: http://www.amazon.com/exec/obidos/ASIN/0679722602/pagantuna-20

[feynman]: http://en.wikipedia.org/wiki/Richard_feynman
[dymond]: http://www.amazon.com/exec/obidos/ASIN/0964600803/pagantuna-20

[kitty]: http://www.nps.gov/wrbr/historyculture/solvingtheproblemsofflight.htm
"
Thought	This Thinking Business	2013-11-23	9 - Closed	Software Development, Thought	"<p>A sure sign of danger on a software development project occurs whenever anyone says, &#8220;Don&#8217;t worry about the problem &#8211; just trust the process.&#8221; </p><br><br><p>This danger is equally present whether the process to be followed is of the waterfall variety, or of an agile persuasion. </p><br><br><p>The chief danger is not in picking the wrong process, but in placing an excess of faith in any process, no matter what it is. </p>
"	"# This Thinking Business

A sure sign of danger on a software development project occurs whenever anyone says, ""Don't worry about the problem -- just trust the process."" 

This danger is equally present whether the process to be followed is of the waterfall variety, or of an agile persuasion. 

The chief danger is not in picking the wrong process, but in placing an excess of faith in any process, no matter what it is. 

[Steve Jobs][jobs] made this point in a comment from <cite>[The Lost Interview][lost]</cite>:

> People get confused... companies get confused. When they start getting bigger they want to replicate their initial success. And a lot of them think, well somehow there's some magic in the process of how that success was created. So they start to try to institutionalize process across the company. And before very long, people get very confused that the process is the content. In my career, I've found that the best people are the ones that really understand the content.... That's what makes good products: it's not process, it's content.

[Fred Brooks][brooks] was more concise, but spoke to the same end, in an [interview][wired] with <cite>Wired</cite> magazine.

> Wired: In your experience, what's the best process for design?

> Brooks: Great design does not come from great processes; it comes from great designers.

Development methods and artifacts are meant to be aids to thinking, not replacements for them. We would be wise to bear in mind the cautionary words of [Michael Innes][innes], British detective author, in his book <cite>[The Seven Suspects][seven]</cite>, written in 1936:

> ""And your remarks on the text,"" Mr. Gott declared, ""are merely a muddle.""

> ""Yes, Gott,"" said Mike meekly.

> ""You see, Mike, you haven't any brain really.""

> ""No, of course not,"" said Mike.

> ""You must just keep to the cackle and write nicely. You write very nicely.""

> ""Yes,"" said Mike, dubiously.

> ""Keep off thinking things out, and you'll do well. In fact, you'll go far.""

Too many development projects, of course, seem to have followed Mr. Gott's advice: they've kept off thinking things out, and have instead kept to the cackle. The cackle could consists of piles and piles of meaningless documents, or mounds of software code that have been produced in numerous brief iterations. And make no mistake, such projects can go very far indeed. In the end, however, the unfortunate result seems to be the same: merely a muddle. 

This thinking thing, though, is a difficult business. 

Here are some words on the topic from another mystery writer, [Dashiell Hammett][hammett], in his book <cite>[The Dain Curse][curse]</cite>, from 1929:

> Nobody thinks clearly, no matter what they pretend. Thinking's a dizzy business, a matter of catching as many of those foggy glimpses as you can and fitting them together the best you can. That's why people hang on so tight to their beliefs and opinions; because, compared to the haphazard way in which they're arrived at, even the goofiest opinion seems wonderfully clear, sane and self-evident. And if you let it get away from you, then you've got to dive back into that foggy muddle to wrangle yourself out another to take its place.

But can it really be this bad? Surely there must be a thinking process we can follow!

Here's a [description of an effective problem-solving process][dymond] used by Nobel Prize winner [Richard Feynman][feynman], as described by another recipient of the award:

> First, he writes down the question on a blackboard or a yellow pad of paper.

> Next, he thinks real hard....

> Then, he writes down the answer.

Perhaps this is why I enjoy mystery novels so much: they show people thinking hard about problems, and the quality and speed of their thought having significant real-world consequences. Because it's been the same story on every successful software development project I've ever worked on.  

I remember visiting the Wright Brothers Memorial in Kitty Hawk a few years back, and reading [some of the details of how these two men discovered the secrets to human flight][kitty]. First, they had to break the problem down into the separate components of lift, thrust and control. Then they had to question all of the conventional wisdom provided to them by others. Then they had to identify design alternatives and determine how well each of them worked.  

The same thinking ""process"" is required on all development projects. We have to break the big problem down into smaller ones. We have to question conventional wisdom. We have to identify design alternatives. And we have to use rational means to decide which of those alternatives will best suit our needs. 

Of course, a series of steps like this is not a mechanical process to be followed mindlessly. It's just a roadmap. Ultimately, we still have to dive into that foggy muddle and wrangle out some answers. And there's no easy way to tell someone how to do that. 

I remember once receiving the most flattering, and the most unexpected, compliment of my life. A trusted colleague I had worked with for several years thanked me for teaching him how to think. 

That floored me. I had never set out with such a goal in mind. And  if I had achieved it, I couldn't tell you how I had done it. 

Of course, upon sober reflection, maybe he really said I had taught him how to drink. We were sitting in a bar at the time, so that could have been the case. We had certainly worked on some projects together that could have driven us to either outcome. 

So, whichever it was, here's to thinking: there's nothing easy about it, but it never goes out of fashion. 




[jobs]: http://en.wikipedia.org/wiki/Steve_Jobs
[lost]: http://www.magpictures.com/stevejobsthelostinterview/

[brooks]: http://en.wikipedia.org/wiki/Fred_Brooks
[wired]:  http://www.wired.com/magazine/2010/07/ff_fred_brooks/

[innes]: http://en.wikipedia.org/wiki/Michael_Innes
[seven]: http://www.amazon.com/exec/obidos/ASIN/0140068864/pagantuna-20

[hammett]: http://en.wikipedia.org/wiki/Dashiell_Hammett
[curse]: http://www.amazon.com/exec/obidos/ASIN/0679722602/pagantuna-20

[feynman]: http://en.wikipedia.org/wiki/Richard_feynman
[dymond]: http://www.amazon.com/exec/obidos/ASIN/0964600803/pagantuna-20

[kitty]: http://www.nps.gov/wrbr/historyculture/solvingtheproblemsofflight.htm
"
Business	The Four Essential Attributes of any Organization	2014-08-01	9 - Closed	Business, Leadership	"<p>In order to survive and thrive, any organization must possess the following four characteristics. </p><br><br><ol><br><li>Identity</li><br><li>Integrity</li><br><li>Differentiation</li><br><li>Profitability </li><br></ol>
"	"# The Four Essential Attributes of any Organization

In order to survive and thrive, any organization must possess the following four characteristics. 

## 1. Identity

An organization must know who they are. This is critical in all of the following areas:

* Internal alignment within the existing organization;
* Growth and sustainment of the organization through employee acquisition and retention;
* Trust and credibility with customers;
* Selection and teaming with suppliers and business partners. 

Note that an organization may have an unconscious identity as well as a conscious identity. The conscious identity is frequently based on official pronouncements and intentional efforts by leadership to establish organizational direction. On the other hand, the unconscious identity -- which may be much more powerful -- consists of all the things that employees tell each other around the water cooler, and the messages they communicate to new employees in subtle and not-so-subtle ways, through their words and actions. 

## 2. Integrity

By integrity, I mean conformity with your identity through words and deeds. The organization must walk its talk. After saying ""this is who we are,"" it must henceforth act in conformity with that sense of organizational self. Another way of saying this is that the organizational identity must truly be a guiding force in the organization. 

If an organization lacks integrity, then it will be difficult to maintain a sense of identity, and the value of that identity will be diluted. 

Of course, moral integrity is one piece of this broader, more encompassing integrity -- always assuming that ethical and upright behavior is one element of the organization's identity. 

## 3. Differentiation

In order to succeed, an organization must be different from its competition in one or more ways. This starts with the organizational identity. If you try to define a vague identity on being the best, or the most agile, or the most efficient, then even though all of the words may sound nice, they may not create enough differentiation from your competition to allow you to survive and thrive in the marketplace. 

## 4. Profitability

Finally, of course, your organization has to balance its books. If you're a non-profit, you just need to bring in as much money as you spend. If you're a for-profit organization, then you must generate sufficient profit to attract and retain investors. 

----

Note that all four of the attributes listed above are absolutely essential for any organization. And keep in mind also that profitability is only one of the four. It's important for an organization to generate income in sufficient quantities to justify its existence, but an organization must not confuse profitability with identity, and certainly shouldn't confuse it with differentiation. 

Your organization probably has a Chief Financial Officer. But does it have a Chief Identity Officer? A VP of Integrity? A Director of Differentiation? The responsibility for these other attributes is generally more diffuse, and may legitimately rest on the shoulders of the senior leadership team as a whole. Nonetheless, the importance of all four attributes must not be forgotten, and sufficient attention should be paid to the health and development of all four of these critical characteristics in order for an organization to be successful. 
"
Leadership	The Four Essential Attributes of any Organization	2014-08-01	9 - Closed	Business, Leadership	"<p>In order to survive and thrive, any organization must possess the following four characteristics. </p><br><br><ol><br><li>Identity</li><br><li>Integrity</li><br><li>Differentiation</li><br><li>Profitability </li><br></ol>
"	"# The Four Essential Attributes of any Organization

In order to survive and thrive, any organization must possess the following four characteristics. 

## 1. Identity

An organization must know who they are. This is critical in all of the following areas:

* Internal alignment within the existing organization;
* Growth and sustainment of the organization through employee acquisition and retention;
* Trust and credibility with customers;
* Selection and teaming with suppliers and business partners. 

Note that an organization may have an unconscious identity as well as a conscious identity. The conscious identity is frequently based on official pronouncements and intentional efforts by leadership to establish organizational direction. On the other hand, the unconscious identity -- which may be much more powerful -- consists of all the things that employees tell each other around the water cooler, and the messages they communicate to new employees in subtle and not-so-subtle ways, through their words and actions. 

## 2. Integrity

By integrity, I mean conformity with your identity through words and deeds. The organization must walk its talk. After saying ""this is who we are,"" it must henceforth act in conformity with that sense of organizational self. Another way of saying this is that the organizational identity must truly be a guiding force in the organization. 

If an organization lacks integrity, then it will be difficult to maintain a sense of identity, and the value of that identity will be diluted. 

Of course, moral integrity is one piece of this broader, more encompassing integrity -- always assuming that ethical and upright behavior is one element of the organization's identity. 

## 3. Differentiation

In order to succeed, an organization must be different from its competition in one or more ways. This starts with the organizational identity. If you try to define a vague identity on being the best, or the most agile, or the most efficient, then even though all of the words may sound nice, they may not create enough differentiation from your competition to allow you to survive and thrive in the marketplace. 

## 4. Profitability

Finally, of course, your organization has to balance its books. If you're a non-profit, you just need to bring in as much money as you spend. If you're a for-profit organization, then you must generate sufficient profit to attract and retain investors. 

----

Note that all four of the attributes listed above are absolutely essential for any organization. And keep in mind also that profitability is only one of the four. It's important for an organization to generate income in sufficient quantities to justify its existence, but an organization must not confuse profitability with identity, and certainly shouldn't confuse it with differentiation. 

Your organization probably has a Chief Financial Officer. But does it have a Chief Identity Officer? A VP of Integrity? A Director of Differentiation? The responsibility for these other attributes is generally more diffuse, and may legitimately rest on the shoulders of the senior leadership team as a whole. Nonetheless, the importance of all four attributes must not be forgotten, and sufficient attention should be paid to the health and development of all four of these critical characteristics in order for an organization to be successful. 
"
Leadership	The Primary Functions of Management	2014-09-08	9 - Closed	Leadership	"<p>It occurred to me recently that there are really three essential functions of management. </p><br><br><p><strong>Strategy</strong>: setting a direction for your organization.</p><br><br><p><strong>Alignment</strong>: getting organizational resources lined up to execute the strategy. </p><br><br><p><strong>Execution</strong>: delivering expected results as part of the fulfillment of your strategy.</p><br><br><p>One might argue that there are many more functions of management, but I think it is helpful to understand that these three are the primary and in fact essential functions, and that all the other things managers do must be understood to support one or more of these three functions.  </p><br><br><p>Let&#8217;s take a look, then, at the essential nature of these three functions. </p>
"	"It occurred to me recently that there are really three essential functions of management. 

**Strategy**: setting a direction for your organization.

**Alignment**: getting organizational resources lined up to execute the strategy. 

**Execution**: delivering expected results as part of the fulfillment of your strategy.

One might argue that there are many more functions of management, but I think it is helpful to understand that these three are the primary and in fact essential functions, and that all the other things managers do must be understood to support one or more of these three functions.  

Let's take a look, then, at the essential nature of these three functions. 

## Strategy

A strategy defines an approach for delivering superior value to your customers. A strategy must answer the following questions:

* Who are our future customers? 
* How can we provide them with greater value than they have today?
* How can we provide them with greater value than that available from our competitors?
* What is our approach? What makes us think it will work? 
* What do we expect to achieve?  
* What resources will we need in order to execute the strategy?

If you don't have well researched and reasoned answers to all of the questions above, then at best you have an incomplete strategy, and at worst you have no strategy at all. 

Note that an aspirational use of superlatives should not be confused with a strategy: saying that you are going to be the greatest little xyz in the land is a nice sentiment, but meaningless in the strategy department. 

Strategies can and should exist at many levels of the organization, so long as the strategies are consistent with one another. Note, though, that each strategy must exist at the top of *an* organization; so while it is fashionable in business today to say that leadership is everywhere, and we are all leaders, we should not all be setting strategy, for if everyone is left to devise their own strategy, then the the organization has no strategy at all. 

Strategy requires a leader to look forward into the future, since any successful strategy must anticipate emerging opportunities, changes in customer demographics and desires, and evolving capabilities of the competition. 

We must also understand that strategies grow stale over time, as business conditions change, as new competitors emerge, and as customer interests evolve.  

If we understand strategy as described above, then it should be clear that strategy is essential: otherwise your organization is like a ship without a captain to set its course, and such a ship is much more likely to founder upon the rocks than to reach any desirable destination.

## Alignment

Organizational alignment to the strategy is the necessary next step in achieving desirable results; organizational resources, in terms of dollars, hours and energy, must be focused on the various elements of your strategy. In practice, this usually means that expenditure of these scarce resources in other areas must stop, in order to bring your strategy to fruition. 

Alignment is the function that falls primarily on the shoulders of middle management; in fact, this is what we generally mean by middle management, for these are the people who have strategy set above them, and execution resources operating below them, so it is their job to communicate the strategy, and make sure that operational resources are working in alignment to those strategies. 

It would be a mistake, though, to think that a particular level on an org chart is limited to performing a particular function. For one, it is often the role of top executives to help align those in the organization to a dramatic new strategy. And it is often the case as well that it may fall to the shoulders of many levels of management to devise a strategy for success within their own corners of the organization (one that is, of course, in alignment with higher-level strategies).

In order to achieve alignment, a manager must do all of the following.

* Understand the strategy; 
* Communicate the strategy, not just as handed down in stone from on high, but by putting it into words and concepts meaningful to those receiving the communication;
* Understand where resources are currently misaligned;
* Take whatever means are necessary to bring resources into alignment with the strategy. 

Note that alignment is often difficult and risky work. As one example, see this captivating [YouTube video](http://youtu.be/FF-tKLISfPE) of Steve Jobs at the 1997 Apple World Wide Developers Convention, working to bring Apple developers into alignment with the company's new strategy. Or, for that matter, see this [video](http://youtu.be/4Dux4ugCoXM) showing how Bo Schembechler brought his defensive captain onboard with his strategy for the 1980 Michigan football team. 

## Execution

Once resources are aligned with the strategy, then those resources must perform their particular organizational functions efficiently and effectively.

Unlike strategy, which is forward-looking, execution requires a tactical focus on the people, materials, methods and tools at work in the current timeframe. 

## Some Useful Observations

1. If you are not seeing the results you would like in some part of your organization, then it is worth asking whether the problems primarily stem from a flawed strategy, lack of alignment to that strategy, or to poor execution. If your strategy is poor, or if your resources are not aligned to your strategy, then improved execution probably won't help. 

2. If you are unsure whether a certain decision has to do with elements of strategy, then ask yourself whether that decision  affects your resource allocation. If a decision requires you to acquire or get rid of resources, or to change the types of resources you are using, or to reassign resources to a different statement of work, then it is probably a decision that involves some elements of strategy.  

3. As a manager, at any level of an organization, you always need to maintain an awareness of which function you are being called upon to perform in any situation. If a strategy has been set at a higher level, then it is part of your job to align resources to that strategy (or to convince your leadership that they should adopt a better strategy). 
"
Software Development	Polarities in Software Development	2014-11-19	9 - Closed	Software Development	"<p>I&#8217;ve written in the past about the importance of understanding polarities and how they need to be managed. </p><br><br><p>My previous post involving Polarity Management concerned process improvement, but the topic is equally relevant to other aspects of software development. </p><br><br><p>A polarity is most simply defined as a complex problem that has no solution. It might also be stated as an either/or question that has no single right answer. A more complete definition might be &#8220;A set of two opposing or contradictory extremes permitting wide variation along a spectrum of choices, with both opposing poles offering advantages and disadvantages.&#8221;</p><br><br><p>The pros and cons of a polarity are often represented in the form of a polarity map, in which each quadrant represents the pros or cons of one pole or another.  </p><br><br><p>Now that we know what a polarity is, let&#8217;s look at a number of different polarities that need to be commonly addressed during a software development project. </p>
"	"I've written in the past about the importance of understanding polarities and how they need to be managed. 

My [previous post](http://www.pagantuna.com/posts/the-progress-polarity.html) involving [Polarity Management](http://www.polaritypartnerships.com/) concerned process improvement, but the topic is equally relevant to other aspects of software development. 

A polarity is most simply defined as a complex problem that has no solution. It might also be stated as an either/or question that has no single right answer. A more complete definition might be ""A set of two opposing or contradictory extremes permitting wide variation along a spectrum of choices, with both opposing poles offering advantages and disadvantages.""

The pros and cons of a polarity are often represented in the form of a polarity map, in which each quadrant represents the pros or cons of one pole or another, as in the following example. The flowing arrows are meant to represent the ongoing dynamic process of seeking the optimal balance point at which the pros are maximized and the cons are minimized.  

![Sample Polarity Map](http://pagantuna.com/images/polarity-map.jpg)

Now that we know what a polarity is, let's look at a number of different polarities that need to be commonly addressed during a software development project. 

## Common Polarities

### 1. Requirements Detail

Alan M. Davis describes this polarity in his book <cite>[Just Enough Requirements Management: Where Software Meets Marketing](http://www.amazon.com/dp/0932633641/)</cite>:

> If you do not pay enough attention to requirements, you endanger the project's success by introducing too much risk. If you pay too much attention to requirements, you overburden the project and raise the likelihood of being late and over-budget. 

Suzanne and James Robertson [speak to the same polarity](http://www.infoq.com/articles/mastering-requirements-process) in their book, <cite>[Mastering the Requirements Process](http://www.amazon.com/dp/0321815742/)</cite>, through use of animal analogies:

> We are asking the reader to consider his or her project. Is it a small, fast, short-lived project? If so it is a rabbit project and you should do only certain things and omit others. For example, we suggest that rabbit projects should certainly discover all their requirements, but that they do not have to write a comprehensive specification. Rabbit projects can abbreviate their specification.
>
> On the other hand, if you are outsourcing or are working on a military, medical or some government projects, you are an elephant. Elephants are slower and larger and have a need for formal documentation (try getting a new airplane past the FAA without a complete specification).

### 2. Agility vs. Discipline

In their book <cite>[Balancing Agility and Discipline: A Guide for the Perplexed](http://www.amazon.com/dp/0321186125/)</cite>, Barry Boehm and Richard Turner frame this polarity using the following examples:

> Real-world examples argue both for and against agile methods. Responding to change is a critical success factor in many time-critical projects and was cited as a driver in the Netscape-Microsoft browser wars. On the other hand, over-responding to change was one of the identified causes for the $3 billion overrun of the U.S. Federal Aviation Administration's Advanced Automation System for national air traffic control. We believe that common sense dictates the evaluation of both approaches for incorporation within the project manager's technical and managerial toolbox. 

### 3. Project Size

Large projects can address more ambitious work statements and, in theory, can optimize their use of resources to deliver the most benefit for the least cost. Smaller projects, on the other hand, carry a higher probability of successful completion, and can deliver benefits in a more timely fashion. 

According to the the latest [report from the Standish Group](http://www.versionone.com/assets/img/files/CHAOSManifesto2013.pdf):

> Large projects have twice the chance of being late, over budget, and missing critical features than their smaller project counterparts.

At the same time, breaking a large project into smaller chunks often introduces some inefficiencies, and so may tend to drive up overall costs and durations. 

### 4. Team Empowerment vs. Direction from Above

Teams that are overly constrained by their leadership are not likely to get much accomplished. On the other hand, teams that are given free rein to do whatever they think important may fail to meet objectives important to the organization as a whole. 

### 5. Pleasing the Customer

If a team doesn't please their primary customers, then they will not get very far. On the other hand, if they focus exclusively on pleasing their primary customers, then they may fail to meet governance and compliance requirements imposed on their projects by other stakeholders, and may overlook opportunities for breakthrough innovation. 

### 6. Invention vs. Reuse

Reuse of existing software can reduce costs, but can also put limits on a team's ability to innovate. 

### 7. Urgency vs. Careful Deliberation

Measuring twice before cutting once may reduce the potential for errors and rework, but delivering usable results quickly may meet pressing business needs more expeditiously than a long, deliberative development cycle. 

### 8. Predictive Accuracy vs. Speed of Execution

Doing careful estimates and refining them as you proceed will maximize your chances of performing to your plan. On the other hand, ""Just Do It"" may be more appropriate for efforts that need to complete quickly, even if their costs are higher than anticipated. 

### 9. Achievement of Strategic Goals vs. Tactical Objectives

Long-term strategic visions can offer compelling, sweeping changes, but achievement of short-term tactical objectives can often be done at lower cost and risk and with more timely and reliable delivery of benefits. 

## Implications

Each of these polarities requires a project's leadership to strike a balance that maximizes the advantanges for their particular project, and minimizes the disadvantages. All of these decisions involve trade-offs. There are no perfect answers. If you can approach polarities with this understanding, then you have a decent chance of coming up with reasonable answers that will allow your project to succeed. On the other hand, if you insist on making some of these poles sacred cows that can't be questioned, then your project is likely to run into problems.  

Balancing these polarities appropriately requires judgment. Such judgment is usually best wielded by an individual, or a small group of like-minded leaders who work well together. Since an absolute principle often sounds intuitively more appealing than a balanced middle ground, larger groups and those less well acquainted with project details may have a harder time making these sorts of finely calibrated judgments. For this reason, in my experience, it is hard for projects to receive much of this sort of help from those working in executive leadership or governance or oversight roles, or from committees of any kind. 

I have also found that traditional risk management often fails to help achieve appropriate balance on any of these polarities, since risk mitigation efforts often simply serve as rationalizations for staying the current course on the project, rather than making any true course corrections by re-balancing any of these polarities. 

While Barry Goldwater may have famously said that ""extremism in defense of liberty is no vice,"" I am strongly suggesting that extremism in defense of any of these poles on a software development project is very likely to be a vice. This is not to say that it's best to always proceed down the middle of the road, but that it's best to always have an informed, open-minded approach to achieving appropriate balance of all these polarities, in light of the characteristics of a particular project. 

Software development is difficult enough under the best of circumstances. Turning any of these poles into absolute principles, to be defended as fundamental articles of faith, is likely to burden your software development project with more problems than it can handle. 
"
Quality	Software Defects	2014-12-04	9 - Closed	Quality, Software Development	"<p>Some of the most troublesome topics in software development are those surrounding defects:</p><br><br><ul><br><li>Why do defects happen?</li><br><li>How can we prevent them?</li><br><li>Can they be eliminated?</li><br><li>What metrics can we use to measure our success (or lack thereof)? </li><br></ul><br><br><p>Let me introduce my thoughts on this topic with a little story.</p>
"	"# Software Defects

Some of the most troublesome topics in software development are those surrounding defects:

* Why do defects happen?
* How can we prevent them?
* Can they be eliminated?
* What metrics can we use to measure our success (or lack thereof)? 

Let me introduce my thoughts on this topic with a little story.

When I started my career, programmers were still using coding sheets that were sent to keypunch operators to be converted into punched cards. The card decks were then sent to a mainframe to be compiled. There were few if any defects introduced by the keypunch operators, because at that time every punched card was independently verified by another operator, who essentially re-keyed every character on every line of every coding sheet. So the first set of errors, or defects, that a programmer normally had to deal with were the syntax and spelling errors found by the compiler. 

My programming group at that time had one member who was known for first-time quality. He performed extensive desk checks of his coding sheets before sending them to keypunch, and as a result almost all of his programs sailed through the compilation step without generating any errors at all. 

Of course, if you ever went out to lunch with this guy, you would discover that he never made a left-hand turn, but instead would invariably make three right-hand turns, because that way he never had to turn in front of oncoming traffic! 

If I seem to be boring you with ancient personal history, it's only because the simple story above illustrates most of the basic issues still surrounding software defects today. 

1. Humans will make errors. 

2. There are various types of errors that can be made. 

3. Many forms of defect prevention require an explicit inspection of the original work, either by the original worker or by a peer. 

4. Automation should be used as much as possible to prevent as many types of errors as practical. 

5. The sooner an error can be detected and corrected, the cheaper it will be to fix. 

6. There are trade-offs to be made between the costs of prevention and the risks of failures; risks should be reduced to a reasonable level, but the costs of prevention should not become unreasonable in the process. 

All of this sounds pretty straightforward, and yet issues surrounding defects still seem to regularly generate lots of controversy in software development discussions. 

Here are a few general recommendations.

## 1. Use the Cost of Quality as a conceptual model.

Although it is not often practical to calculate such a cost with any precision, the idea of trying to minimize the overall ""[Cost of Quality](http://en.wikipedia.org/wiki/Quality_costs)"" is still a useful concept for consideration by teams and organizations. Discussing test automation, peer reviews, and pair programming may prove controversial, but people should be able to reach some common ground once they agree that the overall goal is to reduce the total cost of quality, including both costs of appraisal and prevention, as well as direct and indirect costs associated with software failures. 

## 2. Allow the development team to self-manage defects that are contained within the team.

It is occasionally tempting for upper management or well-intended governance bodies to try to mandate certain internal quality (i.e., defect prevention) practices and metrics across an entire software organization. This may work well if all the teams are really doing very similar kinds of work on pieces of a unified product, but in other situations (such as many large and diverse IT organizations), my strong sense is that such policies do more damage, in terms of compromising each team's sense of autonomy, than they do good. It is easier to measure a team's performance in terms of productivity or cycle time than to try to make some meaningful sense of how each team internally deals with defect identification and correction. 

## 3. Do not confuse consideration of design alternatives with rework. 

Many projects can benefit from some quick elaboration of design alternatives (aka rapid prototyping) in order to allow stakeholders to more meaningfully evaluate those alternatives. Even though this may result in some work being ""thrown away,"" none of this should be treated as work associated with the creation or correction of defects. Such work is part of the cost of design, not the cost of quality. 

Unfortunately, many agile teams simply treat consideration of design alternatives as something that is part and parcel of their iterative development process; this is unfortunate because it then becomes difficult to disentangle team design and quality practices in any meaningful manner. If you're in a situation where all software changes (including correction of defects and changes in design) are simply treated as more grist for the development team's backlog, then you know you're in this situation, and you should try to get out of it. 

## 4. Focus organizational attention on defects that impact others outside of the dev team.

Defects that ""escape"" from a dev team and cause negative impacts to others (customers, users, integrated test teams, etc.) should be rigorously measured and tracked and managed at an organizational level. 

## 5. Differentiate between varying severity levels. 

All defects are not created equal. Any sort of reporting and metrics systems should be sure to assign appropriate weights to defects based on their severity. While wording may vary, a scale similar to the following is often used. 

1. The system was rendered totally inoperable or unusable. 
2. A significant portion of the system was unavailable or unusable. 
3. The entire system was available and usable, but with some significant degradation of performance or functionality. 
4. Problems were only cosmetic in nature. 

## 6. Perform causal analysis for quality escapes. 

For software defects that escape into the wild, it is useful to ask why they happened, and what could have prevented them. 

This sort of analysis is typically referred to as [Root Cause Analysis](http://en.wikipedia.org/wiki/Root_cause_analysis), however the focus should not be on coming up with a single root cause, but with as many actionable causes as possible, along with reasonable actions that will reduce the likelihood of recurrence of the same or similar problems in the future. 

When performing this sort of causal analysis, it may be useful to ask a more specialized variation of the usual [Five Whys](http://en.wikipedia.org/wiki/5_Whys) that are typically invoked for this sort of work. 

* Why did the overall system/service fail? Which component(s) (hardware, network, system software, application software, etc.) were at fault?

* Why is this problem considered a defect? Was it a sin of omission, an error in the way a feature was implemented, or an additional feature that was not requested? 

* What sorts of problems were noted? Did the system crash, or fail to operate at all? Or did it run, but with degraded performance? Or were the problems functional, rather than operational?

* Why did the failure occur at this point in time? Was it caused by a recent change to the software? Or a recent change to the infrastructure? Or a change in user processes and practices? 

* Were there integration issues between components? In other words, did the components appear to operate correctly when tested independently, but fail when used in combination? If so, why weren't these integration issues identified and addressed earlier?

* Were there unanticipated changes in functional or operational expectations for the software? In other words, did the requirements change without those responsible for the software knowing about the change? If so, then why weren't the changing requirements communicated?

* Why weren't the defects discovered during testing?  

* If the defect occurred because of recent changes to the software, then why was the defect introduced? Was it injected during coding (a coding error), during design (a design error), or during requirements elicitation and definition (a requirements error)? What would help prevent recurrence in the future? Is further education needed? Or additional reviews of code and/or documents? Are there automated tools that can help? 

If you ask these questions, and get some reasonable answers, then you should be able to identify some meaningful actions to be taken to help prevent a recurrence of similar sorts of problems in the future. 

## 7. Make metrics simple and meaningful. 

It would certainly be possible to create a comprehensive system of data collection and metrics reporting that would answer all possible questions about all defects found and corrected for any particular set of systems. But the necessary level of effort might not actually provide any commensurate level of benefits. 

Again, my advice would be to make a clean separation between defects caught internally, vs. quality escapes. For the former, I would suggest that each development team be allowed to establish and track their own metrics. 

For quality escapes, my advice would be to use something like the [GQM](http://en.wikipedia.org/wiki/GQM) (Goal-Question-Metric) approach in order to provide focus for your metrics collection and reporting efforts. In other words, start with a goal, or a small number of goals. For each goal, what sort of questions would you like to be able to answer to find out how you're doing on the way to meeting that goal? And then what metrics will help you answer those questions? 

----

The first programmers were able to blame their problems on actual insects crawling around inside their computing hardware; these days, however, everyone knows that software bugs should not be treated as a branch of entomology. How they should be treated, however, is often a topic of much debate. Hopefully the comments above can help to steer such conversations into productive channels. 
"
Software Development	Software Defects	2014-12-04	9 - Closed	Quality, Software Development	"<p>Some of the most troublesome topics in software development are those surrounding defects:</p><br><br><ul><br><li>Why do defects happen?</li><br><li>How can we prevent them?</li><br><li>Can they be eliminated?</li><br><li>What metrics can we use to measure our success (or lack thereof)? </li><br></ul><br><br><p>Let me introduce my thoughts on this topic with a little story.</p>
"	"# Software Defects

Some of the most troublesome topics in software development are those surrounding defects:

* Why do defects happen?
* How can we prevent them?
* Can they be eliminated?
* What metrics can we use to measure our success (or lack thereof)? 

Let me introduce my thoughts on this topic with a little story.

When I started my career, programmers were still using coding sheets that were sent to keypunch operators to be converted into punched cards. The card decks were then sent to a mainframe to be compiled. There were few if any defects introduced by the keypunch operators, because at that time every punched card was independently verified by another operator, who essentially re-keyed every character on every line of every coding sheet. So the first set of errors, or defects, that a programmer normally had to deal with were the syntax and spelling errors found by the compiler. 

My programming group at that time had one member who was known for first-time quality. He performed extensive desk checks of his coding sheets before sending them to keypunch, and as a result almost all of his programs sailed through the compilation step without generating any errors at all. 

Of course, if you ever went out to lunch with this guy, you would discover that he never made a left-hand turn, but instead would invariably make three right-hand turns, because that way he never had to turn in front of oncoming traffic! 

If I seem to be boring you with ancient personal history, it's only because the simple story above illustrates most of the basic issues still surrounding software defects today. 

1. Humans will make errors. 

2. There are various types of errors that can be made. 

3. Many forms of defect prevention require an explicit inspection of the original work, either by the original worker or by a peer. 

4. Automation should be used as much as possible to prevent as many types of errors as practical. 

5. The sooner an error can be detected and corrected, the cheaper it will be to fix. 

6. There are trade-offs to be made between the costs of prevention and the risks of failures; risks should be reduced to a reasonable level, but the costs of prevention should not become unreasonable in the process. 

All of this sounds pretty straightforward, and yet issues surrounding defects still seem to regularly generate lots of controversy in software development discussions. 

Here are a few general recommendations.

## 1. Use the Cost of Quality as a conceptual model.

Although it is not often practical to calculate such a cost with any precision, the idea of trying to minimize the overall ""[Cost of Quality](http://en.wikipedia.org/wiki/Quality_costs)"" is still a useful concept for consideration by teams and organizations. Discussing test automation, peer reviews, and pair programming may prove controversial, but people should be able to reach some common ground once they agree that the overall goal is to reduce the total cost of quality, including both costs of appraisal and prevention, as well as direct and indirect costs associated with software failures. 

## 2. Allow the development team to self-manage defects that are contained within the team.

It is occasionally tempting for upper management or well-intended governance bodies to try to mandate certain internal quality (i.e., defect prevention) practices and metrics across an entire software organization. This may work well if all the teams are really doing very similar kinds of work on pieces of a unified product, but in other situations (such as many large and diverse IT organizations), my strong sense is that such policies do more damage, in terms of compromising each team's sense of autonomy, than they do good. It is easier to measure a team's performance in terms of productivity or cycle time than to try to make some meaningful sense of how each team internally deals with defect identification and correction. 

## 3. Do not confuse consideration of design alternatives with rework. 

Many projects can benefit from some quick elaboration of design alternatives (aka rapid prototyping) in order to allow stakeholders to more meaningfully evaluate those alternatives. Even though this may result in some work being ""thrown away,"" none of this should be treated as work associated with the creation or correction of defects. Such work is part of the cost of design, not the cost of quality. 

Unfortunately, many agile teams simply treat consideration of design alternatives as something that is part and parcel of their iterative development process; this is unfortunate because it then becomes difficult to disentangle team design and quality practices in any meaningful manner. If you're in a situation where all software changes (including correction of defects and changes in design) are simply treated as more grist for the development team's backlog, then you know you're in this situation, and you should try to get out of it. 

## 4. Focus organizational attention on defects that impact others outside of the dev team.

Defects that ""escape"" from a dev team and cause negative impacts to others (customers, users, integrated test teams, etc.) should be rigorously measured and tracked and managed at an organizational level. 

## 5. Differentiate between varying severity levels. 

All defects are not created equal. Any sort of reporting and metrics systems should be sure to assign appropriate weights to defects based on their severity. While wording may vary, a scale similar to the following is often used. 

1. The system was rendered totally inoperable or unusable. 
2. A significant portion of the system was unavailable or unusable. 
3. The entire system was available and usable, but with some significant degradation of performance or functionality. 
4. Problems were only cosmetic in nature. 

## 6. Perform causal analysis for quality escapes. 

For software defects that escape into the wild, it is useful to ask why they happened, and what could have prevented them. 

This sort of analysis is typically referred to as [Root Cause Analysis](http://en.wikipedia.org/wiki/Root_cause_analysis), however the focus should not be on coming up with a single root cause, but with as many actionable causes as possible, along with reasonable actions that will reduce the likelihood of recurrence of the same or similar problems in the future. 

When performing this sort of causal analysis, it may be useful to ask a more specialized variation of the usual [Five Whys](http://en.wikipedia.org/wiki/5_Whys) that are typically invoked for this sort of work. 

* Why did the overall system/service fail? Which component(s) (hardware, network, system software, application software, etc.) were at fault?

* Why is this problem considered a defect? Was it a sin of omission, an error in the way a feature was implemented, or an additional feature that was not requested? 

* What sorts of problems were noted? Did the system crash, or fail to operate at all? Or did it run, but with degraded performance? Or were the problems functional, rather than operational?

* Why did the failure occur at this point in time? Was it caused by a recent change to the software? Or a recent change to the infrastructure? Or a change in user processes and practices? 

* Were there integration issues between components? In other words, did the components appear to operate correctly when tested independently, but fail when used in combination? If so, why weren't these integration issues identified and addressed earlier?

* Were there unanticipated changes in functional or operational expectations for the software? In other words, did the requirements change without those responsible for the software knowing about the change? If so, then why weren't the changing requirements communicated?

* Why weren't the defects discovered during testing?  

* If the defect occurred because of recent changes to the software, then why was the defect introduced? Was it injected during coding (a coding error), during design (a design error), or during requirements elicitation and definition (a requirements error)? What would help prevent recurrence in the future? Is further education needed? Or additional reviews of code and/or documents? Are there automated tools that can help? 

If you ask these questions, and get some reasonable answers, then you should be able to identify some meaningful actions to be taken to help prevent a recurrence of similar sorts of problems in the future. 

## 7. Make metrics simple and meaningful. 

It would certainly be possible to create a comprehensive system of data collection and metrics reporting that would answer all possible questions about all defects found and corrected for any particular set of systems. But the necessary level of effort might not actually provide any commensurate level of benefits. 

Again, my advice would be to make a clean separation between defects caught internally, vs. quality escapes. For the former, I would suggest that each development team be allowed to establish and track their own metrics. 

For quality escapes, my advice would be to use something like the [GQM](http://en.wikipedia.org/wiki/GQM) (Goal-Question-Metric) approach in order to provide focus for your metrics collection and reporting efforts. In other words, start with a goal, or a small number of goals. For each goal, what sort of questions would you like to be able to answer to find out how you're doing on the way to meeting that goal? And then what metrics will help you answer those questions? 

----

The first programmers were able to blame their problems on actual insects crawling around inside their computing hardware; these days, however, everyone knows that software bugs should not be treated as a branch of entomology. How they should be treated, however, is often a topic of much debate. Hopefully the comments above can help to steer such conversations into productive channels. 
"
Software Development	Maximizing Returns on Software Development Investments	2014-12-14	9 - Closed	Software Development	"<p>I sometimes wonder if many of us in Information Technology are yet taking an informed perspective when contemplating investments in new software development efforts. Here are several things I think we should be keeping in mind. </p>
"	"# Maximizing Returns on Software Development Investments

I sometimes wonder if many of us in Information Technology are yet taking an informed perspective when contemplating investments in new software development efforts. Here are several things I think we should be keeping in mind. 

## 1. Develop on the Current Frontier

The IT era has proceeded in waves. Roughly speaking, we can think of automation proceeding through the following stages of development. 

* Back-office calculations 
* Back-office data storage 
* Office productivity 
* Global information sharing 
* Consumer interactions

Why is this relevant in a discussion of software development efforts? 

Because most big investments will be made in building out the current wave, since this is the area that actually provides the greatest opportunities for large rewards. Going back into prior waves and investing large amounts in redoing work that's already been done will rarely if ever be a smart investment decision. 

## 2. Don't Reinvent the Wheel

Make the widest possible use of code already developed. Operating systems, database systems, application frameworks, development tools, applications and a whole host of other categories of software have already been written. Your development team should probably not be rewriting any of this stuff.

Focus your development activities on new software unlike anything that's been written before -- at least in some essential respect. Stand on the shoulders of giants that have come before -- don't try to stand next to them. 

## 3. Respect the Long Tail of IT Costs

Most software development investment decisions are based on the estimates of costs for initial development, offset by some relatively near-term financial rewards. 

What gets ignored are the costs of sustaining a set of features over a decade or two or three, including data storage, backup and archival costs, as well as the cost of maintaining the software. 

Be sure and take all these costs into account when calculating any potential return on your investment. 

## 4. Focus Investment Dollars on High-Value Features

Any piece of software can be thought of as a collection of features. If your feature list contains every item that anyone ever thought to ask for, then it contains way too much. Each feature has some incremental cost, and the maintenance costs for your software tend to grow exponentially as you add new features, due to the increasing complexity of the system as a whole. 

Apple has [taken a lot of heat in recent years](http://www.theverge.com/2013/10/29/5042880/apple-iwork-2013-refresh-complaints) for releasing new versions of software that removed features rather than adding new ones, but this sort of careful pruning is sometimes necessary to create and maintain a coherent code base that can be reasonably maintained by a small team of developers over the long term. 

Continually adding new features, and carrying forward every feature ever developed for any user in the past, is a recipe for maintenance costs that will snowball over time. 

## Implications for System Rewrites

Note that all of the above principles are reasons to beware the [second system syndrome](http://en.wikipedia.org/wiki/Second-system_effect). If you tackle a complete rewrite of an existing system in order to retire technical debt and/or aging technology, then you are probably:

1. not working at the frontier;
2. reinventing an already serviceable wheel; 
3. introducing new issues that will keep maintenance costs high for an extended period; 
4. spending valuable investment dollars in carrying forward all existing features as well as adding new ones. 

## Implications for IT Governance

Many [IT governance](http://en.wikipedia.org/wiki/Corporate_governance_of_information_technology) functions operate like bankers: they look at the estimated investment requirements, the anticipated returns, and the resulting hockey stick chart, and decide to fund or not to fund -- as if these were the only relevant factors. 

I wonder if it isn't time for IT governance bodies to start acting more like venture capitalists. Everyone in the industry has been moaning for decades now about the high failure rates for IT projects (usually in order to sell us some new panacea that seems to help for a while, but does little in the long run to move the needle). But maybe IT projects -- like entrepreneurial startups -- are inherently risky investments. And so perhaps the job of an IT governance body should be to look for projects where the high opportunities for return outweigh the risks of failure -- just as a venture capitalist does when evaluating potential investment opportunities. 

If our corporate IT investment boards started operating more like [Shark Tank](http://www.cnbcprime.com/shark-tank) -- taking risk factors like the ones above into account -- then perhaps we would see better overall returns on our software development investments.  
"
Agile	Benefits of the Scaled Agile Framework	2015-03-21	9 - Closed	Agile	"<p>For those who have not yet heard of it, the Scaled Agile Framework, or SAFe&reg; for short, is a &#8220;publicly available framework for applying lean/agile practices at Enterprise scale.&#8221; </p><br><br><p>I believe that the SAFe model offers a number of benefits to those who may be considering its use. Let me enumerate them. </p><br><br><h2>1. It is publicly available and free to use.</h2>
"	"For those who have not yet heard of it, the Scaled Agile Framework, or [SAFe][]&reg; for short, is a ""publicly available framework for applying lean/agile practices at Enterprise scale."" 

I believe that the SAFe model offers a number of benefits to those who may be considering its use. Let me enumerate them. 

## 1. It is publicly available and free to use. 

While the SAFe materials are protected by copyright, with restrictions that prevent others from modifying the materials or redistributing them, the entirety of SAFe is available at [ScaledAgileFramework.com][safe], along with the permissive statement that ""all enterprises and practitioners can use any of the concepts and ideas on the site, and even implement the framework know-how described on the site, free of charge.""

## 2. It is available in a highly approachable, usable form. 

The framework is available as a website, with a diagram on the home page (""The Big Picture"") that shows all of the key deliverables, roles, activities and flows, and also serves as a navigational aid to the rest of the site. In general, the site is only one level deep: the user clicks from the Big Picture to a page providing brief definitions and explanations, and then goes back to the home page. 

## 3. It is lightweight, in the best sense of the term. 

Unlike the CMMI&reg;, or ITIL&reg;, or other somewhat comparable industry frameworks, this is not a massive tome that requires years of dedication to master; each graphic on the home page takes you to a single web page, consisting of a quotation or two, a graphic or two, some key definitions and concepts, and then reference links to additional details that can be found in some other (generally more comprehensive) sources. 

## 4. It is practical. 

Unlike some other industry frameworks, which are more generalized, -- in the sense that they offer you guidelines for process development, rather than processes themselves -- the Scaled Agile Framework is immediately usable by practitioners. Its target audience consists of people doing software development -- not people helping others write processes about how to do software development 

## 5. It is specific. 

SAFe offers specific terms, concepts and practices to be used by software developers. Whereas other frameworks have taken the direction of ever-increasing generalization and abstraction, SAFe is specifically focused on how to use agile and lean practices to develop software. 

Note that because it is specific, it is somewhat more controversial than other, more generalized, process frameworks. One may not like the CMMI, or find it useful, but it is hard to argue with it, because it is so abstract that is hard to take exception with any of it. The Scaled Agile Framework, in that sense, is not playing it safe -- instead, it picks sides and places bets. This aspect of the work makes some people uncomfortable, but arguably it also makes the work much more useful for those who are more interested in developing software than in debating methodologies.  

## 6. It conveniently codifies some of the most common agile practices in use today. 

As examples, definitions for ""agile teams,"" ""product owner,"" ""scrum master"" and other common terms and concepts are represented on The Big Picture, with definitions and explanations just a click away. 

## 7. It offers useful extensions to common agile practices.

Most agile practices in common use today are based on [Scrum][] and/or [XP][], which are really focused at the practitioner and team levels. 

SAFe extends the agile model up to the program and portfolio levels. It does this by, again, codifying many elements in common use today -- things like the the hierarchy of epics, features, and stories -- but also by adding novel yet useful concepts, such as the idea of the ""Agile Release Train,"" the term SAFe uses for the Program level equivalent of Agile Teams. 

## 8. It grounds agile practices in an enterprise context. 

Many agile models are really very developer-centric -- they seem to depict the entire development process from the perspective of a developer, or a development team. 

SAFe still leverages all of the by now traditional elements of agile, and yet it also places software development realistically in the context of an enterprise that is served by such teams. As one example, SAFe acknowledges that estimates will need to be done at the program and portfolio levels, based on definitions of epics and features, before descending to the level of granularity needed for stories and story points. This is sometimes viewed as sacrilege by agile coaches and practitioners steeped in team-based practices, but it is a necessity for doing agile at scale within the context of large organizations. 

## 9. It offers a complete picture of software development. 

Roles of Enterprise Architect and System Architect are included in the model, as are the concepts of Architectural Epics, Architectural Features and Architectural Runway. UX experts and DevOps teams are given roles to play. Product Managers are included as well as Product Owners. Non-Functional Requirements are included in the model. 

So while the SAFe model is relatively simple, it is not simplistic. It includes all the elements that are actually needed to develop and deliver software in a modern enterprise context. 

## 10. It is regularly maintained. 

Ongoing SAFe development seems to moving along at a good clip. While there have been no drastic changes that would cause distress to early adopters, there has been a steady pace of ongoing progress and polishing. SAFe is now at version 3.0, and a preview of 4.0 is available. So the SAFe team seems to be releasing one new version per year. And ongoing evolution seems to be based on actual experience using the model in the field, rather than on abstract theorization. 

## In Summary

So there you have it -- ten reasons to give serious consideration to the use of [SAFe][] within your enterprise!  

I documented my [reservations about the CMMI][cmmi-position] back in 2008. While I doubt that Dean Leffingwell and company have read my blog post on that topic, they do seem to have systematically gone down my list of reservations and addressed them all one by one. 

Back in 1992, [Edward Yourdon wrote][yourdon] about the original Capability Maturity Model, ""Until you can find a better map, this one sure beats wandering through the forest in the dark.""

Two decades later, I think it's time to say something similar about the Scaled Agile Framework: it may not be perfect, but if you're trying to implement agile within a large organization, it's better than wandering through the woods on your own. 

[safe]: http://www.scaledagileframework.com
[cmmi-position]: http://www.pagantuna.com/posts/my-position-on-the-cmmi.html
[scrum]: http://en.wikipedia.org/wiki/Scrum_(software_development)
[xp]: http://en.wikipedia.org/wiki/Extreme_programming
[yourdon]: http://www.pagantuna.com/wisdom/sei-maturity-models.html
"
Agile	Agile Project Planning	2015-06-11	9 - Closed	Agile, Project Management	"<p>Many software development teams seem to treat &#8220;Agile&#8221; and &#8220;Project Planning&#8221; as if they were mutually exclusive concepts. The tendency, it seems, is to simply jump straight into Agile iterations &#8212; at best starting with an Iteration Zero &#8212; and then trust that things will sort themselves out strictly through a team-based Scrum-like approach. </p><br><br><p>In practice, though, teams seem to regularly run into trouble with this sort of na‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√†√∂‚àö‚â§ve approach to starting up an Agile project &#8212; especially any sort of large, ambitious project operating within the context of a major enterprise. </p><br><br><p>Rather than proceeding blindly ahead with nothing more than faith in Agile iterations as a panacea, here are some of the planning considerations that I think projects should explicitly address at their outset, before their first sprint. </p>
"	"Many software development teams seem to treat ""[Agile][]"" and ""[Project Planning][projplan]"" as if they were mutually exclusive concepts. The tendency, it seems, is to simply jump straight into Agile iterations -- at best starting with an [Iteration Zero][iteration-zero] -- and then trust that things will sort themselves out strictly through a [team-based Scrum-like][scrum] approach. 

In practice, though, teams seem to regularly run into trouble with this sort of na√Øve approach to starting up an Agile project -- especially any sort of large, ambitious project operating within the context of a major enterprise. 

Rather than proceeding blindly ahead with nothing more than faith in Agile iterations as a panacea, here are some of the planning considerations that I think projects should explicitly address at their outset, before their first sprint. 

## 1. Define Your Vision and Examine its Implications

Make sure you have a well-defined [vision][] to start with. What are you trying to accomplish? What are the key benefits to be delivered to stakeholders? Are there certain critical dates you must hit, in order to achieve benefits realization? Your vision should be succinct enough to be read in five minutes or so, but should be concrete enough to provide real guidance to the project team about what moves you towards the vision vs. what moves you away from it, or simply leaves you treading water.

Once you have a draft vision, interview key stakeholders individually and ask them what the project visions means to them. Make sure you receive consistent answers. If you don't, then you need to get the group back together to iron out inconsistencies and sharpen your vision.

As you are defining your vision, consider its implications. There will likely be elements that will need to be considered as you work your way through the items below. 

## 2. Assess Project Constraints

Are there key constraints that must be applied to your project, related to budget, resources, or schedule? Are there specific design constraints that must be respected? Make sure you understand these thoroughly and plan accordingly. 

## 3. Establish an Implementation Strategy & Roadmap

What is the [Minimum Viable Product][mvp] (MVP) that can usefully be released to your customers? How can additional functionality be added in an incremental fashion? What are the dependencies between various features, or groups of features? These are the sorts of considerations that will help you define your implementation strategy. 

Your [roadmap][] should show your planned releases, along with other key project milestones, laid out across an approximate timeline. The number of releases and the timeframe depicted should reflect known stakeholder agreements and negotiated expectations. The timeframe should not be arbitrarily shortened, if doing so would allow the team to lose sight of critical milestones farther in the future. 

## 4. Identify Prioritization Criteria

Agile depends on having a backlog that can be prioritized by your customer. However some projects -- such as those trying to build a replacement for an existing system -- may deliver none of their value until the entire project is completed, and so are not amenable to prioritization. If your customer sincerely believes that all requests are must-haves, then you will not be able to successfully leverage all the benefits of Agile. Perhaps the most critical items need to come first, or perhaps the most difficult items need to be addressed early on. But try to get agreement on some criteria for prioritizing your backlog. 

## 5. Look for Key Requirements Challenges

Are there certain areas of the project where requirements are likely to be hard to define? Perhaps areas where different stakeholders have conflicting requirements? Or areas where important stakeholders will be difficult to meet with regularly? 

Agile often stipulates that you will have a single Product Owner who is all-knowing and all-powerful, but in reality your situation may not be so simple and straightforward. 

If you can anticipate areas where requirements definition will be challenging, then you should plan time and resources to work these issues before attempting to throw them into a coding iteration in the hope that things will work themselves out there. 

## 6. Anticipate Design Challenges

Are there any areas of your system that will need concentrated design attention? These may be areas of UI design, or areas of database design, or areas of application architecture, or application integration, or some combination of these and perhaps other areas. They may need special attention because certain requirements do not have straightforward solutions, or because certain design elements represent opportunities for achieving fresh and innovative solutions that will deliver significant additional value to your customers. 

In any of these cases, you should plan additional time and resources to work these design problems before throwing related user stories into a development iteration. 

## 7. Consider Documentation Requirements

James and Suzanne Robertson have pointed out that a project can be classified as [a rabbit, a horse, or an elephant][robertson], depending on the degree of formality needed for its requirements documentation. This need is often dictated by factors outside of the control of the project team, and simply waving your magic wand and saying ""We're Agile!"" will not automatically mean that the only thing you will be writing are user stories. 

Similarly, in any large enterprise, there will likely be some significant expectations for architecture documentation, and again, these documentation requirements will not easily be wished away. 

Make sure you plan sufficient time and resources to produce all relevant and required documentation. 

## 8. Identify Your Technology Stack and Its Readiness

Be explicit and transparent about the technologies you intend to use, including application components and development tools. Be wary of any technical paths that may be candidates for severe disruption over the course of your project or over the intended life of your product. Lay out enough of your intended application architecture to show how these technologies will be used within the context of your solution. Ensure all key stakeholders, including those in Enterprise Architecture roles, endorse your decisions, and make sure someone records these decisions and approvals in some sort of permanent record. 

Then assess the readiness of the technology for use by your development team. Is the stack already proven? Is the team already familiar with it? If you answer either of these questions in the negative, then be sure to factor additional time into your plan to allow for technical experimentation and/or training. 

## 9. Establish Initial Agreements on Capacity Allocation

Your development team will spend most of its time developing new features. But over the long haul it will realistically also need to spend some of its time on defect correction, as well as refactoring, design improvements, and technology upgrades. 

The best way to address the need to include these unlike things in your development work is by use of [capacity allocation][capalloc]. You can renegotiate the percentages allocated to different types of work over time, but it's best to introduce the concept early, establish some starting agreements, and then bake these into your planning assumptions so that you don't over-estimate your development capacity. 

## 10. Integration and Hardening

Will you have one or more teams working semi-independently on different pieces of your system? If so, be sure to factor in time and resources for integration testing and hardening of the integrated solution. This may come in the form of a periodic hardening sprint, or additional integration work as part of each development sprint. However you incorporate it into your plan, though, such work will consume additional time that would otherwise be available for development of new features. 

## 11. Consider Overall Effort Estimates and Funding

Agile generally recommends you focus on backlog prioritization and short-term commitments to get the most bang for your buck, without worrying too much about longer-term estimates and funding. However, if your project really has to accomplish certain long-term objectives in order to be successful, then you will need to do some level of estimating for the overall project, and will need to make sure you can secure funding to complete the entire job. 

Of course, at this point, you will be doing rough-order-of-magnitude estimates, so you will want to make sure you have some reasonable amount of management reserve -- in terms of both budget and schedule -- available to cover risks that cannot be completely known to the project at this early stage of the game. You should also make sure you have a way of defending that reserve so that it is not squandered on non-essential items.  

## 12. Establish Progress Measures

How will the project know if it's on track to meet the key milestones identified on the roadmap? The team will need some sort of [earned value measurement][evm] system to be able to assess its progress towards its larger goals.  

## 13. Make Sure Your Project has a Reasonable Chance of Success

If stakeholder expectations are unrealistic, then now is the time to confront that reality, rather than launching into Agile development hoping that things will work themselves out later. If time, money and patience are likely to run out before you reach key objectives, then better to adjust expectations now -- or cancel the project outright -- rather than launch out on an Agile [death march][death-march]. 

----

So there you have it -- a baker's dozen of factors to be considered when doing initial planning for your agile project, before launching into your first iteration. 

Of course, it may be more fun to start developing code right away, but a little bit of time spent planning your effort up-front can avoid major headaches later, and can pave the way for a series of iterations that will lead you smoothly to your ultimate goal. 

[agile]:    http://agilemanifesto.org

[capalloc]: http://www.scaledagileframework.com/team-backlog/

[death-march]: http://en.wikipedia.org/wiki/Death_march_(project_management)

[evm]:      http://www.pagantuna.com/posts/evm-for-mere-mortals.html

[iteration-zero]: http://www.jrothman.com/articles/2012/10/how-to-use-iteration-zero-or-not/

[mvp]:      http://en.wikipedia.org/wiki/Minimum_viable_product

[projplan]: http://en.wikipedia.org/wiki/Project_planning

[roadmap]:  http://www.scaledagileframework.com/roadmap/

[robertson]: http://www.visiblethread.com/wp-content/uploads/Lean-Documentation-Blending-Traditional-and-Agile-Project-Documentation.pdf

[scrum]:    https://www.scrumalliance.org/why-scrum

[vision]:   http://www.scaledagileframework.com/vision/
"
Project Management	Agile Project Planning	2015-06-11	9 - Closed	Agile, Project Management	"<p>Many software development teams seem to treat &#8220;Agile&#8221; and &#8220;Project Planning&#8221; as if they were mutually exclusive concepts. The tendency, it seems, is to simply jump straight into Agile iterations &#8212; at best starting with an Iteration Zero &#8212; and then trust that things will sort themselves out strictly through a team-based Scrum-like approach. </p><br><br><p>In practice, though, teams seem to regularly run into trouble with this sort of na‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√†√∂‚àö‚â§ve approach to starting up an Agile project &#8212; especially any sort of large, ambitious project operating within the context of a major enterprise. </p><br><br><p>Rather than proceeding blindly ahead with nothing more than faith in Agile iterations as a panacea, here are some of the planning considerations that I think projects should explicitly address at their outset, before their first sprint. </p>
"	"Many software development teams seem to treat ""[Agile][]"" and ""[Project Planning][projplan]"" as if they were mutually exclusive concepts. The tendency, it seems, is to simply jump straight into Agile iterations -- at best starting with an [Iteration Zero][iteration-zero] -- and then trust that things will sort themselves out strictly through a [team-based Scrum-like][scrum] approach. 

In practice, though, teams seem to regularly run into trouble with this sort of na√Øve approach to starting up an Agile project -- especially any sort of large, ambitious project operating within the context of a major enterprise. 

Rather than proceeding blindly ahead with nothing more than faith in Agile iterations as a panacea, here are some of the planning considerations that I think projects should explicitly address at their outset, before their first sprint. 

## 1. Define Your Vision and Examine its Implications

Make sure you have a well-defined [vision][] to start with. What are you trying to accomplish? What are the key benefits to be delivered to stakeholders? Are there certain critical dates you must hit, in order to achieve benefits realization? Your vision should be succinct enough to be read in five minutes or so, but should be concrete enough to provide real guidance to the project team about what moves you towards the vision vs. what moves you away from it, or simply leaves you treading water.

Once you have a draft vision, interview key stakeholders individually and ask them what the project visions means to them. Make sure you receive consistent answers. If you don't, then you need to get the group back together to iron out inconsistencies and sharpen your vision.

As you are defining your vision, consider its implications. There will likely be elements that will need to be considered as you work your way through the items below. 

## 2. Assess Project Constraints

Are there key constraints that must be applied to your project, related to budget, resources, or schedule? Are there specific design constraints that must be respected? Make sure you understand these thoroughly and plan accordingly. 

## 3. Establish an Implementation Strategy & Roadmap

What is the [Minimum Viable Product][mvp] (MVP) that can usefully be released to your customers? How can additional functionality be added in an incremental fashion? What are the dependencies between various features, or groups of features? These are the sorts of considerations that will help you define your implementation strategy. 

Your [roadmap][] should show your planned releases, along with other key project milestones, laid out across an approximate timeline. The number of releases and the timeframe depicted should reflect known stakeholder agreements and negotiated expectations. The timeframe should not be arbitrarily shortened, if doing so would allow the team to lose sight of critical milestones farther in the future. 

## 4. Identify Prioritization Criteria

Agile depends on having a backlog that can be prioritized by your customer. However some projects -- such as those trying to build a replacement for an existing system -- may deliver none of their value until the entire project is completed, and so are not amenable to prioritization. If your customer sincerely believes that all requests are must-haves, then you will not be able to successfully leverage all the benefits of Agile. Perhaps the most critical items need to come first, or perhaps the most difficult items need to be addressed early on. But try to get agreement on some criteria for prioritizing your backlog. 

## 5. Look for Key Requirements Challenges

Are there certain areas of the project where requirements are likely to be hard to define? Perhaps areas where different stakeholders have conflicting requirements? Or areas where important stakeholders will be difficult to meet with regularly? 

Agile often stipulates that you will have a single Product Owner who is all-knowing and all-powerful, but in reality your situation may not be so simple and straightforward. 

If you can anticipate areas where requirements definition will be challenging, then you should plan time and resources to work these issues before attempting to throw them into a coding iteration in the hope that things will work themselves out there. 

## 6. Anticipate Design Challenges

Are there any areas of your system that will need concentrated design attention? These may be areas of UI design, or areas of database design, or areas of application architecture, or application integration, or some combination of these and perhaps other areas. They may need special attention because certain requirements do not have straightforward solutions, or because certain design elements represent opportunities for achieving fresh and innovative solutions that will deliver significant additional value to your customers. 

In any of these cases, you should plan additional time and resources to work these design problems before throwing related user stories into a development iteration. 

## 7. Consider Documentation Requirements

James and Suzanne Robertson have pointed out that a project can be classified as [a rabbit, a horse, or an elephant][robertson], depending on the degree of formality needed for its requirements documentation. This need is often dictated by factors outside of the control of the project team, and simply waving your magic wand and saying ""We're Agile!"" will not automatically mean that the only thing you will be writing are user stories. 

Similarly, in any large enterprise, there will likely be some significant expectations for architecture documentation, and again, these documentation requirements will not easily be wished away. 

Make sure you plan sufficient time and resources to produce all relevant and required documentation. 

## 8. Identify Your Technology Stack and Its Readiness

Be explicit and transparent about the technologies you intend to use, including application components and development tools. Be wary of any technical paths that may be candidates for severe disruption over the course of your project or over the intended life of your product. Lay out enough of your intended application architecture to show how these technologies will be used within the context of your solution. Ensure all key stakeholders, including those in Enterprise Architecture roles, endorse your decisions, and make sure someone records these decisions and approvals in some sort of permanent record. 

Then assess the readiness of the technology for use by your development team. Is the stack already proven? Is the team already familiar with it? If you answer either of these questions in the negative, then be sure to factor additional time into your plan to allow for technical experimentation and/or training. 

## 9. Establish Initial Agreements on Capacity Allocation

Your development team will spend most of its time developing new features. But over the long haul it will realistically also need to spend some of its time on defect correction, as well as refactoring, design improvements, and technology upgrades. 

The best way to address the need to include these unlike things in your development work is by use of [capacity allocation][capalloc]. You can renegotiate the percentages allocated to different types of work over time, but it's best to introduce the concept early, establish some starting agreements, and then bake these into your planning assumptions so that you don't over-estimate your development capacity. 

## 10. Integration and Hardening

Will you have one or more teams working semi-independently on different pieces of your system? If so, be sure to factor in time and resources for integration testing and hardening of the integrated solution. This may come in the form of a periodic hardening sprint, or additional integration work as part of each development sprint. However you incorporate it into your plan, though, such work will consume additional time that would otherwise be available for development of new features. 

## 11. Consider Overall Effort Estimates and Funding

Agile generally recommends you focus on backlog prioritization and short-term commitments to get the most bang for your buck, without worrying too much about longer-term estimates and funding. However, if your project really has to accomplish certain long-term objectives in order to be successful, then you will need to do some level of estimating for the overall project, and will need to make sure you can secure funding to complete the entire job. 

Of course, at this point, you will be doing rough-order-of-magnitude estimates, so you will want to make sure you have some reasonable amount of management reserve -- in terms of both budget and schedule -- available to cover risks that cannot be completely known to the project at this early stage of the game. You should also make sure you have a way of defending that reserve so that it is not squandered on non-essential items.  

## 12. Establish Progress Measures

How will the project know if it's on track to meet the key milestones identified on the roadmap? The team will need some sort of [earned value measurement][evm] system to be able to assess its progress towards its larger goals.  

## 13. Make Sure Your Project has a Reasonable Chance of Success

If stakeholder expectations are unrealistic, then now is the time to confront that reality, rather than launching into Agile development hoping that things will work themselves out later. If time, money and patience are likely to run out before you reach key objectives, then better to adjust expectations now -- or cancel the project outright -- rather than launch out on an Agile [death march][death-march]. 

----

So there you have it -- a baker's dozen of factors to be considered when doing initial planning for your agile project, before launching into your first iteration. 

Of course, it may be more fun to start developing code right away, but a little bit of time spent planning your effort up-front can avoid major headaches later, and can pave the way for a series of iterations that will lead you smoothly to your ultimate goal. 

[agile]:    http://agilemanifesto.org

[capalloc]: http://www.scaledagileframework.com/team-backlog/

[death-march]: http://en.wikipedia.org/wiki/Death_march_(project_management)

[evm]:      http://www.pagantuna.com/posts/evm-for-mere-mortals.html

[iteration-zero]: http://www.jrothman.com/articles/2012/10/how-to-use-iteration-zero-or-not/

[mvp]:      http://en.wikipedia.org/wiki/Minimum_viable_product

[projplan]: http://en.wikipedia.org/wiki/Project_planning

[roadmap]:  http://www.scaledagileframework.com/roadmap/

[robertson]: http://www.visiblethread.com/wp-content/uploads/Lean-Documentation-Blending-Traditional-and-Agile-Project-Documentation.pdf

[scrum]:    https://www.scrumalliance.org/why-scrum

[vision]:   http://www.scaledagileframework.com/vision/
"
Documentation	Lessons We (Should) Have Learned from the Web	2015-07-26	6 - Completed	Documentation, Web	"<p>There are a number of basic principles that those of us in the Information Technology field should have learned from the tremendous success of the Internet and the World Wide Web. </p>
"	"There are a number of basic principles that those of us in the Information Technology field should have learned from the tremendous success of the Internet and the World Wide Web. 

1. Information of any enduring interest should be stored on the Web. 

2. Every topic in which we have an interest should have its own unique address on the Web. The Internet calls this a Uniform Resource Locator (URL). 

3. Each unique address should be permanent. The content at such an  address can and should change over time, but the address at which we find that information should never change. 

4. Information should be exchanged with others by passing the unique address back and forth -- not by passing the information itself. 

5. The unique address should be an intelligent identifier made up of words that identify the topic, rather than an arbitrary series of numbers and letters. It should be as concise as possible, but long enough to be meaningful. Another way to say this is that the unique address should be human-readable. 

6. Revision or version identifiers should generally not be part of the unique address, unless the changes are so great that there is a need to identify a new and separate topic, and to preserve the location of the existing topic. 

7. People who are knowledgeable about a topic should be able to update that topic's information on the Web as easily and quickly as possible, with some way of preventing any lasting damage caused by mistakes. 

8. Rather than duplicating existing information, we should freely refer to it via hyperlinks as needed. A hyperlink offers a gateway from one topic on the Web to another, related topic. 

9. The information on a topic should be separated from its formatting. That is, people who are knowledgeable about a topic should be able to provide and update a topic's information without worrying about things like fonts, colors and page layout.

10. All of the information on the Web should be accessible through a single application, known as a Web Browser. 

For those of us actually working on the World Wide Web, none of this should come as a surprise. The Web is the engine of the Information Economy and, just as it was necessary to minimize mechanical friction in the Industrial Economy, it is essential to minimize communication friction in the Information Age. The principles above all serve to do exactly that: to make the latest and most accurate information on a topic available in as frictionless a manner as possible. 

Examples of the success of these principles can be found everywhere you turn on the Web. Look at Wikipedia; look at Google; look at the URLs used by a company like Apple. Look at the success of Wikipedia. It uses every one of the principles stated above. And these principles have brought it success, not because someone thought they were cool, or because they were in political favor one year, but because they were found to work. 

So why is it important to state these principles -- now somewhat obvious to most of us -- at this late date? Well, only because, even though these principles are now sacred canon on the Web, they are still violated with reckless abandon everywhere I look on corporate information networks. 

Is this because these principles are unimportant inside the walled gardens of corporate intranets? No -- minimizing communication friction is just as important there as it is on the open Web. 

So why are these principles so often ignored? Well, because we have captive audiences inside corporations, and so we do not have the benefits of competition to teach us the importance of these principles through the hard lessons of failure. 

One of the great lessons of evolution is that the best designs emerge through open competition -- through the work of the blind watchmaker. 

Those of us with eyes to see cannot always predict these things in advance, but we should be smart enough to identify and leverage them once they emerge. 

----

See also:

* [Fighting Organizational Friction](http://www.pagantuna.com/posts/fighting-organizational-friction.html)
* [Ten Reasons to Ditch Your Word Documents](http://www.pagantuna.com/posts/ten-reasons-to-ditch-your-word-documents.html)
"
Web	Lessons We (Should) Have Learned from the Web	2015-07-26	6 - Completed	Documentation, Web	"<p>There are a number of basic principles that those of us in the Information Technology field should have learned from the tremendous success of the Internet and the World Wide Web. </p>
"	"There are a number of basic principles that those of us in the Information Technology field should have learned from the tremendous success of the Internet and the World Wide Web. 

1. Information of any enduring interest should be stored on the Web. 

2. Every topic in which we have an interest should have its own unique address on the Web. The Internet calls this a Uniform Resource Locator (URL). 

3. Each unique address should be permanent. The content at such an  address can and should change over time, but the address at which we find that information should never change. 

4. Information should be exchanged with others by passing the unique address back and forth -- not by passing the information itself. 

5. The unique address should be an intelligent identifier made up of words that identify the topic, rather than an arbitrary series of numbers and letters. It should be as concise as possible, but long enough to be meaningful. Another way to say this is that the unique address should be human-readable. 

6. Revision or version identifiers should generally not be part of the unique address, unless the changes are so great that there is a need to identify a new and separate topic, and to preserve the location of the existing topic. 

7. People who are knowledgeable about a topic should be able to update that topic's information on the Web as easily and quickly as possible, with some way of preventing any lasting damage caused by mistakes. 

8. Rather than duplicating existing information, we should freely refer to it via hyperlinks as needed. A hyperlink offers a gateway from one topic on the Web to another, related topic. 

9. The information on a topic should be separated from its formatting. That is, people who are knowledgeable about a topic should be able to provide and update a topic's information without worrying about things like fonts, colors and page layout.

10. All of the information on the Web should be accessible through a single application, known as a Web Browser. 

For those of us actually working on the World Wide Web, none of this should come as a surprise. The Web is the engine of the Information Economy and, just as it was necessary to minimize mechanical friction in the Industrial Economy, it is essential to minimize communication friction in the Information Age. The principles above all serve to do exactly that: to make the latest and most accurate information on a topic available in as frictionless a manner as possible. 

Examples of the success of these principles can be found everywhere you turn on the Web. Look at Wikipedia; look at Google; look at the URLs used by a company like Apple. Look at the success of Wikipedia. It uses every one of the principles stated above. And these principles have brought it success, not because someone thought they were cool, or because they were in political favor one year, but because they were found to work. 

So why is it important to state these principles -- now somewhat obvious to most of us -- at this late date? Well, only because, even though these principles are now sacred canon on the Web, they are still violated with reckless abandon everywhere I look on corporate information networks. 

Is this because these principles are unimportant inside the walled gardens of corporate intranets? No -- minimizing communication friction is just as important there as it is on the open Web. 

So why are these principles so often ignored? Well, because we have captive audiences inside corporations, and so we do not have the benefits of competition to teach us the importance of these principles through the hard lessons of failure. 

One of the great lessons of evolution is that the best designs emerge through open competition -- through the work of the blind watchmaker. 

Those of us with eyes to see cannot always predict these things in advance, but we should be smart enough to identify and leverage them once they emerge. 

----

See also:

* [Fighting Organizational Friction](http://www.pagantuna.com/posts/fighting-organizational-friction.html)
* [Ten Reasons to Ditch Your Word Documents](http://www.pagantuna.com/posts/ten-reasons-to-ditch-your-word-documents.html)
"
Apple	My Own Damn Apple Watch Review	2015-07-29	9 - Closed	Apple	"<p>The Apple Watch is much like the Velvet Underground: just as it was famously said by Brian Eno that not many people listened to the original VU albums, but all of them started their own bands, so it is true that &#8220;not many&#8221; people are buying the first generation of the Apple Watch, but all of them are writing their own reviews of it. And so here&#8217;s mine.</p><br><br><h2>My Perspective</h2><br><br><p>I&#8217;m a fairly tech-savvy guy who already has at least one of just about everything Apple makes. I&#8217;m six feel tall. I walk and run, but not competitively. I&#8217;ve worn a watch all my life. </p><br><br><h2>The Goods</h2><br><br><p>I ordered the 42MM Steel Case with the Milanese Loop. Anything smaller would have looked silly on my big wrist. The steel case seemed much more like a real watch than the aluminum sport model. And I like the infinite adjustability of the Milanese loop, as opposed to some of the others. I also purchased a black Sport Band to use for running. And I also got a mophie watch dock to use for overnight charging. </p>
"	"![Dick Tracy Watch](http://www.slate.com/content/dam/slate/articles/technology/technology/2013/09/130904_TECH_GalaxyWatchDickTracy.jpg.CROP.article250-medium.jpg)

The [Apple Watch][watch] is much like the [Velvet Underground][vu]: just as it was famously said by Brian Eno that not many people listened to the original VU albums, but all of them started their own bands, so it is true that ""[not many][sales]"" people are buying the first generation of the Apple Watch, but all of them are writing their own reviews of it. And so here's mine.

## My Perspective

I'm a fairly tech-savvy guy who already has at least one of just about everything Apple makes. I'm six feel tall. I walk and run, but not competitively. I've worn a watch all my life. 

## The Goods

I ordered the [42MM Steel Case with the Milanese Loop][42mm]. Anything smaller would have looked silly on my big wrist. The steel case seemed much more like a real watch than the aluminum sport model. And I like the infinite adjustability of the Milanese loop, as opposed to some of the others. I also purchased a [black Sport Band][black] to use for running. And I also got a [mophie watch dock][mophie] to use for overnight charging. 

## Deal Breakers and Deal Makers

After reading other reviews, I finally concluded that there were no fatal flaws in the Apple Watch, but there were also no ""killer apps"" that made it a relative necessity to purchase one (as in, ""I've gotta have one of these things right now!""). And my own experience has shown both of these statements to be true. Battery life always lasts longer than I do in any given day. The fit and finish are great. Legibility is fine, other than in bright outdoor light. At the same time, there is nothing about the Watch that makes me wonder how I ever lived without one. 

## Major Criticisms

I've heard several criticisms of the Apple Watch. Let me address them one by one. 

### ""It's Not Intuitive""

Hey, it sits on my wrist and it tells me the time, just like every watch I've ever owned. How intuitive is *that*? 

I can talk to someone with it, just like [Dick Tracy did in the comic strips][tracy]. When I want to say something, I hold my mouth close to the watch. When I want to hear what the other person is saying, I hold my ear close to the watch. Pretty darned intuitive, I'd say!

Beyond these two basic functions, it's hard for me to say what ""intuitive"" would mean when it comes to wearing a computer on my wrist. I don't know any way to ""intuit"" how that kind of thing would work. 

The display is very nice looking, and interaction with it works very well, but it's very small. That's not a criticism, that's just an attribute of the device type. Would I want a bigger screen on my wrist? *No!* Heck, I haven't even reconciled myself yet to the size of the latest iPhone screens. Those things are *huge!* They're like going to a drive-in movie, and trying to carry the screen in your pocket!

On the other hand, I think many elements of the Watch user interface are very clever and very useful. The haptic feedback is great. The tap on your wrist is hard to ignore, yet very unobstrusive. 

Does it take a while to learn how to use this entirely new device type? Yes. On the other hand, it follows the general rule that [simple things should be simple, and complex things should be possible][kay]. 

So overall I give the UI of the device a big thumbs up. 

### ""It Doesn't Always Show Me The Time When I Want to See It""

The watch tries very hard to only turn on the display when you actually need it on, in order to conserve battery life. In some cases, this means that the watch doesn't show you the time when you'd like to see it, or it turns the display off while you're still looking at it. I don't find either of these behaviors particularly annoying. I confess that once or twice I felt some annoyance when I tried to see whether I was late to a meeting when I was running down the hall at work, and the display remained dark. But overall, once you adjust to the idea that you are now wearing a computer on your wrist, instead of a mechanical device, you learn how to move your wrist so that the watch knows you're looking at it. Overall, I'm OK with the trade-offs here. 

### ""The Physical Design is Rather Pedestrian""

Hey, it's a chunk of metal with a display on the front, some buttons on the side, and a computer inside, and it sits on your wrist. It's shiny. It's got rounded corners. What did you expect? Is it the best looking watch in the world? No. Does it look pretty good for a ""smart"" watch? Well, yes, I think so. 

The area of physical design where I think Apple really shines is with the bands for the watch. The way you attach and remove them is really very clever, and works extremely well. Both of the bands I have look great, feel great on my wrist, and fit really well. They are definitely the best watch bands I've ever owned, in terms of looks, and in terms of functionality. I don't think Apple is getting enough credit here. 

### ""It's Not a Great Fitness Tracker""

If you are a competitive runner, then the Apple Watch is not going to be part of your training regime. And one can question the accuracy of the various measurements and calculations the Watch produces. But, hey, for an average guy like me who is just trying to stay reasonably fit as he ages, the Watch works pretty well. It reminds me to stand once an hour. It reminds me when I haven't been moving enough, or getting enough exercise. And it does all this regularly and unobtrusively, yet insistently. So I find it works pretty well for me, and it eliminates the need to carry another device around with me just to do fitness tracking. 

### ""It Doesn't Give Me Anything I Don't Already Have""

From a strictly utilitarian point of view, there is no reason to have an Apple Watch in addition to an iPhone. On the other hand, from a strictly utilitarian point of view, Apple has no need to exist. People don't buy Apple devices just for their utility. Is there value in having some of these functions on your wrist, instead of in your pocket? I think so, just as there is value in having some of these things in your pocket, instead of on your desk or your lap. Do you *need* to have a computer on your wrist? No. But as Ruthie says in the Dylan song, ""[Your d√©butante just knows what you need, but I know what you want][mobile]."" And so, while it's true I don't *need* a computer on my wrist, I do find that I *want* the one that Apple has fashioned for me. 

## What's Cool About It

I've been surprised at how handy it often is to take a quick phone call on my Watch. Often, in cases like these, by the time I got my iPhone out of my pocket, I would have missed the call. And the sound quality of phone calls on the Watch is surprisingly good. I can hear the other person well, and so far no one has said anything about the sound quality of my voice on their end, and I've had no one say, ""What did you say?"" or ""Come again?"" 

It's handy to be able to check the current date without having to get my iPhone out. 

I've used Apple Pay with my Watch several times, and it's pretty cool. I don't have one of the latest iPhones, so this is a new capability for me. 

It's handy to be able to get Dark Sky weather alerts on my Watch. 

It's very handy to get turn-by-turn directions on my Watch when I'm the one who's driving. I'm never comfortable taking my eyes off the road to look at my phone in these situations, but I find the Watch is ideal for this, since the smaller screen actually focuses my attention quickly on the critical info I need to know, and it's closer to my line of sight than my phone would be, and it's already right there at the end of my arm. 

I think the concentric rings in the Activity tracker are really brilliant. They're very satisfying as a quick fitness dashboard I can refer to throughout the day. 

I could probably go on a bit here, but you probably get the idea, and your particular mileage may vary anyway.  

## Bottom Line

All in all, I'm very happy with my Apple Watch purchases. The watch, the bands, and the mophie stand are all great. 

Am I waiting breathlessly for the new features of [watchOS 2][os2]? No, not really. There may be some cool new apps that come along, but I'm not really expecting the functionality sitting on my wrist to expand by leaps and bounds. I've still got my iPhone and my Mac, and the Watch is great at what it does, but that by definition is a pretty small incremental addition. 

So do you need to rush right out and buy one? No, definitely not. Is it the Next Big Thing? No, not really. But if you're ready for the Next Little Thing from Apple, then you'll probably be pleased with it. 

So if you happen to come across Ruthie and me dancing in her honky-tonk lagoon one evening, you can be sure that, no matter what else we may (or may not!) be wearing, that gleam you see from one of our wrists will be that [Panamanian moonlight][mobile] reflecting off of the steel case of my Apple Watch. 

[42mm]:  https://www.apple.com/watch/apple-watch/stainless-steel-case-milanese-loop/
[black]: http://www.apple.com/shop/product/MJ4Q2ZM/A/42mm-black-sport-band
[kay]:    http://www.pagantuna.com/wisdom/simple-things-should-be-simple.html
[mobile]: http://www.bobdylan.com/us/songs/stuck-inside-mobile-memphis-blues-again
[mophie]: http://www.mophie.com/shop/docks-adapters/apple-watch-dock
[os2]:   https://www.apple.com/watchos-2-preview/
[sales]: https://www.google.com/search?rls=en&q=apple+watch+sales+disappointing&ie=UTF-8&oe=UTF-8
[tracy]: http://www.thedailybeast.com/articles/2015/03/10/how-dick-tracy-invented-the-apple-watch.html
[vu]:    https://en.wikipedia.org/wiki/The_Velvet_Underground
[watch]: http://www.apple.com/watch/
"
Leadership	The Importance of the Team	2015-09-17	9 - Closed	Leadership, Software Development, Teams	"<p>At the core of most of the important work done in this world you will find a small, multi-skilled team with effective leadership focused on delivering a product of value to a customer. </p><br><br><p>Note that teams such as these are found in contexts as different as Jazz bands, Rock groups, filmmaking, Agile Software Development and Lean Manufacturing, to name just a few obvious examples. </p><br><br><p>It&#8217;s now commonplace in business to take the work of teams for granted, but in my experience that passive acceptance doesn&#8217;t always translate into active support.</p><br><br><p>Let me break my opening assertion down, and explain the significance of each of its components. </p>
"	"<a href=""http://www.cbs.com/shows/star_trek/""><img src=""http://www.pagantuna.com/images/star-trek.jpg"" alt=""The Star Trek Team"" title=""Star Trek"" class=""pic-right"" /></a>

At the core of most of the important work done in this world you will find a small, multi-skilled team with effective leadership focused on delivering a product of value to a customer. 

Note that teams such as these are found in contexts as different as [Jazz bands][jazz], [Rock groups][rock], [filmmaking][film], [Agile Software Development][agile] and [Lean Manufacturing][lean], to name just a few obvious examples. 

It's now commonplace in business to take the work of teams for granted, but in my experience that passive acceptance doesn't always translate into active support.

Let me break my opening assertion down, and explain the significance of each of its components. 

## ""A Small Team""

I mean something in the range of 3 - 15 members. Such a team, if organized well, has the following advantages.

* Diversity of knowledge, abilities and perspectives. 
* Joint decision-making following joint discussion and consideration of alternatives. 
* Bonding and cohesion of team members, including reinforcement of shared team norms. 
* Social motivations for completing important work. 
* Direct communication between team members.

What's magic about the size? Less than three, and you have a duet rather than a group: it's more about the individuals and their relationship, and less about a team identity. More than fifteen, and it's hard to maintain direct communication between team members. (And fifteen, by the way is an upper limit: for some sorts of teams, that may be too large a number.) 

## ""Multi-Skilled""

For the sort of team I'm talking about, it's important for the team to be relatively self-sufficient, which means that all or most of the skills important to the team need to be available within the team. This is different from the [oboe section][oboe] within an orchestra, or a [steno pool][steno], or any sort of pool of resources sharing similar skills. A multi-skilled team is empowered to act as a collective. A group of people with similar skills will not achieve the sorts of benefits I've listed above for a small team. 

## ""With Effective Leadership""

A team can be self-organizing, but it cannot generally be self-governing. Some leadership can be internal to the team, and some of it can come from outside the team, but effective leadership is generally required in order for a team to be consistently productive. The product development team needs its Steve Jobs. The jazz band needs its Miles Davis. 

Ineffective leadership comes in several common forms. It can be too passive. It can be too self-absorbed, ignoring signals from the team itself, from its customers or from its partners. It can be too diffuse, consisting of too many leaders, from different functions and/or levels, who are not in alignment with each other. 

Certainly one of the important functions of leadership is to make difficult decisions concerning the team's direction. Sometime this involves saying ""no"" to some options that the team might otherwise pursue, if left to its own devices. 

## ""Focused on Delivering a Product of Value to a Customer""

There are four important but closely related elements that I'm grouping together here:

* *Focus:* the entire team must be focused on a common goal. 
* *Product:* A concrete product forces hard decisions to be made, and forces the team to actually produce a tangible result. 
* *Delivery:* The team must deliver something in a limited timeframe, again enforcing a degree of discipline. 
* *Customer:* The product must be something of value to a real customer. Without the ability to visualize such a recipient, it is hard for the team to make the sort of often difficult trade-off decisions involved in any important work. 

## What Can Be Debated

I've tried to summarize above many of the key learnings about effective teams that I've gleaned over several decades, based on my experience working as a team member and team leader, and also based on my observations and broad study of the topic in multiple contexts. 

But, of course, in this brief piece I've just scratched the surface of the subject. Whole books have been written on the topic of teams. There is lots of room for discussion and debate on the various elements of teams and team building. 

## What Cannot Be Debated

At this late date, it's probably not useful to waste time debating whether teams like these are important. 

Some would say that there is ""magic"" in such teams, but I think it's probably fairer to say that there's not much of lasting value produced *without* such teams. 

Wherever we look today, especially when we dig beneath the surface of any of our modern success stories, we find abundant evidence of the operation of teams that fit the description I've provided above. 

Heck, I've so far avoided any mention of sports, but I think much of our obsession with this endeavor can be traced back to the importance of teams in our society. Every game day we see this fundamental reality played out on the field in front of us -- with all of the corporate and societal trappings stripped away -- laying bare the workings of two teams, with their members, their diverse skills, their leaders, their activities, their collaboration and, ultimately, their results, all there for us to observe and discuss.

## Implications for Your Organization

Much of what I've said above is probably fairly non-controversial. 

And yet...

What are the implications for the larger organization?

It is probably not too much of a leap to say that successful organizations will be those who do the most to foster, sustain and nurture such teams. 

Yet how many organizations embrace this truth as one of their core operating principles? 

Instead leaders of large organizations often seem to lose grasp of what's going on within their teams, and as a result lose track of the effects their decisions may have on the operation of these teams. After all, if leaders observe the business norms of interacting only with those immediately above, below or adjacent to them in the organization, with only occasional ceremonial contact with any working teams, it is all to easy for them to insulate themselves from first-hand knowledge of what's happening at this level of their organizations.  

I think this is one reason why the the [videos on Spotify Engineering Culture][spot] have been so popular. There are a lot of great ideas here, but many team members simply seem to like the fact that a major company thinks their teams are so important that they will release content entirely focused on the way their teams function.   

Let me return to my original assertion:

> At the core of most of the important work done in this world you will find a small, multi-skilled team with effective leadership focused on delivering a product of value to a customer.

If this is true, then you need to ask yourself: what is your organization doing today to create, nurture and sustain these sorts of teams? 

[agile]: http://agilemanifesto.org/principles.html
[film]:  https://www.filmandmusic.com/articles/7-perspectives-on-the-absolute-importance-of-collaboration/19
[jazz]:  http://www.amazon.com/Virtuoso-Teams-Lessons-changed-worlds/dp/0273702181
[lean]:  https://en.wikipedia.org/wiki/Cellular_manufacturing
[oboe]:  http://cache3.asset-cache.net/gc/488831-oboe-section-of-symphony-orchestra-gettyimages.jpg?v=1&c=IWSAsset&k=2&d=IiGirUeIzJ8wi3f90FPuI98CoL0wZP6rTCu2aRcHxwrY9mrAweEJgX8Wb2%2FKWjqZ
[rock]:  http://www.reasontorock.com/elements/collaboration.html
[spot]:  https://labs.spotify.com/2014/03/27/spotify-engineering-culture-part-1/
[steno]: http://gunsandburgers.com/wp-content/uploads/2015/04/Steno-pool-in-office-1959-Seattle-Municipal-Archives-CC-BY-2.0-1200x400.gif
"
Software Development	The Importance of the Team	2015-09-17	9 - Closed	Leadership, Software Development, Teams	"<p>At the core of most of the important work done in this world you will find a small, multi-skilled team with effective leadership focused on delivering a product of value to a customer. </p><br><br><p>Note that teams such as these are found in contexts as different as Jazz bands, Rock groups, filmmaking, Agile Software Development and Lean Manufacturing, to name just a few obvious examples. </p><br><br><p>It&#8217;s now commonplace in business to take the work of teams for granted, but in my experience that passive acceptance doesn&#8217;t always translate into active support.</p><br><br><p>Let me break my opening assertion down, and explain the significance of each of its components. </p>
"	"<a href=""http://www.cbs.com/shows/star_trek/""><img src=""http://www.pagantuna.com/images/star-trek.jpg"" alt=""The Star Trek Team"" title=""Star Trek"" class=""pic-right"" /></a>

At the core of most of the important work done in this world you will find a small, multi-skilled team with effective leadership focused on delivering a product of value to a customer. 

Note that teams such as these are found in contexts as different as [Jazz bands][jazz], [Rock groups][rock], [filmmaking][film], [Agile Software Development][agile] and [Lean Manufacturing][lean], to name just a few obvious examples. 

It's now commonplace in business to take the work of teams for granted, but in my experience that passive acceptance doesn't always translate into active support.

Let me break my opening assertion down, and explain the significance of each of its components. 

## ""A Small Team""

I mean something in the range of 3 - 15 members. Such a team, if organized well, has the following advantages.

* Diversity of knowledge, abilities and perspectives. 
* Joint decision-making following joint discussion and consideration of alternatives. 
* Bonding and cohesion of team members, including reinforcement of shared team norms. 
* Social motivations for completing important work. 
* Direct communication between team members.

What's magic about the size? Less than three, and you have a duet rather than a group: it's more about the individuals and their relationship, and less about a team identity. More than fifteen, and it's hard to maintain direct communication between team members. (And fifteen, by the way is an upper limit: for some sorts of teams, that may be too large a number.) 

## ""Multi-Skilled""

For the sort of team I'm talking about, it's important for the team to be relatively self-sufficient, which means that all or most of the skills important to the team need to be available within the team. This is different from the [oboe section][oboe] within an orchestra, or a [steno pool][steno], or any sort of pool of resources sharing similar skills. A multi-skilled team is empowered to act as a collective. A group of people with similar skills will not achieve the sorts of benefits I've listed above for a small team. 

## ""With Effective Leadership""

A team can be self-organizing, but it cannot generally be self-governing. Some leadership can be internal to the team, and some of it can come from outside the team, but effective leadership is generally required in order for a team to be consistently productive. The product development team needs its Steve Jobs. The jazz band needs its Miles Davis. 

Ineffective leadership comes in several common forms. It can be too passive. It can be too self-absorbed, ignoring signals from the team itself, from its customers or from its partners. It can be too diffuse, consisting of too many leaders, from different functions and/or levels, who are not in alignment with each other. 

Certainly one of the important functions of leadership is to make difficult decisions concerning the team's direction. Sometime this involves saying ""no"" to some options that the team might otherwise pursue, if left to its own devices. 

## ""Focused on Delivering a Product of Value to a Customer""

There are four important but closely related elements that I'm grouping together here:

* *Focus:* the entire team must be focused on a common goal. 
* *Product:* A concrete product forces hard decisions to be made, and forces the team to actually produce a tangible result. 
* *Delivery:* The team must deliver something in a limited timeframe, again enforcing a degree of discipline. 
* *Customer:* The product must be something of value to a real customer. Without the ability to visualize such a recipient, it is hard for the team to make the sort of often difficult trade-off decisions involved in any important work. 

## What Can Be Debated

I've tried to summarize above many of the key learnings about effective teams that I've gleaned over several decades, based on my experience working as a team member and team leader, and also based on my observations and broad study of the topic in multiple contexts. 

But, of course, in this brief piece I've just scratched the surface of the subject. Whole books have been written on the topic of teams. There is lots of room for discussion and debate on the various elements of teams and team building. 

## What Cannot Be Debated

At this late date, it's probably not useful to waste time debating whether teams like these are important. 

Some would say that there is ""magic"" in such teams, but I think it's probably fairer to say that there's not much of lasting value produced *without* such teams. 

Wherever we look today, especially when we dig beneath the surface of any of our modern success stories, we find abundant evidence of the operation of teams that fit the description I've provided above. 

Heck, I've so far avoided any mention of sports, but I think much of our obsession with this endeavor can be traced back to the importance of teams in our society. Every game day we see this fundamental reality played out on the field in front of us -- with all of the corporate and societal trappings stripped away -- laying bare the workings of two teams, with their members, their diverse skills, their leaders, their activities, their collaboration and, ultimately, their results, all there for us to observe and discuss.

## Implications for Your Organization

Much of what I've said above is probably fairly non-controversial. 

And yet...

What are the implications for the larger organization?

It is probably not too much of a leap to say that successful organizations will be those who do the most to foster, sustain and nurture such teams. 

Yet how many organizations embrace this truth as one of their core operating principles? 

Instead leaders of large organizations often seem to lose grasp of what's going on within their teams, and as a result lose track of the effects their decisions may have on the operation of these teams. After all, if leaders observe the business norms of interacting only with those immediately above, below or adjacent to them in the organization, with only occasional ceremonial contact with any working teams, it is all to easy for them to insulate themselves from first-hand knowledge of what's happening at this level of their organizations.  

I think this is one reason why the the [videos on Spotify Engineering Culture][spot] have been so popular. There are a lot of great ideas here, but many team members simply seem to like the fact that a major company thinks their teams are so important that they will release content entirely focused on the way their teams function.   

Let me return to my original assertion:

> At the core of most of the important work done in this world you will find a small, multi-skilled team with effective leadership focused on delivering a product of value to a customer.

If this is true, then you need to ask yourself: what is your organization doing today to create, nurture and sustain these sorts of teams? 

[agile]: http://agilemanifesto.org/principles.html
[film]:  https://www.filmandmusic.com/articles/7-perspectives-on-the-absolute-importance-of-collaboration/19
[jazz]:  http://www.amazon.com/Virtuoso-Teams-Lessons-changed-worlds/dp/0273702181
[lean]:  https://en.wikipedia.org/wiki/Cellular_manufacturing
[oboe]:  http://cache3.asset-cache.net/gc/488831-oboe-section-of-symphony-orchestra-gettyimages.jpg?v=1&c=IWSAsset&k=2&d=IiGirUeIzJ8wi3f90FPuI98CoL0wZP6rTCu2aRcHxwrY9mrAweEJgX8Wb2%2FKWjqZ
[rock]:  http://www.reasontorock.com/elements/collaboration.html
[spot]:  https://labs.spotify.com/2014/03/27/spotify-engineering-culture-part-1/
[steno]: http://gunsandburgers.com/wp-content/uploads/2015/04/Steno-pool-in-office-1959-Seattle-Municipal-Archives-CC-BY-2.0-1200x400.gif
"
Teams	The Importance of the Team	2015-09-17	9 - Closed	Leadership, Software Development, Teams	"<p>At the core of most of the important work done in this world you will find a small, multi-skilled team with effective leadership focused on delivering a product of value to a customer. </p><br><br><p>Note that teams such as these are found in contexts as different as Jazz bands, Rock groups, filmmaking, Agile Software Development and Lean Manufacturing, to name just a few obvious examples. </p><br><br><p>It&#8217;s now commonplace in business to take the work of teams for granted, but in my experience that passive acceptance doesn&#8217;t always translate into active support.</p><br><br><p>Let me break my opening assertion down, and explain the significance of each of its components. </p>
"	"<a href=""http://www.cbs.com/shows/star_trek/""><img src=""http://www.pagantuna.com/images/star-trek.jpg"" alt=""The Star Trek Team"" title=""Star Trek"" class=""pic-right"" /></a>

At the core of most of the important work done in this world you will find a small, multi-skilled team with effective leadership focused on delivering a product of value to a customer. 

Note that teams such as these are found in contexts as different as [Jazz bands][jazz], [Rock groups][rock], [filmmaking][film], [Agile Software Development][agile] and [Lean Manufacturing][lean], to name just a few obvious examples. 

It's now commonplace in business to take the work of teams for granted, but in my experience that passive acceptance doesn't always translate into active support.

Let me break my opening assertion down, and explain the significance of each of its components. 

## ""A Small Team""

I mean something in the range of 3 - 15 members. Such a team, if organized well, has the following advantages.

* Diversity of knowledge, abilities and perspectives. 
* Joint decision-making following joint discussion and consideration of alternatives. 
* Bonding and cohesion of team members, including reinforcement of shared team norms. 
* Social motivations for completing important work. 
* Direct communication between team members.

What's magic about the size? Less than three, and you have a duet rather than a group: it's more about the individuals and their relationship, and less about a team identity. More than fifteen, and it's hard to maintain direct communication between team members. (And fifteen, by the way is an upper limit: for some sorts of teams, that may be too large a number.) 

## ""Multi-Skilled""

For the sort of team I'm talking about, it's important for the team to be relatively self-sufficient, which means that all or most of the skills important to the team need to be available within the team. This is different from the [oboe section][oboe] within an orchestra, or a [steno pool][steno], or any sort of pool of resources sharing similar skills. A multi-skilled team is empowered to act as a collective. A group of people with similar skills will not achieve the sorts of benefits I've listed above for a small team. 

## ""With Effective Leadership""

A team can be self-organizing, but it cannot generally be self-governing. Some leadership can be internal to the team, and some of it can come from outside the team, but effective leadership is generally required in order for a team to be consistently productive. The product development team needs its Steve Jobs. The jazz band needs its Miles Davis. 

Ineffective leadership comes in several common forms. It can be too passive. It can be too self-absorbed, ignoring signals from the team itself, from its customers or from its partners. It can be too diffuse, consisting of too many leaders, from different functions and/or levels, who are not in alignment with each other. 

Certainly one of the important functions of leadership is to make difficult decisions concerning the team's direction. Sometime this involves saying ""no"" to some options that the team might otherwise pursue, if left to its own devices. 

## ""Focused on Delivering a Product of Value to a Customer""

There are four important but closely related elements that I'm grouping together here:

* *Focus:* the entire team must be focused on a common goal. 
* *Product:* A concrete product forces hard decisions to be made, and forces the team to actually produce a tangible result. 
* *Delivery:* The team must deliver something in a limited timeframe, again enforcing a degree of discipline. 
* *Customer:* The product must be something of value to a real customer. Without the ability to visualize such a recipient, it is hard for the team to make the sort of often difficult trade-off decisions involved in any important work. 

## What Can Be Debated

I've tried to summarize above many of the key learnings about effective teams that I've gleaned over several decades, based on my experience working as a team member and team leader, and also based on my observations and broad study of the topic in multiple contexts. 

But, of course, in this brief piece I've just scratched the surface of the subject. Whole books have been written on the topic of teams. There is lots of room for discussion and debate on the various elements of teams and team building. 

## What Cannot Be Debated

At this late date, it's probably not useful to waste time debating whether teams like these are important. 

Some would say that there is ""magic"" in such teams, but I think it's probably fairer to say that there's not much of lasting value produced *without* such teams. 

Wherever we look today, especially when we dig beneath the surface of any of our modern success stories, we find abundant evidence of the operation of teams that fit the description I've provided above. 

Heck, I've so far avoided any mention of sports, but I think much of our obsession with this endeavor can be traced back to the importance of teams in our society. Every game day we see this fundamental reality played out on the field in front of us -- with all of the corporate and societal trappings stripped away -- laying bare the workings of two teams, with their members, their diverse skills, their leaders, their activities, their collaboration and, ultimately, their results, all there for us to observe and discuss.

## Implications for Your Organization

Much of what I've said above is probably fairly non-controversial. 

And yet...

What are the implications for the larger organization?

It is probably not too much of a leap to say that successful organizations will be those who do the most to foster, sustain and nurture such teams. 

Yet how many organizations embrace this truth as one of their core operating principles? 

Instead leaders of large organizations often seem to lose grasp of what's going on within their teams, and as a result lose track of the effects their decisions may have on the operation of these teams. After all, if leaders observe the business norms of interacting only with those immediately above, below or adjacent to them in the organization, with only occasional ceremonial contact with any working teams, it is all to easy for them to insulate themselves from first-hand knowledge of what's happening at this level of their organizations.  

I think this is one reason why the the [videos on Spotify Engineering Culture][spot] have been so popular. There are a lot of great ideas here, but many team members simply seem to like the fact that a major company thinks their teams are so important that they will release content entirely focused on the way their teams function.   

Let me return to my original assertion:

> At the core of most of the important work done in this world you will find a small, multi-skilled team with effective leadership focused on delivering a product of value to a customer.

If this is true, then you need to ask yourself: what is your organization doing today to create, nurture and sustain these sorts of teams? 

[agile]: http://agilemanifesto.org/principles.html
[film]:  https://www.filmandmusic.com/articles/7-perspectives-on-the-absolute-importance-of-collaboration/19
[jazz]:  http://www.amazon.com/Virtuoso-Teams-Lessons-changed-worlds/dp/0273702181
[lean]:  https://en.wikipedia.org/wiki/Cellular_manufacturing
[oboe]:  http://cache3.asset-cache.net/gc/488831-oboe-section-of-symphony-orchestra-gettyimages.jpg?v=1&c=IWSAsset&k=2&d=IiGirUeIzJ8wi3f90FPuI98CoL0wZP6rTCu2aRcHxwrY9mrAweEJgX8Wb2%2FKWjqZ
[rock]:  http://www.reasontorock.com/elements/collaboration.html
[spot]:  https://labs.spotify.com/2014/03/27/spotify-engineering-culture-part-1/
[steno]: http://gunsandburgers.com/wp-content/uploads/2015/04/Steno-pool-in-office-1959-Seattle-Municipal-Archives-CC-BY-2.0-1200x400.gif
"
Leadership	Effective Compliance	2015-12-05	9 - Closed	Leadership, Technology	"<p>In a corporate environment, the term &#8220;compliance&#8221; is often used to mean a number of different things. </p><br><br><ol><br><li><p>The practice of following one or more sets of binding laws, regulations, policies and/or procedures. </p></li><br><li><p>An organization or function that is put in place to validate that compliance (in the sense above) is maintained.</p></li><br><li><p>The demonstration, or the ability to demonstrate upon demand, that compliance (in the first sense) is being maintained. </p></li><br></ol><br><br><p>Compliance in the second and third senses above &#8212; what we might call the big &#8220;C&#8221; Compliance &#8212; often becomes most important in areas where failure to comply may produce long-term negative consequences, without any corresponding short-term issues or visibility. Information Security and Disaster Recovery Planning are good examples. Because there are no other quick feedback loops in cases like these, special oversight is often put in place to ensure that everyone is doing the right thing now to prevent or mitigate some possible catastrophe in the future. </p><br><br><p>In my experience, it&#8217;s important to keep in mind a number of key ideas in order to maximize the effectiveness of your compliance activities. </p>
"	"In a corporate environment, the term ""compliance"" is often used to mean a number of different things. 

1. The practice of following one or more sets of binding laws, regulations, policies and/or procedures. 

2. An organization or function that is put in place to validate that compliance (in the sense above) is maintained.

3. The demonstration, or the ability to demonstrate upon demand, that compliance (in the first sense) is being maintained. 

Compliance in the second and third senses above -- what we might call the big ""C"" Compliance -- often becomes most important in areas where failure to comply may produce long-term negative consequences, without any corresponding short-term issues or visibility. Information Security and Disaster Recovery Planning are good examples. Because there are no other quick feedback loops in cases like these, special oversight is often put in place to ensure that everyone is doing the right thing now to prevent or mitigate some possible catastrophe in the future. 

In my experience, it's important to keep in mind a number of key ideas in order to maximize the effectiveness of your compliance activities. 

### 1. Always keep the underlying intent in mind.

Avoid a ""check the box"" mentality by continually reinforcing the underlying intent of the Compliance activities. Without this continual emphasis, people can become like mice in a maze, modifying their behavior to maximize short-term rewards and avoid short-term punishment, without much consideration for whether any of their activities are really accomplishing the underlying intent of the whole thing. So, for example, if you have punishment and reward systems set up to make sure people complete documentation per a required schedule, without any review of the content, then you may be in for a nasty surprise somewhere down the road when someone actually needs the documentation for some real purpose. 

### 2. Be careful not to make every good idea a Compliance issue.

If big ""C"" Compliance offers a stick to punish people for non-compliance, then over time various well-intentioned souls will try to avail themselves of the Compliance stick in order to coerce people into doing things they think are good or perhaps even necessary. If this is allowed to go on unchecked, though, then the gradual accretion of additional Compliance requirements will necessarily dilute the force of all of them. In other words, if you require too much under the banner of Compliance, then you run the risk of people losing sight of the stuff that really is essential. 

### 3. Leave as much as possible to the discretion of those performing the work.

Compliance is a blunt object. It is not designed to help with subtle distinctions. If you need to do fine, detailed work, then don't use a hammer, or you're going to make a mess of things. If you tell the people doing the work that someone else making the compliance rules knows better than they do, then the biggest danger is that they are liable to start believing that fiction, and then will stop thinking about the work they are doing, since they no longer have the authority to decide how to do it. 

Always consider education and coaching and experiential learning first, before resorting to Compliance to try to change people's behavior. 

### 4. Become familiar with the [Dreyfus Model of Skill Acquisition](http://pagantuna.com/posts/the-dreyfus-model-of-skill-acquisition.html).

Given sufficient time and opportunity, people will proceed up a scale gradually from novice to expert. At the lower levels, they will feel responsible for following rules they've been given. At the higher levels, they will internalize the rules and will feel responsible for achieving results. But if you turn general rules into big ""C"" Compliance requirements, then you run the risk of actually holding people back in their progress up this ladder, keeping them forever thinking that the rules are more important than the results. *You really don't want to do that.*

### 5. Understand Your Compliance Posture before the Auditor Arrives.

If you're working in the Compliance arena, then sooner or later you will have to answer to an auditor. If you understand the underlying compliance requirements, and can articulate how you are meeting those requirements in your environment, then you stand a good chance of emerging from the audit relatively unscathed. The last thing you want to do in such a situation is to come in ignorant and unprepared, and wait for the visitor to audit you into compliance. If you do this, then you will find over time that the second auditor will find the recommendations of the first auditor to be deficient, and will give you a new set of recommendations. The only defense against this sort of continual writhing is to figure out for yourself how best to meet the compliance requirements in your environment, and then defend your position vigorously and honestly when confronted by an auditor.  

### 6. Avoid Robo-Signing.

If your Compliance activities involve oversight and approval forms, and if you require certain forms to be reviewed and renewed on a regular schedule, then at some point you will be tempted to centralize the the review and approval of these forms in order to make the whole process more ""efficient."" The danger, of course, is that the whole process will then become meaningless, and you will then be well along the slippery slope of ""robo-signing"". It is hard to think of a situation in which such an approach would actually do much to achieve the original goals that were the initial motivation for the whole process. 

## Summary

There you have it: six key ideas to keep in mind as you approach your Compliance work. Above all, remember that, if the goal of your Compliance work is to reduce risk, then make sure every step in your process is actually helping you to achieve that goal, and not just something you are doing to help you feel more ""Compliant.""
"
Technology	Effective Compliance	2015-12-05	9 - Closed	Leadership, Technology	"<p>In a corporate environment, the term &#8220;compliance&#8221; is often used to mean a number of different things. </p><br><br><ol><br><li><p>The practice of following one or more sets of binding laws, regulations, policies and/or procedures. </p></li><br><li><p>An organization or function that is put in place to validate that compliance (in the sense above) is maintained.</p></li><br><li><p>The demonstration, or the ability to demonstrate upon demand, that compliance (in the first sense) is being maintained. </p></li><br></ol><br><br><p>Compliance in the second and third senses above &#8212; what we might call the big &#8220;C&#8221; Compliance &#8212; often becomes most important in areas where failure to comply may produce long-term negative consequences, without any corresponding short-term issues or visibility. Information Security and Disaster Recovery Planning are good examples. Because there are no other quick feedback loops in cases like these, special oversight is often put in place to ensure that everyone is doing the right thing now to prevent or mitigate some possible catastrophe in the future. </p><br><br><p>In my experience, it&#8217;s important to keep in mind a number of key ideas in order to maximize the effectiveness of your compliance activities. </p>
"	"In a corporate environment, the term ""compliance"" is often used to mean a number of different things. 

1. The practice of following one or more sets of binding laws, regulations, policies and/or procedures. 

2. An organization or function that is put in place to validate that compliance (in the sense above) is maintained.

3. The demonstration, or the ability to demonstrate upon demand, that compliance (in the first sense) is being maintained. 

Compliance in the second and third senses above -- what we might call the big ""C"" Compliance -- often becomes most important in areas where failure to comply may produce long-term negative consequences, without any corresponding short-term issues or visibility. Information Security and Disaster Recovery Planning are good examples. Because there are no other quick feedback loops in cases like these, special oversight is often put in place to ensure that everyone is doing the right thing now to prevent or mitigate some possible catastrophe in the future. 

In my experience, it's important to keep in mind a number of key ideas in order to maximize the effectiveness of your compliance activities. 

### 1. Always keep the underlying intent in mind.

Avoid a ""check the box"" mentality by continually reinforcing the underlying intent of the Compliance activities. Without this continual emphasis, people can become like mice in a maze, modifying their behavior to maximize short-term rewards and avoid short-term punishment, without much consideration for whether any of their activities are really accomplishing the underlying intent of the whole thing. So, for example, if you have punishment and reward systems set up to make sure people complete documentation per a required schedule, without any review of the content, then you may be in for a nasty surprise somewhere down the road when someone actually needs the documentation for some real purpose. 

### 2. Be careful not to make every good idea a Compliance issue.

If big ""C"" Compliance offers a stick to punish people for non-compliance, then over time various well-intentioned souls will try to avail themselves of the Compliance stick in order to coerce people into doing things they think are good or perhaps even necessary. If this is allowed to go on unchecked, though, then the gradual accretion of additional Compliance requirements will necessarily dilute the force of all of them. In other words, if you require too much under the banner of Compliance, then you run the risk of people losing sight of the stuff that really is essential. 

### 3. Leave as much as possible to the discretion of those performing the work.

Compliance is a blunt object. It is not designed to help with subtle distinctions. If you need to do fine, detailed work, then don't use a hammer, or you're going to make a mess of things. If you tell the people doing the work that someone else making the compliance rules knows better than they do, then the biggest danger is that they are liable to start believing that fiction, and then will stop thinking about the work they are doing, since they no longer have the authority to decide how to do it. 

Always consider education and coaching and experiential learning first, before resorting to Compliance to try to change people's behavior. 

### 4. Become familiar with the [Dreyfus Model of Skill Acquisition](http://pagantuna.com/posts/the-dreyfus-model-of-skill-acquisition.html).

Given sufficient time and opportunity, people will proceed up a scale gradually from novice to expert. At the lower levels, they will feel responsible for following rules they've been given. At the higher levels, they will internalize the rules and will feel responsible for achieving results. But if you turn general rules into big ""C"" Compliance requirements, then you run the risk of actually holding people back in their progress up this ladder, keeping them forever thinking that the rules are more important than the results. *You really don't want to do that.*

### 5. Understand Your Compliance Posture before the Auditor Arrives.

If you're working in the Compliance arena, then sooner or later you will have to answer to an auditor. If you understand the underlying compliance requirements, and can articulate how you are meeting those requirements in your environment, then you stand a good chance of emerging from the audit relatively unscathed. The last thing you want to do in such a situation is to come in ignorant and unprepared, and wait for the visitor to audit you into compliance. If you do this, then you will find over time that the second auditor will find the recommendations of the first auditor to be deficient, and will give you a new set of recommendations. The only defense against this sort of continual writhing is to figure out for yourself how best to meet the compliance requirements in your environment, and then defend your position vigorously and honestly when confronted by an auditor.  

### 6. Avoid Robo-Signing.

If your Compliance activities involve oversight and approval forms, and if you require certain forms to be reviewed and renewed on a regular schedule, then at some point you will be tempted to centralize the the review and approval of these forms in order to make the whole process more ""efficient."" The danger, of course, is that the whole process will then become meaningless, and you will then be well along the slippery slope of ""robo-signing"". It is hard to think of a situation in which such an approach would actually do much to achieve the original goals that were the initial motivation for the whole process. 

## Summary

There you have it: six key ideas to keep in mind as you approach your Compliance work. Above all, remember that, if the goal of your Compliance work is to reduce risk, then make sure every step in your process is actually helping you to achieve that goal, and not just something you are doing to help you feel more ""Compliant.""
"
Agile	Agile Architecture	2016-01-31	9 - Closed	Agile	"<p>Many Agilistas view any discussion of architecture as the first step down a slippery slope that, once taken, will inevitably lead a project into the fiery pit of waterfall.</p> <p>Let&#8217;s see if we can unpack this subject a bit, and possibly even reach agreement on a sensible way to do architecture on agile software development projects, especially large and complex ones.</p>
"	"Many [Agilistas][] view any discussion of architecture as the first step down a slippery slope that, once taken, will inevitably lead a project into the fiery pit of waterfall.

Let's see if we can unpack this subject a bit, and possibly even reach agreement on a sensible way to do architecture on agile software development projects, especially large and complex ones.

<h2 id=""table-of-contents"">Table of Contents</h2>

<div id=""toc"">
<ul>
  <li>
    <a href=""#architecture-vs-design"">Architecture vs. Design</a>
  </li>
  <li>
    <a href=""#architectural-areas"">Architectural Areas</a>
  </li>
  <li>
   <a href=""#architectural-drivers"">Architectural Drivers</a>
  </li>
  <li>
    <a href=""#consideration-of-alternatives-and-tradeoffs"">Consideration of Alternatives and Trade-Offs</a>
  </li>
  <li>
    <a href=""#timing-of-architecture-and-design"">Timing of Architecture and Design</a>
  </li>
  <li>
    <a href=""#architectural-runway-and-enabler-epics"">Architectural Runway and Enabler Epics</a>
  </li>
  <li>
    <a href=""#a-project-roadmap"">A Project Roadmap</a>
  </li>
  <li>
    <a href=""#architectural-deliverables"">Architectural Deliverables</a>
  </li>
  <li>
    <a href=""#project-cadence"">Project Cadence</a>
  </li>
  <li>
    <a href=""#design-reviews-and-gates"">Design Reviews and Gates</a>
  </li>
  <li>
    <a href=""#what-about-detailed-design"">What About Detailed Design?</a>
  </li>
  <li>
    <a href=""#what-about-emergent-learning"">What About Emergent Learning?</a>
  </li>
  <li>
    <a href=""#who-does-architecture"">Who Does Architecture?</a>
  </li>
</ul>

</div>


First of all, what do we mean by architecture?

There are at least two different points to be clarified here.


<h2 id=""architecture-vs-design"">Architecture vs. Design</h2>

The terms architecture and design have very similar definitions, so in many contexts they are used to denote the same thing, and are used interchangeably.

If we are to try to make a distinction, though, then architecture usually refers to a more elevated level of design, expressed at a higher level of abstraction, and/or an earlier stage of design.

More significantly perhaps, architecture may prescribe a series of patterns to be used on the project, with instantiation of those patterns constituting more detailed design work.

In this sense, the overall solution architecture must be established before detailed design can occur, and the detailed design must work within, and be constrained by, the overall architecture.


<h2 id=""architectural-areas"">Architectural Areas</h2>

When we discuss the architecture of a system, there are at least five different (albeit related) areas that must be considered.

* Information: What are the major entities/objects/facets to be considered by the system, and how will each of these things be identified?

* Functional: What business functions will be performed, and how do they relate to each other, and to other functions that are out of scope?

* User Interface: How will the user navigate through the system, what will the system look like, and what sort of special controls or other UI elements may be needed?

* Technology/Infrastructure: What are the technologies to be used by the project, and what roles will those technologies play? On what infrastructure (both hardware and software) will the application run? What development tools will be used?

* Software: What software modules, or module types, will be written, and how will they relate to each other?

If you are missing any one of these, then you don't have a complete architecture.


<h2 id=""architectural-drivers"">Architectural Drivers</h2>

Architecture is driven primarily by four different items.

* Enterprise Architecture: The application architecture must work within Enterprise standards, principles and guidelines.

* Segment/Domain Architecture: Similarly, the application must respect the boundaries and guidance established for the particular domain that it occupies.

* Business/Functional Requirements: The application architecture will obviously be strongly influenced by the particular business functions the application must perform.

* Non-Functional Requirements (NFRs): These are often requirements that define desired quality attributes of the system to be developed.


<h2 id=""consideration-of-alternatives-and-tradeoffs"">Consideration of Alternatives and Trade-Offs</h2>

Whether you are using agile practices or a more traditional methodology, one hallmark of a worthwhile approach to architecture/design is the consideration of alternatives, and the evaluation of trade-offs between those alternatives.

A common error is to assume certain architectural elements and so to adopt them without discussion, perhaps because developers on the team have used certain architectures before, and so bring them along with them to their next project.

In this respect, it is helpful to keep in mind some [research on diversity][forbes] indicating that more heterogenous teams often feel that they are struggling and floundering when compared to more homogenous ones, and yet actually perform better than their less diverse counterparts.


<h2 id=""timing-of-architecture-and-design"">Timing of Architecture and Design</h2>

In traditional software development, architecture and design are typically done and completed before coding starts, as part of the well known [waterfall approach][wf].

Some agile enthusiasts advocate for the opposite approach, touting ""[emergent design][emdesign],"" and simply jump into coding with little or no architectural preparation. And while this may work for small efforts building on established architectures, it often falls short in larger efforts, and may lead to floundering and rework and poor designs that fail to stand up over time.

A reasonable compromise is represented by the ""JEDUF"" approach: Just Enough Design Up Front. With this approach some major design decisions are made before coding, while still allowing for more detailed design to emerge during development, and with the understanding that some refactoring may occur, in order to optimize designs in the face of new discoveries that will arise along the way.

On large projects/programs, however, the combination of some initial architecture, followed by emergent design during sprints, may still not be sufficient to provide for the right amount of architecture at the right time.


<h2 id=""architectural-runway-and-enabler-epics"">Architectural Runway and Enabler Epics</h2>

When decomposing the work to be done on a large agile project, it can be useful to start with a number of epics to be implemented, with each epic later being broken down into a number of features, and each feature eventually being broken down into stories.

With this approach, it may be helpful to distinguish between Architectural epics and Business/Functional epics, with the former laying the foundation upon which the latter will be built.

Another popular way to think about this is that the Architectural epics extend the runway far enough to allow the Business/Functional epics to proceed without disruption, with the architecture always being done just far enough in advance to prevent the business/functional work from running out of runway.

The [Scaled Agile Framework][safe] (SAFe) calls these architectural pieces of work ""[enablers][],"" and that's a good way to think about them: the enablers allow the next chunk of business/functional development to proceed.


<h2 id=""a-project-roadmap"">A Project Roadmap</h2>

Agile projects try to maximize flexibility by lumping all work to be done into a backlog, with the idea that items can be added, subtracted and reprioritized at will, without any unnecessary constraints on content or sequence of execution.

While this sort of flexibility is admirable, by the time you are building a high level backlog out of both enabler and business epics, your are certainly beginning to run into some dependencies that will suggest some sequence to the work to be done.

At this point, it is probably best to begin to represent the epics to be worked -- both enablers and business epics -- in a roadmap of some kind, and not simply as a backlog.

The roadmap should still be subject to change -- it shouldn't be cast in stone -- but it is important to understand when various pieces of runway will need to be extended, and what other work will need that runway in order to proceed.


<h2 id=""architectural-deliverables"">Architectural Deliverables</h2>

Agile practitioners are sometimes a bit vague about what is actually produced out of architectural work, and so it is worthwhile to be explicit about what deliverables will be produced by enabler epics. These deliverables essentially fall into three categories.

* Reference designs, including patterns, to be used by subsequent business/functional development.

* Hardware and software components (infrastructure and/or reusable application components) needed to enable later business/functional work. These are not just designs, but actual bits of hardware and software that can be used by the application.

* Proofs of concept that demonstrate the feasibility of the design work done, and the readiness to proceed with subsequent business/functional development.


<h2 id=""project-cadence"">Project Cadence</h2>

A foundational element of all agile development is the regular cadence of the work being done. Teams work in short sprints (aka iterations) of 1 - 4 weeks. More substantial projects may group multiple team sprints into larger chunks of work, such as the ""[Program Increments][pi]"" (or PIs) defined by SAFe. The work to be done is then subdivided into pieces small enough that they can be worked reliably within this regular cadence, rather than adjusting start and stop dates to fit the size of the work.

But how do we fit architectural work into such a cadence?

If any accommodation for this work is made at all, it is sometimes done by allowing for some fixed amount of architecture work to be done at the start of each iteration, or each program increment, or at the end of each, in preparation for the next.

There are two problems with this sort of cadenced approach to architecture:

* The need for architectural work does not occur at such regular intervals;

* The length of time needed for each piece of architecture can vary considerably, and so cannot be reliably squeezed into a fixed amount of time for each increment.

A better approach is to allow the work planned for each iteration/increment to consist of some combination of architectural enablers and business/functional development, with the amount of architectural work and its timing determined based on the project roadmap being followed.

An enabler epic, then, could be started at any point in the project, and could complete after one, two or three or more iterations/increments -- as many as are needed to complete the work.

These intermittent injections of architectural work into the team's regular cadence are sometimes referred to as ""spikes,"" a term that reflects the uneven distribution of this work over the course of the project.

With such an approach, once the pump is primed with the initial architecture, enabler work and business development will proceed in parallel, with the enabler work timed to keep the runway built in advance of the proceeding business work.


<h2 id=""design-reviews-and-gates"">Design Reviews and Gates</h2>

If you are working in an environment where design reviews and perhaps even firm gates are required, then the natural place for these to occur is at the end of each architecture/enabler epic. These can be planned in advance based on the project roadmap, and the deliverables specified above can be inspected as part of these reviews.


<h2 id=""what-about-detailed-design"">What About Detailed Design?</h2>

The detailed functional design of particular screens, reports and interfaces can be done as part of the normal development work done within each iteration/increment, so long as this work is based on the more general architectural work already performed.


<h2 id=""what-about-emergent-learning"">What About Emergent Learning?</h2>

The guidance provided above is intended to help large and complex projects navigate their ways through some of the difficulties often encountered when doing architectural work.

But the desire to rigidly follow an established architecture must always be weighed against the potential benefits of adapting to take advantage of new learnings that emerge doing the development work.

It is always good to design before you build, but software development is a complex business, and there is no guarantee you will get everything right before you start building.


<h2 id=""who-does-architecture"">Who Does Architecture?</h2>

In a large enterprise, you will often have several layers of architects.

Enterprise architects sit at the top of the pyramid, helping to guide and govern development work across the entire scope of the business, and establishing principles and standards to be followed by projects.

At the next layer, you may have domain/segment architects, who try to understand a particular segment of the business, and work out the relationships between the various data stores and applications serving that domain.

Application architects, then, will be responsible for the architecture of particular applications, and it is this work that has been the focus of our discussion today.

Within agile, the explicit role of an architect is often omitted, giving way to the egalitarian desire to let all developers participate equally in design work. And while it is generally good to foster creativity throughout the team, and to empower developers to contribute to design work, the truth is that in most successful agile projects you will find a lead developer who ends up guiding and shaping most of the architecture/design for the application. You can call him or her what you will, but once you set out to be more intentional about the way architecture/design work is performed on an agile project, you will also need to be a bit more explicit about the roles involved as well.


[agilistas]: http://www.urbandictionary.com/define.php?term=Agilista
[emdesign]: http://www.agilesherpa.org/agile_coach/engineering_practices/emergent_design/

[enablers]: http://scaledagileframework.com/agile-architecture/

[forbes]:   http://www.forbes.com/2009/06/02/diversity-collaboration-teams-leadership-managing-creativity.html

[pi]:       http://scaledagileframework.com/program-increment/

[safe]:     http://scaledagileframework.com/

[wf]:       https://en.wikipedia.org/wiki/Waterfall_model
"
Lean and Agile	A New Model for Lean Culture	2016-04-22	9 - Closed	Lean and Agile	"<p>When companies attempt to implement <a href=""http://en.wikipedia.org/wiki/Lean_manufacturing"">lean</a> principles, some of their biggest stumbling blocks seem to be the cultural elements. While some of the <a href=""http://en.wikipedia.org/wiki/Toyota"">Toyota</a> methods are very clear and specific, the cultural issues often seem more difficult to pin down. Many organizations seem to translate the most obvious elements into terms that they are comfortable with, but something often seems to get lost in the translation, and their lean implementations struggle because they have not really modified some of the basic ways in which they think about their work. </p>

<p>It occurred to me recently that the basic differences in lean culture might be represented in a very simple model. At first the simplicity of the model seemed to be too good to be true, but the more I thought about it, the more it seemed to help clearly explain some of the issues that typically cause the most confusion. </p>
"	"Introduction
------------

When companies attempt to implement [lean][] principles, some of their biggest stumbling blocks seem to be the cultural elements. While some of the [Toyota][] methods are very clear and specific, the cultural issues often seem more difficult to pin down. Many organizations seem to translate the most obvious elements into terms that they are comfortable with, but something often seems to get lost in the translation, and their lean implementations struggle because they have not really modified some of the basic ways in which they think about their work. 

It occurred to me recently that the basic differences in lean culture might be represented in a very simple model. At first the simplicity of the model seemed to be too good to be true, but the more I thought about it, the more it seemed to help clearly explain some of the issues that typically cause the most confusion. 

Elements of the Model
---------------------

The model consists of only three elements. 

### Structure

By structure, I mean processes, tools, organization charts, roles and responsibilities, job definitions and grades, concepts of operation, budgets, plans, performance goals and objectives, metrics systems and all the other documents and systems by which companies define the ways in which they expect to work. 

### People

By people, I mean those who actually do the work of the organization. 

### Issues

By issues, I mean problems, opportunities, risks, red flags, items with which people need help, events that should stimulate action, and situations that require decisions.

The Model
---------

![Lean Model Diagram](../images/a-new-model-for-lean-culture.jpg ""Traditional vs. Lean Cultures"") 

### The Traditional Approach

In the traditional organization, as depicted on the left side of the diagram, the emphasis tends to fall first on the structure, then on the people, and finally on the issues. 

This means that management is focused first on getting the right structures in place. Next, they train, coach and motivate their people to conform to the structures. And, when issues occur, they tend to treat these as unwelcome exceptions: things that would not have occurred if people had only been doing a better job of following the established structures.

### The Lean Approach

In contrast, issues are the first area of focus in a lean culture. Issues are not treated as unwelcome exceptions: they are expected as part of doing business. So the organization is first focused on identifying the most important issues to be worked. People are then trained, coached and motivated to solve problems, to analyze alternatives, and to resolve issues. Structure -- processes, tools, organizational models, and all the rest of it -- are viewed as essential, but as subservient to issues and to people, changing as needed in responses to issues that arise, and people's responses to those issues. 

*The Toyota Way* as Seen through the Model
------------------------------------------

If we arrange the 14 principles of *[The Toyota Way][]* under the elements of the model, they might appear as follows. 

Note that, to show what I consider to be the proper arrangement of two of the items, I have added ""Philosophy"" at the top, and ""Technology"" at the bottom. Also note that, while some of the principles reference two or more of the elements, I have listed them under the elements that seem to play the primary role: for example, the idea of continuous process flow is listed under issues, since the explicit purpose for such a structure is to bring problems to the surface. 

### Philosophy

* Base your management decisions on a long-term philosophy, even at the expense of short-term goals.

### Issues

* Create continuous process flow to bring problems to surface.

* Use ""pull"" systems to avoid overproduction.

* Build a culture of stopping to fix problems, to get quality right the first time.

* Use visual control so no problems are hidden.

* Go and see for yourself to thoroughly understand the situation (genchi genbutsu).

* Make decisions slowly by consensus, thoroughly considering all options; implement decisions rapidly.

### People

* Grow leaders who thoroughly understand the work, live the philosophy, and teach it to others.

* Develop exceptional people and teams who follow your company's philosophy.

* Respect your extended network of partners and suppliers by challenging them and helping them improve.

* Become a learning organization through relentless reflection and continuous improvement.

### Structure

* Standardized tasks are the foundation for continuous improvement and employee empowerment.

* Level out the workload.

### Technology

* Use only reliable, thoroughly tested technology that serves your people and processes.

Based on the allocation shown above, we can see that the order of precedence I am suggesting is supported by the numbers of items at each level, as well as by the dependencies indicated by the principles themselves: for example, standardized tasks are the foundation for continuous improvement (responding to issues) and employee empowerment (people).

Implications of the Model
-------------------------

Any good model should help explain known phenomena, so let's look at some of the common observations about differences in lean organizations, and see how they relate to this model. 

### Attitudes Towards Process

**Phenomenon**: Other companies seem to struggle with Toyota workers' acceptance of process standards. For many traditional organizations, it seems difficult to get their workers to take process seriously. These companies sometimes respond to this issue by placing greater emphasis on process discipline, but this often seems to result in a ""process backlash,"" rather than acceptance of process standards by the workforce. 

**Explanation**: People sometimes mistakenly think that, for Toyota and other lean companies, ""process is paramount."" However, as this model clearly shows, process is an essential element, but is subservient to both issues and people. This means that processes change and evolve in response to new issues, or to new answers to existing issues. This also means that teams of workers are empowered to change processes when they demonstrate that they have found a better way. 

For traditional organizations, however, processes are viewed as being first and foremost. This means that the people either blindly accept the structures they are given, or covertly resist them as being too rigid and arbitrary. 

### Waste vs. Productivity

**Phenomenon**: When first introduced to the concept of waste, and waste reduction, many people used to working in traditional organizations seem to respond by saying, ""Yes, I understand: this is the same thing as improving productivity. We're already doing that."" Yet this response seems to miss the point. 

**Explanation**: For most organizations, productivity improvement is a structural element: part of a company initiative, an annual goal, or a required chart in a standard performance review. Another way to say this is that productivity is a systematic way of measuring the results of waste reduction. 

Waste, on the other hand, is an issue: a specific way in which resources are being consumed without adding any value to a product or service. 

This may sound like a simple semantic distinction, but think of the resulting difference in the communication to people. In a traditional organization, a leader might set a productivity improvement goal, then flow it down to teams and individuals: ""you must improve your productivity this year by 4%."" In a lean culture, the focus is on teaching employees to recognize waste, and then to eliminate it or reduce it. In this environment, leaders focus their communications on helping employees to solve difficult problems, to strengthen their own problem-solving skills, and to mentor others. 

### Stop the Line

**Phenomenon**: One of the most frequently cited elements of the [Toyota Production System][] is the ability of any manufacturing worker to stop the assembly line when they recognize a significant product defect. This practice is often difficult for other companies to accept or to understand, let alone implement successfully.

**Explanation**: The production line is an important element of structure: it is an embodiment of the manufacturing process for product assembly. 

In a lean culture, since structure is subservient to issues and to people, it is only natural for a worker to be able to stop the line when he or she spots a significant defect: if the structure is producing defects, then it needs to be stopped and changed, and it is the responsibility of every employee to do this when appropriate. 

In a traditional culture, though, since the structure of the production line has the highest priority, it is difficult to accept that people have the power and responsibility to stop it, no matter how significant the issue that has been discovered. 

### Shoot the Messenger

**Phenomenon**: Toyota is famous for the way that it deals with problems: managers and engineers inspect the work and the product to help resolve issues, and teams and organizations tend to take joint ownership of problems rather than to lay blame on particular individuals. In more traditional cultures, though, those who bring bad news to leadership are often punished for doing so and, even when they recognize that this sort of behavior is dysfunctional, leaders in traditional organizations often seem powerless to behave differently. 

**Explanation**: In traditional organizations, managers tend to think of themselves as responsible for laying out basic organizational structures, and communicating these to their people. If people later bring problems back to management, then this is viewed in one of the following ways: 

* The problem resulted from employees failing to conform to the structures they were given, which is indicative of either incompetence or willful disobedience. 

* The problem resulted from a problem with the structures laid down by management, resulting in an implicit criticism of management. 

In either case, the natural response is to punish the messenger to motivate appropriate future behavior. 

### [Kanban][]

**Phenomenon**: Before learning of Toyota's approach, traditional manufacturers controlled work on the shop floor through the implementation of increasingly complex manufacturing resource planning systems. Toyota demonstrated a better way, however, by using simple visual triggering systems employing cards or other simple devices to signal that supplies of a part had been exhausted, and more needed to be built.  

**Explanation**: The natural tendency of a traditional organization is to create a complex, highly structured system to control work. People are then trained on how to use the system, and when results are not as desired, the system is improved or the people are given additional training to improve their conformance to the system. 

The lean approach, however, is to recognize the need to build more parts as an issue: rather than hiding issues as symptoms of failure, the lean culture naturally accepts and highlights such issues so that people can respond to them appropriately. 

### Growth vs. Decay

**Phenomenon**: Over the past seven decades, the Toyota Corporation has grown from a small, almost unknown Japanese company to a major international presence. Even as it has opened its kimono and invited others to study and learn from its practices, other companies have imitated its methods and tried to emulate its success, but Toyota has continually outpaced its competitors and adapted successfully to new challenges as it has continued to grow. 

**Explanation**: The traditional model is essentially a [steady state][] model, in that it assumes that, once the correct structures have been put in place, conformance to structure is the only requirement for continued operation. In this sense, it is like any [perpetual motion][] machine, since it sooner or later succumbs to friction and entropy and loses energy until it ceases to function. 

The lean model, on the other hand, is a dynamic model. A steady stream of new issues is assumed, and the people and the structures of the organization adapt and respond to these new issues as they emerge. 

### Adoption of External Standards

**Phenomenon**: Despite the fact that many standards have been created in order to instill and promote the very principles of quality on which Toyota has built its own Production System, Toyota has repeatedly indicated that it has no interest in demonstrating conformance to these external standards, including [ISO 9000][], [Malcolm Baldrige][], [CMMI][], and others.  

**Explanation**: Since traditional cultures place the highest priority on structures, they often attempt to implement quality improvements by basing their own internal structures on some existing external structures, such as these sorts of quality standards. These sorts of quality programs often fail to bear long-term fruit, however. 

In the case of lean culture, though, since an organization's structures are seen as evolving in response to their own people and issues, and since they have no influence over external structures, it makes no sense for them to seek to conform to these external standards.

Conclusion
----------

This new cultural model seems helpful, in that it is simple, intuitive and easy to grasp, yet helps us to understand and explain the methods, practices, and ultimately the successful results already observed and documented to be associated with a lean organization such as Toyota's. 

[CMMI]: http://en.wikipedia.org/wiki/CMMI

[ISO 9000]: http://en.wikipedia.org/wiki/ISO_9000

[Kanban]: http://en.wikipedia.org/wiki/Kanban

[lean]: http://en.wikipedia.org/wiki/Lean_manufacturing

[Malcolm Baldrige]: http://en.wikipedia.org/wiki/Malcolm_Baldrige_National_Quality_Award

[perpetual motion]: http://en.wikipedia.org/wiki/Perpetual_motion

[steady state]: http://en.wikipedia.org/wiki/Steady_state

[The Toyota Way]: http://en.wikipedia.org/wiki/The_Toyota_Way

[Toyota]: http://en.wikipedia.org/wiki/Toyota

[Toyota Production System]: http://en.wikipedia.org/wiki/Toyota_production_system
"
Software Development	Introduction to Soft Dev Big Ideas	2016-09-12	9 - Closed	Software Development	"<p>I have been practicing software development for more than four decades now, and over that time, in addition to writing a lot of code, and being part of numerous projects in varying capacities, I&#8217;ve done a fair amount of reading on the topic. In fact, I have shelves full of books on the subject, starting with classics like <em>The Mythical Man Month</em>, proceeding through the CMM period and then on into the Lean/Agile years.</p>

<p>And, of course, the number of new words written on the topic increases daily.</p>

<p>How can a software developer keep up?</p><p>I&#8217;m a firm believer that new ideas are generated from time to time, and that it is worthwhile to read about software development as well as to do it; on the other hand, I&#8217;m now at the point of wondering whether it wouldn&#8217;t be possible to communicate the most important ideas about the field in a simpler, more concise, more easily accessible fashion.</p>

<p>And so I am setting off to test my hypothesis by trying to document the <a href=""http://www.softdevbigideas.com"">Big Ideas in Software Development</a> in a concrete, manageable, sequential list.</p>
"	"I have been practicing software development for more than four decades now, and over that time, in addition to writing a lot of code, and being part of numerous projects in varying capacities, I've done a fair amount of reading on the topic. In fact, I have shelves full of books on the subject, starting with classics like <cite>The Mythical Man Month</cite>, proceeding through the CMM period and then on into the Lean/Agile years.
And, of course, the number of new words written on the topic increases daily.

How can a software developer keep up?

I'm a firm believer that new ideas are generated from time to time, and that it is worthwhile to read about software development as well as to do it; on the other hand, I'm now at the point of wondering whether it wouldn't be possible to communicate the most important ideas about the field in a simpler, more concise, more easily accessible fashion.

And so I am setting off to test my hypothesis by trying to document the [Big Ideas in Software Development][sdbi] in a concrete, manageable, sequential list.

Some of these ideas are specific to software development, but many have broader application; my primary intent is to include ideas that I've found most helpful over the years, and that I would want to recommend to others working in the field.

[SoftDevBigIdeas.com][sdbi] describes Big Ideas, and not specific practices. Practices are important, but my experience has been that even the best practices can be misapplied and produce poor results if leaders and developers lack a solid understanding of these ideas, and so I've tried to focus on the ideas behind the practices.

Many of these ideas overlap and reinforce each other, but hopefully each adds something new and important to the collection as a whole.

I've included liberal citations from many of my favorite authors and works. In some cases I've incorporated these into my text and commented on them, but in others I've simply left them at the bottom of a relevant page for readers to enjoy, trusting that their pertinence to the ideas at hand will prove to be easily discernible. I've collected the sources of these citations into a generous bibliography that can be found in the Reference section.

I should warn readers up front that those who align themselves with a particular methodology or movement, such as Lean, Agile or Waterfall, may well be disappointed by some of what they find here. My own strong sense is that we've reached a point in the evolution of our thinking where these sorts of labels do more harm than good, and that it is time to rally around a set of shared ideas because they make sense, and because they have generally been found to work, without regard to what sort of branding they have been associated with in the past.

My intended audience for this work includes both those relatively new to the field of software development, as well as those who have been practicing this trade for many years. For the former, I hope it may provide a concise introduction to some of these ideas and, for the latter, I hope it may provide a useful reminder. In both cases, my intent is to offer a fairly complete, concise and balanced list of the ideas that bear careful consideration in any software development effort.

Software development is one of the riskiest human activities yet conceived: projects are often late or over budget, frequently canceled, and in many cases fail to find an appreciative audience even when they do reach a state of completion. Nothing I offer at [SoftDevBigIdeas][sdbi] can guarantee the success of your next effort, but I do think that sincere and thoughtful consideration of the ideas presented there can increase your chances of success.

In any case, though, I'd be happy to hear your feedback on the site. Correspondence may be directed to [bigkahuna@pagantuna.com](mailto:bigkahuna@pagantuna.com).

The new site is available now at **[SoftDevBigIdeas.com][sdbi]**.

----

<blockquote>
<p>
Great minds discuss ideas, average ones discuss events, and small minds discuss people.</p>

<footer>
<a href=""http://en.wikipedia.org/wiki/Eleanor_Roosevelt"">Eleanor Roosevelt</a>
</footer>
</blockquote>

----

<blockquote>
<p>
Those of us who have been true readers all our life seldom fully realize the enormous extension of our being which we owe to authors. We realize it best when we talk with an unliterary friend. He may be full of goodness and good sense but he inhabits a tiny world. In it, we should be suffocated. The man who is contented to be only himself, and therefore less a self, is in prison. My own eyes are not enough for me, I will see through those of others.</p>

<footer>
<a href=""http://en.wikipedia.org/wiki/C._S._Lewis"">C. S. Lewis</a> from the book <cite><a href=""http://www.softdevbigideas.com/bibliography.html#lewis-1961"">An Experiment in Criticism</a></cite> (1961)
</footer>
</blockquote>

----

<blockquote>
<p>
With the exception of a few hysterical CASE vendors and religious zealots, most software professionals would agree that there is no single silver bullet that will exorcise our software demons.</p>

<footer>
<a href=""http://en.wikipedia.org/wiki/Edward_Yourdon"">Edward Yourdon</a> from the book <cite><a href=""http://www.softdevbigideas.com/bibliography.html#yourdon-1992"">Decline and Fall of the American Programmer</a></cite> Copyright &copy; 1992 by PTR Prentice-Hall, Inc.
</footer>
</blockquote>

[sdbi]: http://www.softdevbigideas.com
"
Agile	Agile Software Development and the Core Design Principles for Teams	2019-07-09	9 - Closed	Agile, Teams	"<p>I just came across a wonderfully scientific confirmation of the wisdom of agile software development teams. The source was a surprising one: Evolutionary Biologist David Sloan Wilson's latest book <i>This View of Life: Completing the Darwinian Revolution</i>. </p>
"	"<p><img src=""../images/team.jpg"" alt=""TEAM"" title=""TEAM"" /></p>

I just came across a wonderfully scientific confirmation of the wisdom of [agile software development teams](https://www.softdevbigideas.com/self-organizing-teams.html). 

The source was a surprising one: Evolutionary Biologist David Sloan Wilson's latest book *[This View of Life: Completing the Darwinian Revolution](https://amzn.to/2xkpCPl)*. 

The applicable knowledge comes in Chapter 8, ""What All Groups Need."" Here's the first paragraph that caught my attention:

> Multilevel selection theory tells us that something similar to team-level selection took place in our species for thousands of generations, resulting in adaptations for teamwork that are baked into the genetic architecture of our minds. Absorbing this fact leads to the conclusion that *small groups are a fundamental unit of human social organization*. Individuals cannot be understood except in the context of small groups, and large-scale societies need to be seen as a kind of multicellular organism comprising small groups. 

What this means is that, as human beings, we are hard-wired, not to compete and survive as individuals, but to work together cooperatively as members of small teams, with a maximum size of about 15 individuals: something that agile proponents have been preaching for close to two decades now. 

But Wilson then gets much more specific, citing research done by [Elinor Ostrom](https://en.wikipedia.org/wiki/Elinor_Ostrom), the 2009 winner of the Nobel Prize in Economics, as well as a 2012 paper co-authored by Ostrom, Wilson and Cox, titled ""[Generalizing the core design principles for the efficacy of groups](https://evolution-institute.org/new.evolution-institute.org/wp-content/uploads/2018/10/Generalizing-the-Core-1.pdf).""

Wilson lays out in his book, based on this published and recognized research, the eight core design principles (CDPs) that make the difference between success and failure of teams. I will paraphrase here. 

1. **Strong Group Identity with Clearly Defined Boundaries.** This includes a shared understanding of the team's goals, the boundaries of their resources, and the rights and obligations of being a team member. 
2. **Proportional Equivalence Between Benefits and Costs.** Team members must be fairly rewarded based on their contributions. 
3. **Fair and Inclusive Decision-Making.** Everyone gets a chance to participate in decision-making, and decisions are made in a way recognized by all to be fair. Also, decisions are made at the lowest possible level, both to confer a sense of empowerment, but also to allow decisions to be made based on local circumstances best known and appreciated by the team itself. 
4. **Monitoring Agreed-Upon Behaviors.** The team must have a way of monitoring team members and detecting deviations from the team's accepted norms. 
5. **Graduated Sanctions.** This may start as friendly pressure from peers, but then may proceed to more serious consequences if the negative behavior persists. 
6. **Fast and Fair Conflict Resolution**. When conflicts arise, teams must have a way to resolve them quickly and in a manner seen as fair. 
7. **Local Autonomy**. Teams must have the freedom to conduct their own affairs, generally free of externally imposed rules. 
8. **Polycentric Governance**. In large organizations that consist of multiple teams, relationships among teams must embody the same principles as the relationships among individuals within each team. This means that the core design principles above are scale-independent. 

It's interesting to note that Ostrom's research was based on observations of the actual success and failure of many small teams, rather than on the invention of increasingly complex formulas and models often favored by traditional economists -- certainly a vivid reminder of the way that [Agile principles and methods came to be defined and accepted](https://en.wikipedia.org/wiki/Agile_software_development), often flying in the face of guidance offered by organizations such as the [Software Engineering Institute](https://www.sei.cmu.edu) and their [Capability Maturity Models](https://en.wikipedia.org/wiki/Capability_Maturity_Model). 

While Wilson's teachings validate much of what Agile proponents have been preaching for some time now, they also provide a rigorous set of principles that can be used to evaluate [any organization's use of teams](https://www.pagantuna.com/posts/the-importance-of-the-team.html), as well as the operation of any particular team. This strikes me as valuable, because it can help free software developers from the sometimes insular guidance of one particular coach or manager, and potentially help resolve debates on these topics more quickly and authoritatively -- an outcome right in line with CDP 6, as defined above. 

I've excerpted some of Wilson's work in this short piece in order to highlight material that should be of particular interest to software developers and their managers, but in doing so I certainly haven't cherry-picked all the good stuff. I can enthusiastically recommend the [entire book](https://amzn.to/2xkpCPl) to everyone reading this, not just for its insights into the workings of teams, but perhaps even more importantly for insights into what it means to be human in the 21st century. 

I'm always excited to find ideas and models that can be used across disciplines, and Wilson's book amply delivers the goods in this department. 

<p><a href=""https://amzn.to/2xkpCPl""><img src=""../images/this-view-of-life.jpg"" alt=""This View of Life"" title=""This View of Life"" /></a></p>
"
Teams	Agile Software Development and the Core Design Principles for Teams	2019-07-09	9 - Closed	Agile, Teams	"<p>I just came across a wonderfully scientific confirmation of the wisdom of agile software development teams. The source was a surprising one: Evolutionary Biologist David Sloan Wilson's latest book <i>This View of Life: Completing the Darwinian Revolution</i>. </p>
"	"<p><img src=""../images/team.jpg"" alt=""TEAM"" title=""TEAM"" /></p>

I just came across a wonderfully scientific confirmation of the wisdom of [agile software development teams](https://www.softdevbigideas.com/self-organizing-teams.html). 

The source was a surprising one: Evolutionary Biologist David Sloan Wilson's latest book *[This View of Life: Completing the Darwinian Revolution](https://amzn.to/2xkpCPl)*. 

The applicable knowledge comes in Chapter 8, ""What All Groups Need."" Here's the first paragraph that caught my attention:

> Multilevel selection theory tells us that something similar to team-level selection took place in our species for thousands of generations, resulting in adaptations for teamwork that are baked into the genetic architecture of our minds. Absorbing this fact leads to the conclusion that *small groups are a fundamental unit of human social organization*. Individuals cannot be understood except in the context of small groups, and large-scale societies need to be seen as a kind of multicellular organism comprising small groups. 

What this means is that, as human beings, we are hard-wired, not to compete and survive as individuals, but to work together cooperatively as members of small teams, with a maximum size of about 15 individuals: something that agile proponents have been preaching for close to two decades now. 

But Wilson then gets much more specific, citing research done by [Elinor Ostrom](https://en.wikipedia.org/wiki/Elinor_Ostrom), the 2009 winner of the Nobel Prize in Economics, as well as a 2012 paper co-authored by Ostrom, Wilson and Cox, titled ""[Generalizing the core design principles for the efficacy of groups](https://evolution-institute.org/new.evolution-institute.org/wp-content/uploads/2018/10/Generalizing-the-Core-1.pdf).""

Wilson lays out in his book, based on this published and recognized research, the eight core design principles (CDPs) that make the difference between success and failure of teams. I will paraphrase here. 

1. **Strong Group Identity with Clearly Defined Boundaries.** This includes a shared understanding of the team's goals, the boundaries of their resources, and the rights and obligations of being a team member. 
2. **Proportional Equivalence Between Benefits and Costs.** Team members must be fairly rewarded based on their contributions. 
3. **Fair and Inclusive Decision-Making.** Everyone gets a chance to participate in decision-making, and decisions are made in a way recognized by all to be fair. Also, decisions are made at the lowest possible level, both to confer a sense of empowerment, but also to allow decisions to be made based on local circumstances best known and appreciated by the team itself. 
4. **Monitoring Agreed-Upon Behaviors.** The team must have a way of monitoring team members and detecting deviations from the team's accepted norms. 
5. **Graduated Sanctions.** This may start as friendly pressure from peers, but then may proceed to more serious consequences if the negative behavior persists. 
6. **Fast and Fair Conflict Resolution**. When conflicts arise, teams must have a way to resolve them quickly and in a manner seen as fair. 
7. **Local Autonomy**. Teams must have the freedom to conduct their own affairs, generally free of externally imposed rules. 
8. **Polycentric Governance**. In large organizations that consist of multiple teams, relationships among teams must embody the same principles as the relationships among individuals within each team. This means that the core design principles above are scale-independent. 

It's interesting to note that Ostrom's research was based on observations of the actual success and failure of many small teams, rather than on the invention of increasingly complex formulas and models often favored by traditional economists -- certainly a vivid reminder of the way that [Agile principles and methods came to be defined and accepted](https://en.wikipedia.org/wiki/Agile_software_development), often flying in the face of guidance offered by organizations such as the [Software Engineering Institute](https://www.sei.cmu.edu) and their [Capability Maturity Models](https://en.wikipedia.org/wiki/Capability_Maturity_Model). 

While Wilson's teachings validate much of what Agile proponents have been preaching for some time now, they also provide a rigorous set of principles that can be used to evaluate [any organization's use of teams](https://www.pagantuna.com/posts/the-importance-of-the-team.html), as well as the operation of any particular team. This strikes me as valuable, because it can help free software developers from the sometimes insular guidance of one particular coach or manager, and potentially help resolve debates on these topics more quickly and authoritatively -- an outcome right in line with CDP 6, as defined above. 

I've excerpted some of Wilson's work in this short piece in order to highlight material that should be of particular interest to software developers and their managers, but in doing so I certainly haven't cherry-picked all the good stuff. I can enthusiastically recommend the [entire book](https://amzn.to/2xkpCPl) to everyone reading this, not just for its insights into the workings of teams, but perhaps even more importantly for insights into what it means to be human in the 21st century. 

I'm always excited to find ideas and models that can be used across disciplines, and Wilson's book amply delivers the goods in this department. 

<p><a href=""https://amzn.to/2xkpCPl""><img src=""../images/this-view-of-life.jpg"" alt=""This View of Life"" title=""This View of Life"" /></a></p>
"
